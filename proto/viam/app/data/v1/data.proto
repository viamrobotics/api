syntax = "proto3";

package viam.app.data.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "tagger/v1/tagger.proto";

option go_package = "go.viam.com/api/app/data/v1";

// DataService is used to query robot data.
service DataService {
  // TabularDataByFilter queries tabular data and metadata based on given filters.
  rpc TabularDataByFilter(TabularDataByFilterRequest) returns (TabularDataByFilterResponse);

  // BinaryDataByFilter queries binary data and metadata based on given filters.
  rpc BinaryDataByFilter(BinaryDataByFilterRequest) returns (BinaryDataByFilterResponse);

  // BinaryDataByIDs queries binary data and metadata based on given IDs.
  rpc BinaryDataByIDs(BinaryDataByIDsRequest) returns (BinaryDataByIDsResponse);

  // DeleteTabularDataByFilter deletes tabular data based on given filters.
  rpc DeleteTabularDataByFilter(DeleteTabularDataByFilterRequest) returns (DeleteTabularDataByFilterResponse);

  // DeleteBinaryDataByFilter deletes binary data based on given filters.
  rpc DeleteBinaryDataByFilter(DeleteBinaryDataByFilterRequest) returns (DeleteBinaryDataByFilterResponse);

  // DeleteBinaryDataByIDs deletes binary data based on given IDs.
  rpc DeleteBinaryDataByIDs(DeleteBinaryDataByIDsRequest) returns (DeleteBinaryDataByIDsResponse);

  // AddTagsToBinaryDataByFileIDs adds string tags, unless the tags are already present, to binary data based on given IDs.
  rpc AddTagsToBinaryDataByFileIDs(AddTagsToBinaryDataByFileIDsRequest) returns (AddTagsToBinaryDataByFileIDsResponse);

  // AddTagsToBinaryDataByFilter adds string tags, unless the tags are already present, to binary data based on the given filter.
  rpc AddTagsToBinaryDataByFilter(AddTagsToBinaryDataByFilterRequest) returns (AddTagsToBinaryDataByFilterResponse);

  // RemoveTagsToBinaryDataByFileIDs removes string tags from binary data based on given IDs.
  rpc RemoveTagsFromBinaryDataByFileIDs(RemoveTagsFromBinaryDataByFileIDsRequest) returns (RemoveTagsFromBinaryDataByFileIDsResponse);

  // RemoveTagsToBinaryDataByFilter removes string tags from binary data based on the given filter.
  rpc RemoveTagsFromBinaryDataByFilter(RemoveTagsFromBinaryDataByFilterRequest) returns (RemoveTagsFromBinaryDataByFilterResponse);

  // TagsByFilter gets all unique tags from data based on given filter.
  rpc TagsByFilter(TagsByFilterRequest) returns (TagsByFilterResponse);

  // SubmitTrainingJob submits a request to train and save an ml model.
  rpc SubmitTrainingJob(SubmitTrainingJobRequest) returns (SubmitTrainingJobResponse);

  // GetTrainingJob returns the metadata associated with the requested TrainingJob.
  rpc GetTrainingJob(GetTrainingJobRequest) returns (GetTrainingJobResponse);
}

enum Order {
  ORDER_UNSPECIFIED = 0;
  ORDER_DESCENDING = 1;
  ORDER_ASCENDING = 2;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_PARTIAL_SUCCESS = 1;
  STATUS_SUCCESS = 2;
}

message Result {
  Status status = 1;
  // message is an aggregated error message string
  string message = 2;
}

message DataRequest {
  Filter filter = 1;
  uint64 limit = 2;
  string last = 3;
  Order sort_order = 4;
}

message Filter {
  string component_name = 1;
  string component_type = 2;
  string component_model = 3;
  string method = 4;
  string robot_name = 6;
  string robot_id = 7;
  string part_name = 8;
  string part_id = 9;
  repeated string location_ids = 10;
  repeated string org_ids = 11;
  repeated string mime_type = 12;
  CaptureInterval interval = 13;
  TagsFilter tags_filter = 14;
  repeated string tags = 5 [deprecated = true];
}

message TagsFilter {
  TagsFilterType type = 1;
  // Tags are used to match documents if `type` is UNSPECIFIED or MATCH_BY_ORG
  repeated string tags = 2;
}

// TagsFilterType specifies how data can be filtered based on tags
enum TagsFilterType {
  TAGS_FILTER_TYPE_UNSPECIFIED = 0;
  // TAGS_FILTER_TYPE_MATCH_BY_OR specifies documents matched (using logical OR) on the tags field in the TagsFilter
  TAGS_FILTER_TYPE_MATCH_BY_OR = 1;
  // TAGS_FILTER_TYPE_TAGGED specifies that all tagged documents should be returned
  TAGS_FILTER_TYPE_TAGGED = 2;
  // TAGS_FILTER_TYPE_UNTAGGED specifes that all untagged documents should be returned
  TAGS_FILTER_TYPE_UNTAGGED = 3;
}

// CaptureMetadata contains information on the settings used for the data capture
message CaptureMetadata {
  string org_id = 1;
  string location_id = 2;
  string robot_name = 3;
  string robot_id = 4;
  string part_name = 5;
  string part_id = 6;
  string component_type = 7;
  string component_model = 8;
  string component_name = 9;
  string method_name = 10;
  map<string, google.protobuf.Any> method_parameters = 11;
  repeated string tags = 12;
  string mime_type = 13;
}

// CaptureInterval describes the start and end time of the capture in this file
message CaptureInterval {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

// TabularDataByFilterRequest requests tabular data based on filter values
message TabularDataByFilterRequest {
  DataRequest data_request = 1;
  bool count_only = 2;
}

// TabularDataByFilterResponse provides the data and metadata of tabular data
message TabularDataByFilterResponse {
  repeated CaptureMetadata metadata = 1;
  repeated TabularData data = 2;
  int64 count = 3;
  string last = 4;
  uint64 total_size_bytes = 5;
}

message TabularData {
  google.protobuf.Struct data = 1;
  int32 metadata_index = 2;
  google.protobuf.Timestamp time_requested = 3;
  google.protobuf.Timestamp time_received = 4;
}

message BinaryData {
  bytes binary = 1;
  BinaryMetadata metadata = 2;
}

// BinaryDataByFilterRequest requests the data and metadata of binary (image + file) data when a filter is provided
message BinaryDataByFilterRequest {
  DataRequest data_request = 1;
  bool include_binary = 2;
  bool count_only = 3;
}

// BinaryDataByFilterResponse provides the data and metadata of binary (image + file) data when a filter is provided
message BinaryDataByFilterResponse {
  repeated BinaryData data = 1;
  uint64 count = 2;
  string last = 3;
}

// BinaryDataByFilterRequest requests the data and metadata of binary (image + file) data by file ids
message BinaryDataByIDsRequest {
  repeated string file_ids = 1;
  bool include_binary = 2; // by default
}

// BinaryDataByIDsResponse provides the data and metadata of binary (image + file) data when a filter is provided
message BinaryDataByIDsResponse {
  repeated BinaryData data = 1;
  uint64 count = 2;
}

message BinaryMetadata {
  string id = 1;
  CaptureMetadata capture_metadata = 2;
  google.protobuf.Timestamp time_requested = 3;
  google.protobuf.Timestamp time_received = 4;
  string file_name = 5;
  string file_ext = 6;
  string uri = 7;
}

// DeleteTabularDataByFilterRequest deletes the data and metadata of tabular data when a filter is provided
message DeleteTabularDataByFilterRequest {
  Filter filter = 1;
}

// DeleteBinaryDataByFilterResponse returns the number of tabular datapoints deleted when a filter is provided
message DeleteTabularDataByFilterResponse {
  uint64 deleted_count = 1;
  Result result = 2;
}

// DeleteBinaryDataByFilterRequest deletes the data and metadata of binary data when a filter is provided
message DeleteBinaryDataByFilterRequest {
  Filter filter = 1;
}

// DeleteBinaryDataByFilterResponse returns the number of binary files deleted when a filter is provided
message DeleteBinaryDataByFilterResponse {
  uint64 deleted_count = 1;
  Result result = 2;
}

// DeleteBinaryDataByIDsRequest deletes the data and metadata of binary data when file ids are provided
message DeleteBinaryDataByIDsRequest {
  repeated string file_ids = 1;
}

// DeleteBinaryDataByIDsResponse returns the number of binary files deleted when file ids are provided
message DeleteBinaryDataByIDsResponse {
  uint64 deleted_count = 1;
  Result result = 2;
}

// AddTagsToBinaryDataByFileIDsRequest requests adding all specified tags to each of the files when file IDs are provided
message AddTagsToBinaryDataByFileIDsRequest {
  repeated string file_ids = 1;
  repeated string tags = 2;
}

message AddTagsToBinaryDataByFileIDsResponse {}

// AddTagsToBinaryDataByFilterRequest requests adding all specified tags to each of the files when a filter is provided
message AddTagsToBinaryDataByFilterRequest {
  Filter filter = 1;
  repeated string tags = 2;
}

message AddTagsToBinaryDataByFilterResponse {}

// RemoveTagsFromBinaryDataByFileIDsRequest requests removing the given tags value from each file when file IDs are provided
message RemoveTagsFromBinaryDataByFileIDsRequest {
  repeated string file_ids = 1;
  repeated string tags = 2;
}

// RemoveTagsFromBinaryDataByFileIDsResponse returns the number of binary files which had tags removed
message RemoveTagsFromBinaryDataByFileIDsResponse {
  uint64 deleted_count = 1;
}

// RemoveTagsFromBinaryDataByFilterRequest requests removing the given tags value from each file when a filter is provided
message RemoveTagsFromBinaryDataByFilterRequest {
  Filter filter = 1;
  repeated string tags = 2;
}

// RemoveTagsFromBinaryDataByFilterResponse returns the number of binary files which had tags removed
message RemoveTagsFromBinaryDataByFilterResponse {
  uint64 deleted_count = 1;
}

// TagsByFilterRequest requests the unique tags from data based on given filter
message TagsByFilterRequest {
  Filter filter = 1;
}

// TagsByFilterResponse returns the unique tags from data based on given filter
message TagsByFilterResponse {
  repeated string tags = 1;
}

enum ModelType {
  MODEL_TYPE_UNSPECIFIED = 0;
  MODEL_TYPE_SINGLE_LABEL_CLASSIFICATION = 1;
  MODEL_TYPE_MULTI_LABEL_CLASSIFICATION = 2;
}

message SubmitTrainingJobRequest {
  Filter filter = 1;
  string organization_id = 2;
  string model_name = 3;
  string model_version = 4;
  ModelType model_type = 5;
  repeated string tags = 6;
}

message SubmitTrainingJobResponse {
  string id = 1;
}

message GetTrainingJobRequest {
  string id = 1;
}

message GetTrainingJobResponse {
  string id = 1;
  TrainingJobMetadata metadata = 2;
}

enum TrainingStatus {
  TRAINING_STATUS_UNSPECIFIED = 0;
  TRAINING_STATUS_PENDING = 1;
  TRAINING_STATUS_IN_PROGRESS = 2;
  TRAINING_STATUS_COMPLETED = 3;
  TRAINING_STATUS_FAILED = 4;
  TRAINING_STATUS_SUBMITTING = 5;
}

message TrainingJobMetadata {
  SubmitTrainingJobRequest request = 1;
  TrainingStatus status = 2;
  google.protobuf.Timestamp created_on = 3;
  google.protobuf.Timestamp last_modified = 4;
  string synced_model_id = 5;
}

message TrainingJob {
  string id = 1 [(tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  TrainingJobMetadata metadata = 2 [(tagger.v1.tags) = "bson:\"metadata\" json:\"metadata\""];
  string output_path = 3 [(tagger.v1.tags) = "bson:\"output_path\" json:\"output_path\""];
  // The vertex_job_id is the id of the Vertex AI custom training job
  // backing our concept of a TrainingJob.
  string vertex_job_id = 4 [(tagger.v1.tags) = "bson:\"vertex_job_id\" json:\"vertex_job_id\""];
  google.protobuf.Struct model_metadata = 5 [(tagger.v1.tags) = "bson:\"model_metadata\" json:\"model_metadata\""];
}
