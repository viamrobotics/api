// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: app/v1/billing.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BillingService_GetCurrentMonthUsage_FullMethodName     = "/viam.app.v1.BillingService/GetCurrentMonthUsage"
	BillingService_GetOrgBillingInformation_FullMethodName = "/viam.app.v1.BillingService/GetOrgBillingInformation"
	BillingService_GetInvoicesSummary_FullMethodName       = "/viam.app.v1.BillingService/GetInvoicesSummary"
	BillingService_GetInvoicePdf_FullMethodName            = "/viam.app.v1.BillingService/GetInvoicePdf"
	BillingService_SendPaymentRequiredEmail_FullMethodName = "/viam.app.v1.BillingService/SendPaymentRequiredEmail"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetInvoicePdfResponse], error)
	// Send an email with a prompt to the user's org's billing page.
	SendPaymentRequiredEmail(ctx context.Context, in *SendPaymentRequiredEmailRequest, opts ...grpc.CallOption) (*SendPaymentRequiredEmailResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentMonthUsageResponse)
	err := c.cc.Invoke(ctx, BillingService_GetCurrentMonthUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgBillingInformationResponse)
	err := c.cc.Invoke(ctx, BillingService_GetOrgBillingInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoicesSummaryResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoicesSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetInvoicePdfResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BillingService_ServiceDesc.Streams[0], BillingService_GetInvoicePdf_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetInvoicePdfRequest, GetInvoicePdfResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BillingService_GetInvoicePdfClient = grpc.ServerStreamingClient[GetInvoicePdfResponse]

func (c *billingServiceClient) SendPaymentRequiredEmail(ctx context.Context, in *SendPaymentRequiredEmailRequest, opts ...grpc.CallOption) (*SendPaymentRequiredEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPaymentRequiredEmailResponse)
	err := c.cc.Invoke(ctx, BillingService_SendPaymentRequiredEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility.
type BillingServiceServer interface {
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(*GetInvoicePdfRequest, grpc.ServerStreamingServer[GetInvoicePdfResponse]) error
	// Send an email with a prompt to the user's org's billing page.
	SendPaymentRequiredEmail(context.Context, *SendPaymentRequiredEmailRequest) (*SendPaymentRequiredEmailResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingServiceServer struct{}

func (UnimplementedBillingServiceServer) GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMonthUsage not implemented")
}
func (UnimplementedBillingServiceServer) GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgBillingInformation not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicesSummary not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicePdf(*GetInvoicePdfRequest, grpc.ServerStreamingServer[GetInvoicePdfResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetInvoicePdf not implemented")
}
func (UnimplementedBillingServiceServer) SendPaymentRequiredEmail(context.Context, *SendPaymentRequiredEmailRequest) (*SendPaymentRequiredEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPaymentRequiredEmail not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}
func (UnimplementedBillingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetCurrentMonthUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMonthUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetCurrentMonthUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, req.(*GetCurrentMonthUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrgBillingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgBillingInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetOrgBillingInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, req.(*GetOrgBillingInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoicesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, req.(*GetInvoicesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicePdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInvoicePdfRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServiceServer).GetInvoicePdf(m, &grpc.GenericServerStream[GetInvoicePdfRequest, GetInvoicePdfResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BillingService_GetInvoicePdfServer = grpc.ServerStreamingServer[GetInvoicePdfResponse]

func _BillingService_SendPaymentRequiredEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequiredEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SendPaymentRequiredEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_SendPaymentRequiredEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SendPaymentRequiredEmail(ctx, req.(*SendPaymentRequiredEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentMonthUsage",
			Handler:    _BillingService_GetCurrentMonthUsage_Handler,
		},
		{
			MethodName: "GetOrgBillingInformation",
			Handler:    _BillingService_GetOrgBillingInformation_Handler,
		},
		{
			MethodName: "GetInvoicesSummary",
			Handler:    _BillingService_GetInvoicesSummary_Handler,
		},
		{
			MethodName: "SendPaymentRequiredEmail",
			Handler:    _BillingService_SendPaymentRequiredEmail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInvoicePdf",
			Handler:       _BillingService_GetInvoicePdf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/v1/billing.proto",
}
