// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/v1/end_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndUserServiceClient is the client API for EndUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndUserServiceClient interface {
	// Returns whether the specified user has accepted end user license agreements.
	// If false, the user should not be able to use the application.
	IsLegalAccepted(ctx context.Context, in *IsLegalAcceptedRequest, opts ...grpc.CallOption) (*IsLegalAcceptedResponse, error)
	// Marks that the specified user has accepted end user license agreements.
	AcceptLegal(ctx context.Context, in *AcceptLegalRequest, opts ...grpc.CallOption) (*AcceptLegalResponse, error)
}

type endUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndUserServiceClient(cc grpc.ClientConnInterface) EndUserServiceClient {
	return &endUserServiceClient{cc}
}

func (c *endUserServiceClient) IsLegalAccepted(ctx context.Context, in *IsLegalAcceptedRequest, opts ...grpc.CallOption) (*IsLegalAcceptedResponse, error) {
	out := new(IsLegalAcceptedResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.EndUserService/IsLegalAccepted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endUserServiceClient) AcceptLegal(ctx context.Context, in *AcceptLegalRequest, opts ...grpc.CallOption) (*AcceptLegalResponse, error) {
	out := new(AcceptLegalResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.EndUserService/AcceptLegal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndUserServiceServer is the server API for EndUserService service.
// All implementations must embed UnimplementedEndUserServiceServer
// for forward compatibility
type EndUserServiceServer interface {
	// Returns whether the specified user has accepted end user license agreements.
	// If false, the user should not be able to use the application.
	IsLegalAccepted(context.Context, *IsLegalAcceptedRequest) (*IsLegalAcceptedResponse, error)
	// Marks that the specified user has accepted end user license agreements.
	AcceptLegal(context.Context, *AcceptLegalRequest) (*AcceptLegalResponse, error)
	mustEmbedUnimplementedEndUserServiceServer()
}

// UnimplementedEndUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndUserServiceServer struct {
}

func (UnimplementedEndUserServiceServer) IsLegalAccepted(context.Context, *IsLegalAcceptedRequest) (*IsLegalAcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLegalAccepted not implemented")
}
func (UnimplementedEndUserServiceServer) AcceptLegal(context.Context, *AcceptLegalRequest) (*AcceptLegalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLegal not implemented")
}
func (UnimplementedEndUserServiceServer) mustEmbedUnimplementedEndUserServiceServer() {}

// UnsafeEndUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndUserServiceServer will
// result in compilation errors.
type UnsafeEndUserServiceServer interface {
	mustEmbedUnimplementedEndUserServiceServer()
}

func RegisterEndUserServiceServer(s grpc.ServiceRegistrar, srv EndUserServiceServer) {
	s.RegisterService(&EndUserService_ServiceDesc, srv)
}

func _EndUserService_IsLegalAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLegalAcceptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndUserServiceServer).IsLegalAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.EndUserService/IsLegalAccepted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndUserServiceServer).IsLegalAccepted(ctx, req.(*IsLegalAcceptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndUserService_AcceptLegal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLegalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndUserServiceServer).AcceptLegal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.EndUserService/AcceptLegal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndUserServiceServer).AcceptLegal(ctx, req.(*AcceptLegalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EndUserService_ServiceDesc is the grpc.ServiceDesc for EndUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.EndUserService",
	HandlerType: (*EndUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLegalAccepted",
			Handler:    _EndUserService_IsLegalAccepted_Handler,
		},
		{
			MethodName: "AcceptLegal",
			Handler:    _EndUserService_AcceptLegal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/v1/end_user.proto",
}
