// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// Get the id of the user with the email
	GetUserIDByEmail(ctx context.Context, in *GetUserIDByEmailRequest, opts ...grpc.CallOption) (*GetUserIDByEmailResponse, error)
	// Create a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// List organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Get all organizations that have access to a location.
	GetOrganizationsWithAccessToLocation(ctx context.Context, in *GetOrganizationsWithAccessToLocationRequest, opts ...grpc.CallOption) (*GetOrganizationsWithAccessToLocationResponse, error)
	// List the organizations a user belongs to
	ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error)
	// Get an organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Checks for namespace availablity throughout all orgs.
	GetOrganizationNamespaceAvailability(ctx context.Context, in *GetOrganizationNamespaceAvailabilityRequest, opts ...grpc.CallOption) (*GetOrganizationNamespaceAvailabilityResponse, error)
	// Update an organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// List all members of an organization and all invited members to the organization.
	ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error)
	// Create an organization invite to an organization
	CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error)
	// Update the authorizations attached to an organization invite
	UpdateOrganizationInviteAuthorizations(ctx context.Context, in *UpdateOrganizationInviteAuthorizationsRequest, opts ...grpc.CallOption) (*UpdateOrganizationInviteAuthorizationsResponse, error)
	// Delete an organization member from an organization
	DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*DeleteOrganizationMemberResponse, error)
	// Delete an organization invite
	DeleteOrganizationInvite(ctx context.Context, in *DeleteOrganizationInviteRequest, opts ...grpc.CallOption) (*DeleteOrganizationInviteResponse, error)
	// Resend an organization invite
	ResendOrganizationInvite(ctx context.Context, in *ResendOrganizationInviteRequest, opts ...grpc.CallOption) (*ResendOrganizationInviteResponse, error)
	// Create a location
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	// Get a location
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	// Update a location
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	// Delete a location
	DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error)
	// Get a list of locations
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
	// Share a location with an organization
	ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error)
	// Stop sharing a location with an organization
	UnshareLocation(ctx context.Context, in *UnshareLocationRequest, opts ...grpc.CallOption) (*UnshareLocationResponse, error)
	// Get a location's authorization secrets
	LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error)
	// Create a new generated Secret in the Location.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateLocationSecret(ctx context.Context, in *CreateLocationSecretRequest, opts ...grpc.CallOption) (*CreateLocationSecretResponse, error)
	// Delete a Secret from the Location.
	DeleteLocationSecret(ctx context.Context, in *DeleteLocationSecretRequest, opts ...grpc.CallOption) (*DeleteLocationSecretResponse, error)
	// Get a specific physicalDevice by ID
	GetphysicalDevice(ctx context.Context, in *GetphysicalDeviceRequest, opts ...grpc.CallOption) (*GetphysicalDeviceResponse, error)
	// Get Rover Rental Location physicalDevices
	GetRoverRentalphysicalDevices(ctx context.Context, in *GetRoverRentalphysicalDevicesRequest, opts ...grpc.CallOption) (*GetRoverRentalphysicalDevicesResponse, error)
	GetphysicalDeviceParts(ctx context.Context, in *GetphysicalDevicePartsRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartsResponse, error)
	// Get a specific physicalDevice part by ID
	GetphysicalDevicePart(ctx context.Context, in *GetphysicalDevicePartRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartResponse, error)
	GetphysicalDevicePartLogs(ctx context.Context, in *GetphysicalDevicePartLogsRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartLogsResponse, error)
	TailphysicalDevicePartLogs(ctx context.Context, in *TailphysicalDevicePartLogsRequest, opts ...grpc.CallOption) (AppService_TailphysicalDevicePartLogsClient, error)
	// Get a specific physicalDevice part histy by ID
	GetphysicalDevicePartHistory(ctx context.Context, in *GetphysicalDevicePartHistoryRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartHistoryResponse, error)
	// Update a physicalDevice
	UpdatephysicalDevicePart(ctx context.Context, in *UpdatephysicalDevicePartRequest, opts ...grpc.CallOption) (*UpdatephysicalDevicePartResponse, error)
	// Create a new physicalDevice part
	NewphysicalDevicePart(ctx context.Context, in *NewphysicalDevicePartRequest, opts ...grpc.CallOption) (*NewphysicalDevicePartResponse, error)
	// Delete a physicalDevice part
	DeletephysicalDevicePart(ctx context.Context, in *DeletephysicalDevicePartRequest, opts ...grpc.CallOption) (*DeletephysicalDevicePartResponse, error)
	// Gets the physicalDevice API Keys for the physicalDevice
	GetphysicalDeviceAPIKeys(ctx context.Context, in *GetphysicalDeviceAPIKeysRequest, opts ...grpc.CallOption) (*GetphysicalDeviceAPIKeysResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error)
	// Marks part for restart. Once the physicalDevice part checks-in with the app the flag
	// is reset on the physicalDevice part. Calling this multiple times before a physicalDevice part
	// checks-in has no affect.
	// Note: This API may be removed in the near future.
	// TODO(APP-388): Remove
	MarkPartForRestart(ctx context.Context, in *MarkPartForRestartRequest, opts ...grpc.CallOption) (*MarkPartForRestartResponse, error)
	// Create a new generated Secret in the physicalDevice Part.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreatephysicalDevicePartSecret(ctx context.Context, in *CreatephysicalDevicePartSecretRequest, opts ...grpc.CallOption) (*CreatephysicalDevicePartSecretResponse, error)
	// Delete a Secret from the physicalDevicePart.
	DeletephysicalDevicePartSecret(ctx context.Context, in *DeletephysicalDevicePartSecretRequest, opts ...grpc.CallOption) (*DeletephysicalDevicePartSecretResponse, error)
	// Get a list of physicalDevices
	ListphysicalDevices(ctx context.Context, in *ListphysicalDevicesRequest, opts ...grpc.CallOption) (*ListphysicalDevicesResponse, error)
	// NewphysicalDevice creates a new physicalDevice
	NewphysicalDevice(ctx context.Context, in *NewphysicalDeviceRequest, opts ...grpc.CallOption) (*NewphysicalDeviceResponse, error)
	// UpdatephysicalDevice updates a physicalDevice
	UpdatephysicalDevice(ctx context.Context, in *UpdatephysicalDeviceRequest, opts ...grpc.CallOption) (*UpdatephysicalDeviceResponse, error)
	// DeletephysicalDevice deletes a physicalDevice
	DeletephysicalDevice(ctx context.Context, in *DeletephysicalDeviceRequest, opts ...grpc.CallOption) (*DeletephysicalDeviceResponse, error)
	// Gets a list of fragments
	ListFragments(ctx context.Context, in *ListFragmentsRequest, opts ...grpc.CallOption) (*ListFragmentsResponse, error)
	// Gets a single fragment
	GetFragment(ctx context.Context, in *GetFragmentRequest, opts ...grpc.CallOption) (*GetFragmentResponse, error)
	// Creates a fragment
	CreateFragment(ctx context.Context, in *CreateFragmentRequest, opts ...grpc.CallOption) (*CreateFragmentResponse, error)
	// Updates a fragment
	UpdateFragment(ctx context.Context, in *UpdateFragmentRequest, opts ...grpc.CallOption) (*UpdateFragmentResponse, error)
	// Deletes a fragment
	DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error)
	// Creates an IdentityAuthorization
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	// Deletes an IdentityAuthorization
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error)
	// Changes an IdentityAuthorization to a new IdentityAuthorization
	ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error)
	// Returns all authorization roles for a given resource
	ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error)
	// Validates a permission for the current user
	CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error)
	GetRegistryItem(ctx context.Context, in *GetRegistryItemRequest, opts ...grpc.CallOption) (*GetRegistryItemResponse, error)
	CreateRegistryItem(ctx context.Context, in *CreateRegistryItemRequest, opts ...grpc.CallOption) (*CreateRegistryItemResponse, error)
	UpdateRegistryItem(ctx context.Context, in *UpdateRegistryItemRequest, opts ...grpc.CallOption) (*UpdateRegistryItemResponse, error)
	ListRegistryItems(ctx context.Context, in *ListRegistryItemsRequest, opts ...grpc.CallOption) (*ListRegistryItemsResponse, error)
	DeleteRegistryItem(ctx context.Context, in *DeleteRegistryItemRequest, opts ...grpc.CallOption) (*DeleteRegistryItemResponse, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error)
	UploadModuleFile(ctx context.Context, opts ...grpc.CallOption) (AppService_UploadModuleFileClient, error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	RenameKey(ctx context.Context, in *RenameKeyRequest, opts ...grpc.CallOption) (*RenameKeyResponse, error)
	RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error)
	CreateKeyFromExistingKeyAuthorizations(ctx context.Context, in *CreateKeyFromExistingKeyAuthorizationsRequest, opts ...grpc.CallOption) (*CreateKeyFromExistingKeyAuthorizationsResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetUserIDByEmail(ctx context.Context, in *GetUserIDByEmailRequest, opts ...grpc.CallOption) (*GetUserIDByEmailResponse, error) {
	out := new(GetUserIDByEmailResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetUserIDByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganizationsWithAccessToLocation(ctx context.Context, in *GetOrganizationsWithAccessToLocationRequest, opts ...grpc.CallOption) (*GetOrganizationsWithAccessToLocationResponse, error) {
	out := new(GetOrganizationsWithAccessToLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetOrganizationsWithAccessToLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error) {
	out := new(ListOrganizationsByUserResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListOrganizationsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganizationNamespaceAvailability(ctx context.Context, in *GetOrganizationNamespaceAvailabilityRequest, opts ...grpc.CallOption) (*GetOrganizationNamespaceAvailabilityResponse, error) {
	out := new(GetOrganizationNamespaceAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetOrganizationNamespaceAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error) {
	out := new(ListOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListOrganizationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error) {
	out := new(CreateOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateOrganizationInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateOrganizationInviteAuthorizations(ctx context.Context, in *UpdateOrganizationInviteAuthorizationsRequest, opts ...grpc.CallOption) (*UpdateOrganizationInviteAuthorizationsResponse, error) {
	out := new(UpdateOrganizationInviteAuthorizationsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateOrganizationInviteAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*DeleteOrganizationMemberResponse, error) {
	out := new(DeleteOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganizationInvite(ctx context.Context, in *DeleteOrganizationInviteRequest, opts ...grpc.CallOption) (*DeleteOrganizationInviteResponse, error) {
	out := new(DeleteOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteOrganizationInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ResendOrganizationInvite(ctx context.Context, in *ResendOrganizationInviteRequest, opts ...grpc.CallOption) (*ResendOrganizationInviteResponse, error) {
	out := new(ResendOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ResendOrganizationInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error) {
	out := new(DeleteLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error) {
	out := new(ShareLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ShareLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UnshareLocation(ctx context.Context, in *UnshareLocationRequest, opts ...grpc.CallOption) (*UnshareLocationResponse, error) {
	out := new(UnshareLocationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UnshareLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error) {
	out := new(LocationAuthResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/LocationAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateLocationSecret(ctx context.Context, in *CreateLocationSecretRequest, opts ...grpc.CallOption) (*CreateLocationSecretResponse, error) {
	out := new(CreateLocationSecretResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateLocationSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteLocationSecret(ctx context.Context, in *DeleteLocationSecretRequest, opts ...grpc.CallOption) (*DeleteLocationSecretResponse, error) {
	out := new(DeleteLocationSecretResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteLocationSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetphysicalDevice(ctx context.Context, in *GetphysicalDeviceRequest, opts ...grpc.CallOption) (*GetphysicalDeviceResponse, error) {
	out := new(GetphysicalDeviceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRoverRentalphysicalDevices(ctx context.Context, in *GetRoverRentalphysicalDevicesRequest, opts ...grpc.CallOption) (*GetRoverRentalphysicalDevicesResponse, error) {
	out := new(GetRoverRentalphysicalDevicesResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetRoverRentalphysicalDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetphysicalDeviceParts(ctx context.Context, in *GetphysicalDevicePartsRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartsResponse, error) {
	out := new(GetphysicalDevicePartsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDeviceParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetphysicalDevicePart(ctx context.Context, in *GetphysicalDevicePartRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartResponse, error) {
	out := new(GetphysicalDevicePartResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDevicePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetphysicalDevicePartLogs(ctx context.Context, in *GetphysicalDevicePartLogsRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartLogsResponse, error) {
	out := new(GetphysicalDevicePartLogsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDevicePartLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) TailphysicalDevicePartLogs(ctx context.Context, in *TailphysicalDevicePartLogsRequest, opts ...grpc.CallOption) (AppService_TailphysicalDevicePartLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[0], "/viam.app.v1.AppService/TailphysicalDevicePartLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceTailphysicalDevicePartLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppService_TailphysicalDevicePartLogsClient interface {
	Recv() (*TailphysicalDevicePartLogsResponse, error)
	grpc.ClientStream
}

type appServiceTailphysicalDevicePartLogsClient struct {
	grpc.ClientStream
}

func (x *appServiceTailphysicalDevicePartLogsClient) Recv() (*TailphysicalDevicePartLogsResponse, error) {
	m := new(TailphysicalDevicePartLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appServiceClient) GetphysicalDevicePartHistory(ctx context.Context, in *GetphysicalDevicePartHistoryRequest, opts ...grpc.CallOption) (*GetphysicalDevicePartHistoryResponse, error) {
	out := new(GetphysicalDevicePartHistoryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDevicePartHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdatephysicalDevicePart(ctx context.Context, in *UpdatephysicalDevicePartRequest, opts ...grpc.CallOption) (*UpdatephysicalDevicePartResponse, error) {
	out := new(UpdatephysicalDevicePartResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdatephysicalDevicePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) NewphysicalDevicePart(ctx context.Context, in *NewphysicalDevicePartRequest, opts ...grpc.CallOption) (*NewphysicalDevicePartResponse, error) {
	out := new(NewphysicalDevicePartResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/NewphysicalDevicePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeletephysicalDevicePart(ctx context.Context, in *DeletephysicalDevicePartRequest, opts ...grpc.CallOption) (*DeletephysicalDevicePartResponse, error) {
	out := new(DeletephysicalDevicePartResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeletephysicalDevicePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetphysicalDeviceAPIKeys(ctx context.Context, in *GetphysicalDeviceAPIKeysRequest, opts ...grpc.CallOption) (*GetphysicalDeviceAPIKeysResponse, error) {
	out := new(GetphysicalDeviceAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetphysicalDeviceAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error) {
	out := new(MarkPartAsMainResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/MarkPartAsMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) MarkPartForRestart(ctx context.Context, in *MarkPartForRestartRequest, opts ...grpc.CallOption) (*MarkPartForRestartResponse, error) {
	out := new(MarkPartForRestartResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/MarkPartForRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreatephysicalDevicePartSecret(ctx context.Context, in *CreatephysicalDevicePartSecretRequest, opts ...grpc.CallOption) (*CreatephysicalDevicePartSecretResponse, error) {
	out := new(CreatephysicalDevicePartSecretResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreatephysicalDevicePartSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeletephysicalDevicePartSecret(ctx context.Context, in *DeletephysicalDevicePartSecretRequest, opts ...grpc.CallOption) (*DeletephysicalDevicePartSecretResponse, error) {
	out := new(DeletephysicalDevicePartSecretResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeletephysicalDevicePartSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListphysicalDevices(ctx context.Context, in *ListphysicalDevicesRequest, opts ...grpc.CallOption) (*ListphysicalDevicesResponse, error) {
	out := new(ListphysicalDevicesResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListphysicalDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) NewphysicalDevice(ctx context.Context, in *NewphysicalDeviceRequest, opts ...grpc.CallOption) (*NewphysicalDeviceResponse, error) {
	out := new(NewphysicalDeviceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/NewphysicalDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdatephysicalDevice(ctx context.Context, in *UpdatephysicalDeviceRequest, opts ...grpc.CallOption) (*UpdatephysicalDeviceResponse, error) {
	out := new(UpdatephysicalDeviceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdatephysicalDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeletephysicalDevice(ctx context.Context, in *DeletephysicalDeviceRequest, opts ...grpc.CallOption) (*DeletephysicalDeviceResponse, error) {
	out := new(DeletephysicalDeviceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeletephysicalDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListFragments(ctx context.Context, in *ListFragmentsRequest, opts ...grpc.CallOption) (*ListFragmentsResponse, error) {
	out := new(ListFragmentsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListFragments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetFragment(ctx context.Context, in *GetFragmentRequest, opts ...grpc.CallOption) (*GetFragmentResponse, error) {
	out := new(GetFragmentResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetFragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateFragment(ctx context.Context, in *CreateFragmentRequest, opts ...grpc.CallOption) (*CreateFragmentResponse, error) {
	out := new(CreateFragmentResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateFragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateFragment(ctx context.Context, in *UpdateFragmentRequest, opts ...grpc.CallOption) (*UpdateFragmentResponse, error) {
	out := new(UpdateFragmentResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateFragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error) {
	out := new(DeleteFragmentResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteFragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error) {
	out := new(RemoveRoleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error) {
	out := new(ChangeRoleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ChangeRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error) {
	out := new(ListAuthorizationsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error) {
	out := new(CheckPermissionsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRegistryItem(ctx context.Context, in *GetRegistryItemRequest, opts ...grpc.CallOption) (*GetRegistryItemResponse, error) {
	out := new(GetRegistryItemResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetRegistryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateRegistryItem(ctx context.Context, in *CreateRegistryItemRequest, opts ...grpc.CallOption) (*CreateRegistryItemResponse, error) {
	out := new(CreateRegistryItemResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateRegistryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateRegistryItem(ctx context.Context, in *UpdateRegistryItemRequest, opts ...grpc.CallOption) (*UpdateRegistryItemResponse, error) {
	out := new(UpdateRegistryItemResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateRegistryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListRegistryItems(ctx context.Context, in *ListRegistryItemsRequest, opts ...grpc.CallOption) (*ListRegistryItemsResponse, error) {
	out := new(ListRegistryItemsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListRegistryItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteRegistryItem(ctx context.Context, in *DeleteRegistryItemRequest, opts ...grpc.CallOption) (*DeleteRegistryItemResponse, error) {
	out := new(DeleteRegistryItemResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteRegistryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error) {
	out := new(UpdateModuleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/UpdateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UploadModuleFile(ctx context.Context, opts ...grpc.CallOption) (AppService_UploadModuleFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[1], "/viam.app.v1.AppService/UploadModuleFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceUploadModuleFileClient{stream}
	return x, nil
}

type AppService_UploadModuleFileClient interface {
	Send(*UploadModuleFileRequest) error
	CloseAndRecv() (*UploadModuleFileResponse, error)
	grpc.ClientStream
}

type appServiceUploadModuleFileClient struct {
	grpc.ClientStream
}

func (x *appServiceUploadModuleFileClient) Send(m *UploadModuleFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appServiceUploadModuleFileClient) CloseAndRecv() (*UploadModuleFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadModuleFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appServiceClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error) {
	out := new(GetModuleResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RenameKey(ctx context.Context, in *RenameKeyRequest, opts ...grpc.CallOption) (*RenameKeyResponse, error) {
	out := new(RenameKeyResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/RenameKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error) {
	out := new(RotateKeyResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/RotateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateKeyFromExistingKeyAuthorizations(ctx context.Context, in *CreateKeyFromExistingKeyAuthorizationsRequest, opts ...grpc.CallOption) (*CreateKeyFromExistingKeyAuthorizationsResponse, error) {
	out := new(CreateKeyFromExistingKeyAuthorizationsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.AppService/CreateKeyFromExistingKeyAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	// Get the id of the user with the email
	GetUserIDByEmail(context.Context, *GetUserIDByEmailRequest) (*GetUserIDByEmailResponse, error)
	// Create a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// List organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// Get all organizations that have access to a location.
	GetOrganizationsWithAccessToLocation(context.Context, *GetOrganizationsWithAccessToLocationRequest) (*GetOrganizationsWithAccessToLocationResponse, error)
	// List the organizations a user belongs to
	ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error)
	// Get an organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// Checks for namespace availablity throughout all orgs.
	GetOrganizationNamespaceAvailability(context.Context, *GetOrganizationNamespaceAvailabilityRequest) (*GetOrganizationNamespaceAvailabilityResponse, error)
	// Update an organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// List all members of an organization and all invited members to the organization.
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error)
	// Create an organization invite to an organization
	CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error)
	// Update the authorizations attached to an organization invite
	UpdateOrganizationInviteAuthorizations(context.Context, *UpdateOrganizationInviteAuthorizationsRequest) (*UpdateOrganizationInviteAuthorizationsResponse, error)
	// Delete an organization member from an organization
	DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*DeleteOrganizationMemberResponse, error)
	// Delete an organization invite
	DeleteOrganizationInvite(context.Context, *DeleteOrganizationInviteRequest) (*DeleteOrganizationInviteResponse, error)
	// Resend an organization invite
	ResendOrganizationInvite(context.Context, *ResendOrganizationInviteRequest) (*ResendOrganizationInviteResponse, error)
	// Create a location
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	// Get a location
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	// Update a location
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	// Delete a location
	DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error)
	// Get a list of locations
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
	// Share a location with an organization
	ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error)
	// Stop sharing a location with an organization
	UnshareLocation(context.Context, *UnshareLocationRequest) (*UnshareLocationResponse, error)
	// Get a location's authorization secrets
	LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error)
	// Create a new generated Secret in the Location.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateLocationSecret(context.Context, *CreateLocationSecretRequest) (*CreateLocationSecretResponse, error)
	// Delete a Secret from the Location.
	DeleteLocationSecret(context.Context, *DeleteLocationSecretRequest) (*DeleteLocationSecretResponse, error)
	// Get a specific physicalDevice by ID
	GetphysicalDevice(context.Context, *GetphysicalDeviceRequest) (*GetphysicalDeviceResponse, error)
	// Get Rover Rental Location physicalDevices
	GetRoverRentalphysicalDevices(context.Context, *GetRoverRentalphysicalDevicesRequest) (*GetRoverRentalphysicalDevicesResponse, error)
	GetphysicalDeviceParts(context.Context, *GetphysicalDevicePartsRequest) (*GetphysicalDevicePartsResponse, error)
	// Get a specific physicalDevice part by ID
	GetphysicalDevicePart(context.Context, *GetphysicalDevicePartRequest) (*GetphysicalDevicePartResponse, error)
	GetphysicalDevicePartLogs(context.Context, *GetphysicalDevicePartLogsRequest) (*GetphysicalDevicePartLogsResponse, error)
	TailphysicalDevicePartLogs(*TailphysicalDevicePartLogsRequest, AppService_TailphysicalDevicePartLogsServer) error
	// Get a specific physicalDevice part histy by ID
	GetphysicalDevicePartHistory(context.Context, *GetphysicalDevicePartHistoryRequest) (*GetphysicalDevicePartHistoryResponse, error)
	// Update a physicalDevice
	UpdatephysicalDevicePart(context.Context, *UpdatephysicalDevicePartRequest) (*UpdatephysicalDevicePartResponse, error)
	// Create a new physicalDevice part
	NewphysicalDevicePart(context.Context, *NewphysicalDevicePartRequest) (*NewphysicalDevicePartResponse, error)
	// Delete a physicalDevice part
	DeletephysicalDevicePart(context.Context, *DeletephysicalDevicePartRequest) (*DeletephysicalDevicePartResponse, error)
	// Gets the physicalDevice API Keys for the physicalDevice
	GetphysicalDeviceAPIKeys(context.Context, *GetphysicalDeviceAPIKeysRequest) (*GetphysicalDeviceAPIKeysResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error)
	// Marks part for restart. Once the physicalDevice part checks-in with the app the flag
	// is reset on the physicalDevice part. Calling this multiple times before a physicalDevice part
	// checks-in has no affect.
	// Note: This API may be removed in the near future.
	// TODO(APP-388): Remove
	MarkPartForRestart(context.Context, *MarkPartForRestartRequest) (*MarkPartForRestartResponse, error)
	// Create a new generated Secret in the physicalDevice Part.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreatephysicalDevicePartSecret(context.Context, *CreatephysicalDevicePartSecretRequest) (*CreatephysicalDevicePartSecretResponse, error)
	// Delete a Secret from the physicalDevicePart.
	DeletephysicalDevicePartSecret(context.Context, *DeletephysicalDevicePartSecretRequest) (*DeletephysicalDevicePartSecretResponse, error)
	// Get a list of physicalDevices
	ListphysicalDevices(context.Context, *ListphysicalDevicesRequest) (*ListphysicalDevicesResponse, error)
	// NewphysicalDevice creates a new physicalDevice
	NewphysicalDevice(context.Context, *NewphysicalDeviceRequest) (*NewphysicalDeviceResponse, error)
	// UpdatephysicalDevice updates a physicalDevice
	UpdatephysicalDevice(context.Context, *UpdatephysicalDeviceRequest) (*UpdatephysicalDeviceResponse, error)
	// DeletephysicalDevice deletes a physicalDevice
	DeletephysicalDevice(context.Context, *DeletephysicalDeviceRequest) (*DeletephysicalDeviceResponse, error)
	// Gets a list of fragments
	ListFragments(context.Context, *ListFragmentsRequest) (*ListFragmentsResponse, error)
	// Gets a single fragment
	GetFragment(context.Context, *GetFragmentRequest) (*GetFragmentResponse, error)
	// Creates a fragment
	CreateFragment(context.Context, *CreateFragmentRequest) (*CreateFragmentResponse, error)
	// Updates a fragment
	UpdateFragment(context.Context, *UpdateFragmentRequest) (*UpdateFragmentResponse, error)
	// Deletes a fragment
	DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error)
	// Creates an IdentityAuthorization
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	// Deletes an IdentityAuthorization
	RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error)
	// Changes an IdentityAuthorization to a new IdentityAuthorization
	ChangeRole(context.Context, *ChangeRoleRequest) (*ChangeRoleResponse, error)
	// Returns all authorization roles for a given resource
	ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error)
	// Validates a permission for the current user
	CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error)
	GetRegistryItem(context.Context, *GetRegistryItemRequest) (*GetRegistryItemResponse, error)
	CreateRegistryItem(context.Context, *CreateRegistryItemRequest) (*CreateRegistryItemResponse, error)
	UpdateRegistryItem(context.Context, *UpdateRegistryItemRequest) (*UpdateRegistryItemResponse, error)
	ListRegistryItems(context.Context, *ListRegistryItemsRequest) (*ListRegistryItemsResponse, error)
	DeleteRegistryItem(context.Context, *DeleteRegistryItemRequest) (*DeleteRegistryItemResponse, error)
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error)
	UploadModuleFile(AppService_UploadModuleFileServer) error
	GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	RenameKey(context.Context, *RenameKeyRequest) (*RenameKeyResponse, error)
	RotateKey(context.Context, *RotateKeyRequest) (*RotateKeyResponse, error)
	CreateKeyFromExistingKeyAuthorizations(context.Context, *CreateKeyFromExistingKeyAuthorizationsRequest) (*CreateKeyFromExistingKeyAuthorizationsResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) GetUserIDByEmail(context.Context, *GetUserIDByEmailRequest) (*GetUserIDByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByEmail not implemented")
}
func (UnimplementedAppServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedAppServiceServer) GetOrganizationsWithAccessToLocation(context.Context, *GetOrganizationsWithAccessToLocationRequest) (*GetOrganizationsWithAccessToLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsWithAccessToLocation not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsByUser not implemented")
}
func (UnimplementedAppServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedAppServiceServer) GetOrganizationNamespaceAvailability(context.Context, *GetOrganizationNamespaceAvailabilityRequest) (*GetOrganizationNamespaceAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationNamespaceAvailability not implemented")
}
func (UnimplementedAppServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (UnimplementedAppServiceServer) CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) UpdateOrganizationInviteAuthorizations(context.Context, *UpdateOrganizationInviteAuthorizationsRequest) (*UpdateOrganizationInviteAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationInviteAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*DeleteOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMember not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganizationInvite(context.Context, *DeleteOrganizationInviteRequest) (*DeleteOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) ResendOrganizationInvite(context.Context, *ResendOrganizationInviteRequest) (*ResendOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedAppServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedAppServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedAppServiceServer) DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedAppServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedAppServiceServer) ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareLocation not implemented")
}
func (UnimplementedAppServiceServer) UnshareLocation(context.Context, *UnshareLocationRequest) (*UnshareLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareLocation not implemented")
}
func (UnimplementedAppServiceServer) LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationAuth not implemented")
}
func (UnimplementedAppServiceServer) CreateLocationSecret(context.Context, *CreateLocationSecretRequest) (*CreateLocationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationSecret not implemented")
}
func (UnimplementedAppServiceServer) DeleteLocationSecret(context.Context, *DeleteLocationSecretRequest) (*DeleteLocationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocationSecret not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDevice(context.Context, *GetphysicalDeviceRequest) (*GetphysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDevice not implemented")
}
func (UnimplementedAppServiceServer) GetRoverRentalphysicalDevices(context.Context, *GetRoverRentalphysicalDevicesRequest) (*GetRoverRentalphysicalDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoverRentalphysicalDevices not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDeviceParts(context.Context, *GetphysicalDevicePartsRequest) (*GetphysicalDevicePartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDeviceParts not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDevicePart(context.Context, *GetphysicalDevicePartRequest) (*GetphysicalDevicePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDevicePart not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDevicePartLogs(context.Context, *GetphysicalDevicePartLogsRequest) (*GetphysicalDevicePartLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDevicePartLogs not implemented")
}
func (UnimplementedAppServiceServer) TailphysicalDevicePartLogs(*TailphysicalDevicePartLogsRequest, AppService_TailphysicalDevicePartLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TailphysicalDevicePartLogs not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDevicePartHistory(context.Context, *GetphysicalDevicePartHistoryRequest) (*GetphysicalDevicePartHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDevicePartHistory not implemented")
}
func (UnimplementedAppServiceServer) UpdatephysicalDevicePart(context.Context, *UpdatephysicalDevicePartRequest) (*UpdatephysicalDevicePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatephysicalDevicePart not implemented")
}
func (UnimplementedAppServiceServer) NewphysicalDevicePart(context.Context, *NewphysicalDevicePartRequest) (*NewphysicalDevicePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewphysicalDevicePart not implemented")
}
func (UnimplementedAppServiceServer) DeletephysicalDevicePart(context.Context, *DeletephysicalDevicePartRequest) (*DeletephysicalDevicePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletephysicalDevicePart not implemented")
}
func (UnimplementedAppServiceServer) GetphysicalDeviceAPIKeys(context.Context, *GetphysicalDeviceAPIKeysRequest) (*GetphysicalDeviceAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetphysicalDeviceAPIKeys not implemented")
}
func (UnimplementedAppServiceServer) MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartAsMain not implemented")
}
func (UnimplementedAppServiceServer) MarkPartForRestart(context.Context, *MarkPartForRestartRequest) (*MarkPartForRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartForRestart not implemented")
}
func (UnimplementedAppServiceServer) CreatephysicalDevicePartSecret(context.Context, *CreatephysicalDevicePartSecretRequest) (*CreatephysicalDevicePartSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatephysicalDevicePartSecret not implemented")
}
func (UnimplementedAppServiceServer) DeletephysicalDevicePartSecret(context.Context, *DeletephysicalDevicePartSecretRequest) (*DeletephysicalDevicePartSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletephysicalDevicePartSecret not implemented")
}
func (UnimplementedAppServiceServer) ListphysicalDevices(context.Context, *ListphysicalDevicesRequest) (*ListphysicalDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListphysicalDevices not implemented")
}
func (UnimplementedAppServiceServer) NewphysicalDevice(context.Context, *NewphysicalDeviceRequest) (*NewphysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewphysicalDevice not implemented")
}
func (UnimplementedAppServiceServer) UpdatephysicalDevice(context.Context, *UpdatephysicalDeviceRequest) (*UpdatephysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatephysicalDevice not implemented")
}
func (UnimplementedAppServiceServer) DeletephysicalDevice(context.Context, *DeletephysicalDeviceRequest) (*DeletephysicalDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletephysicalDevice not implemented")
}
func (UnimplementedAppServiceServer) ListFragments(context.Context, *ListFragmentsRequest) (*ListFragmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFragments not implemented")
}
func (UnimplementedAppServiceServer) GetFragment(context.Context, *GetFragmentRequest) (*GetFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFragment not implemented")
}
func (UnimplementedAppServiceServer) CreateFragment(context.Context, *CreateFragmentRequest) (*CreateFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFragment not implemented")
}
func (UnimplementedAppServiceServer) UpdateFragment(context.Context, *UpdateFragmentRequest) (*UpdateFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFragment not implemented")
}
func (UnimplementedAppServiceServer) DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragment not implemented")
}
func (UnimplementedAppServiceServer) AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAppServiceServer) RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedAppServiceServer) ChangeRole(context.Context, *ChangeRoleRequest) (*ChangeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRole not implemented")
}
func (UnimplementedAppServiceServer) ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (UnimplementedAppServiceServer) GetRegistryItem(context.Context, *GetRegistryItemRequest) (*GetRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) CreateRegistryItem(context.Context, *CreateRegistryItemRequest) (*CreateRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) UpdateRegistryItem(context.Context, *UpdateRegistryItemRequest) (*UpdateRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) ListRegistryItems(context.Context, *ListRegistryItemsRequest) (*ListRegistryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryItems not implemented")
}
func (UnimplementedAppServiceServer) DeleteRegistryItem(context.Context, *DeleteRegistryItemRequest) (*DeleteRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedAppServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedAppServiceServer) UploadModuleFile(AppService_UploadModuleFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadModuleFile not implemented")
}
func (UnimplementedAppServiceServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedAppServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedAppServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedAppServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedAppServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedAppServiceServer) RenameKey(context.Context, *RenameKeyRequest) (*RenameKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameKey not implemented")
}
func (UnimplementedAppServiceServer) RotateKey(context.Context, *RotateKeyRequest) (*RotateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKey not implemented")
}
func (UnimplementedAppServiceServer) CreateKeyFromExistingKeyAuthorizations(context.Context, *CreateKeyFromExistingKeyAuthorizationsRequest) (*CreateKeyFromExistingKeyAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyFromExistingKeyAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GetUserIDByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetUserIDByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetUserIDByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetUserIDByEmail(ctx, req.(*GetUserIDByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganizationsWithAccessToLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsWithAccessToLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganizationsWithAccessToLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetOrganizationsWithAccessToLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganizationsWithAccessToLocation(ctx, req.(*GetOrganizationsWithAccessToLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListOrganizationsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizationsByUser(ctx, req.(*ListOrganizationsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganizationNamespaceAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationNamespaceAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganizationNamespaceAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetOrganizationNamespaceAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganizationNamespaceAvailability(ctx, req.(*GetOrganizationNamespaceAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListOrganizationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizationMembers(ctx, req.(*ListOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateOrganizationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateOrganizationInvite(ctx, req.(*CreateOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateOrganizationInviteAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationInviteAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateOrganizationInviteAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateOrganizationInviteAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateOrganizationInviteAuthorizations(ctx, req.(*UpdateOrganizationInviteAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganizationMember(ctx, req.(*DeleteOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteOrganizationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganizationInvite(ctx, req.(*DeleteOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ResendOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ResendOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ResendOrganizationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ResendOrganizationInvite(ctx, req.(*ResendOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteLocation(ctx, req.(*DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ShareLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ShareLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ShareLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ShareLocation(ctx, req.(*ShareLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UnshareLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UnshareLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UnshareLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UnshareLocation(ctx, req.(*UnshareLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_LocationAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).LocationAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/LocationAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).LocationAuth(ctx, req.(*LocationAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateLocationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateLocationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateLocationSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateLocationSecret(ctx, req.(*CreateLocationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteLocationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteLocationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteLocationSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteLocationSecret(ctx, req.(*DeleteLocationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetphysicalDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDevice(ctx, req.(*GetphysicalDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRoverRentalphysicalDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoverRentalphysicalDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRoverRentalphysicalDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetRoverRentalphysicalDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRoverRentalphysicalDevices(ctx, req.(*GetRoverRentalphysicalDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetphysicalDeviceParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDevicePartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDeviceParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDeviceParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDeviceParts(ctx, req.(*GetphysicalDevicePartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetphysicalDevicePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDevicePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDevicePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDevicePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDevicePart(ctx, req.(*GetphysicalDevicePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetphysicalDevicePartLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDevicePartLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDevicePartLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDevicePartLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDevicePartLogs(ctx, req.(*GetphysicalDevicePartLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_TailphysicalDevicePartLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailphysicalDevicePartLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppServiceServer).TailphysicalDevicePartLogs(m, &appServiceTailphysicalDevicePartLogsServer{stream})
}

type AppService_TailphysicalDevicePartLogsServer interface {
	Send(*TailphysicalDevicePartLogsResponse) error
	grpc.ServerStream
}

type appServiceTailphysicalDevicePartLogsServer struct {
	grpc.ServerStream
}

func (x *appServiceTailphysicalDevicePartLogsServer) Send(m *TailphysicalDevicePartLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AppService_GetphysicalDevicePartHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDevicePartHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDevicePartHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDevicePartHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDevicePartHistory(ctx, req.(*GetphysicalDevicePartHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdatephysicalDevicePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatephysicalDevicePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdatephysicalDevicePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdatephysicalDevicePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdatephysicalDevicePart(ctx, req.(*UpdatephysicalDevicePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_NewphysicalDevicePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewphysicalDevicePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).NewphysicalDevicePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/NewphysicalDevicePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).NewphysicalDevicePart(ctx, req.(*NewphysicalDevicePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeletephysicalDevicePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletephysicalDevicePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeletephysicalDevicePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeletephysicalDevicePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeletephysicalDevicePart(ctx, req.(*DeletephysicalDevicePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetphysicalDeviceAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetphysicalDeviceAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetphysicalDeviceAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetphysicalDeviceAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetphysicalDeviceAPIKeys(ctx, req.(*GetphysicalDeviceAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_MarkPartAsMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPartAsMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).MarkPartAsMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/MarkPartAsMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).MarkPartAsMain(ctx, req.(*MarkPartAsMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_MarkPartForRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPartForRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).MarkPartForRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/MarkPartForRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).MarkPartForRestart(ctx, req.(*MarkPartForRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreatephysicalDevicePartSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatephysicalDevicePartSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreatephysicalDevicePartSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreatephysicalDevicePartSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreatephysicalDevicePartSecret(ctx, req.(*CreatephysicalDevicePartSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeletephysicalDevicePartSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletephysicalDevicePartSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeletephysicalDevicePartSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeletephysicalDevicePartSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeletephysicalDevicePartSecret(ctx, req.(*DeletephysicalDevicePartSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListphysicalDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListphysicalDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListphysicalDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListphysicalDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListphysicalDevices(ctx, req.(*ListphysicalDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_NewphysicalDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewphysicalDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).NewphysicalDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/NewphysicalDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).NewphysicalDevice(ctx, req.(*NewphysicalDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdatephysicalDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatephysicalDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdatephysicalDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdatephysicalDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdatephysicalDevice(ctx, req.(*UpdatephysicalDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeletephysicalDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletephysicalDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeletephysicalDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeletephysicalDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeletephysicalDevice(ctx, req.(*DeletephysicalDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListFragments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFragmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListFragments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListFragments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListFragments(ctx, req.(*ListFragmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetFragment(ctx, req.(*GetFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateFragment(ctx, req.(*CreateFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateFragment(ctx, req.(*UpdateFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteFragment(ctx, req.(*DeleteFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RemoveRole(ctx, req.(*RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ChangeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ChangeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ChangeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ChangeRole(ctx, req.(*ChangeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListAuthorizations(ctx, req.(*ListAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CheckPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CheckPermissions(ctx, req.(*CheckPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetRegistryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRegistryItem(ctx, req.(*GetRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateRegistryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateRegistryItem(ctx, req.(*CreateRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateRegistryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateRegistryItem(ctx, req.(*UpdateRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListRegistryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListRegistryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListRegistryItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListRegistryItems(ctx, req.(*ListRegistryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteRegistryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteRegistryItem(ctx, req.(*DeleteRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/UpdateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UploadModuleFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServiceServer).UploadModuleFile(&appServiceUploadModuleFileServer{stream})
}

type AppService_UploadModuleFileServer interface {
	SendAndClose(*UploadModuleFileResponse) error
	Recv() (*UploadModuleFileRequest, error)
	grpc.ServerStream
}

type appServiceUploadModuleFileServer struct {
	grpc.ServerStream
}

func (x *appServiceUploadModuleFileServer) SendAndClose(m *UploadModuleFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appServiceUploadModuleFileServer) Recv() (*UploadModuleFileRequest, error) {
	m := new(UploadModuleFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AppService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RenameKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RenameKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/RenameKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RenameKey(ctx, req.(*RenameKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/RotateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RotateKey(ctx, req.(*RotateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateKeyFromExistingKeyAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyFromExistingKeyAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateKeyFromExistingKeyAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.AppService/CreateKeyFromExistingKeyAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateKeyFromExistingKeyAuthorizations(ctx, req.(*CreateKeyFromExistingKeyAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserIDByEmail",
			Handler:    _AppService_GetUserIDByEmail_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _AppService_CreateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _AppService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationsWithAccessToLocation",
			Handler:    _AppService_GetOrganizationsWithAccessToLocation_Handler,
		},
		{
			MethodName: "ListOrganizationsByUser",
			Handler:    _AppService_ListOrganizationsByUser_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _AppService_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationNamespaceAvailability",
			Handler:    _AppService_GetOrganizationNamespaceAvailability_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _AppService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _AppService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _AppService_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "CreateOrganizationInvite",
			Handler:    _AppService_CreateOrganizationInvite_Handler,
		},
		{
			MethodName: "UpdateOrganizationInviteAuthorizations",
			Handler:    _AppService_UpdateOrganizationInviteAuthorizations_Handler,
		},
		{
			MethodName: "DeleteOrganizationMember",
			Handler:    _AppService_DeleteOrganizationMember_Handler,
		},
		{
			MethodName: "DeleteOrganizationInvite",
			Handler:    _AppService_DeleteOrganizationInvite_Handler,
		},
		{
			MethodName: "ResendOrganizationInvite",
			Handler:    _AppService_ResendOrganizationInvite_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _AppService_CreateLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _AppService_GetLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _AppService_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _AppService_DeleteLocation_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _AppService_ListLocations_Handler,
		},
		{
			MethodName: "ShareLocation",
			Handler:    _AppService_ShareLocation_Handler,
		},
		{
			MethodName: "UnshareLocation",
			Handler:    _AppService_UnshareLocation_Handler,
		},
		{
			MethodName: "LocationAuth",
			Handler:    _AppService_LocationAuth_Handler,
		},
		{
			MethodName: "CreateLocationSecret",
			Handler:    _AppService_CreateLocationSecret_Handler,
		},
		{
			MethodName: "DeleteLocationSecret",
			Handler:    _AppService_DeleteLocationSecret_Handler,
		},
		{
			MethodName: "GetphysicalDevice",
			Handler:    _AppService_GetphysicalDevice_Handler,
		},
		{
			MethodName: "GetRoverRentalphysicalDevices",
			Handler:    _AppService_GetRoverRentalphysicalDevices_Handler,
		},
		{
			MethodName: "GetphysicalDeviceParts",
			Handler:    _AppService_GetphysicalDeviceParts_Handler,
		},
		{
			MethodName: "GetphysicalDevicePart",
			Handler:    _AppService_GetphysicalDevicePart_Handler,
		},
		{
			MethodName: "GetphysicalDevicePartLogs",
			Handler:    _AppService_GetphysicalDevicePartLogs_Handler,
		},
		{
			MethodName: "GetphysicalDevicePartHistory",
			Handler:    _AppService_GetphysicalDevicePartHistory_Handler,
		},
		{
			MethodName: "UpdatephysicalDevicePart",
			Handler:    _AppService_UpdatephysicalDevicePart_Handler,
		},
		{
			MethodName: "NewphysicalDevicePart",
			Handler:    _AppService_NewphysicalDevicePart_Handler,
		},
		{
			MethodName: "DeletephysicalDevicePart",
			Handler:    _AppService_DeletephysicalDevicePart_Handler,
		},
		{
			MethodName: "GetphysicalDeviceAPIKeys",
			Handler:    _AppService_GetphysicalDeviceAPIKeys_Handler,
		},
		{
			MethodName: "MarkPartAsMain",
			Handler:    _AppService_MarkPartAsMain_Handler,
		},
		{
			MethodName: "MarkPartForRestart",
			Handler:    _AppService_MarkPartForRestart_Handler,
		},
		{
			MethodName: "CreatephysicalDevicePartSecret",
			Handler:    _AppService_CreatephysicalDevicePartSecret_Handler,
		},
		{
			MethodName: "DeletephysicalDevicePartSecret",
			Handler:    _AppService_DeletephysicalDevicePartSecret_Handler,
		},
		{
			MethodName: "ListphysicalDevices",
			Handler:    _AppService_ListphysicalDevices_Handler,
		},
		{
			MethodName: "NewphysicalDevice",
			Handler:    _AppService_NewphysicalDevice_Handler,
		},
		{
			MethodName: "UpdatephysicalDevice",
			Handler:    _AppService_UpdatephysicalDevice_Handler,
		},
		{
			MethodName: "DeletephysicalDevice",
			Handler:    _AppService_DeletephysicalDevice_Handler,
		},
		{
			MethodName: "ListFragments",
			Handler:    _AppService_ListFragments_Handler,
		},
		{
			MethodName: "GetFragment",
			Handler:    _AppService_GetFragment_Handler,
		},
		{
			MethodName: "CreateFragment",
			Handler:    _AppService_CreateFragment_Handler,
		},
		{
			MethodName: "UpdateFragment",
			Handler:    _AppService_UpdateFragment_Handler,
		},
		{
			MethodName: "DeleteFragment",
			Handler:    _AppService_DeleteFragment_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _AppService_AddRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _AppService_RemoveRole_Handler,
		},
		{
			MethodName: "ChangeRole",
			Handler:    _AppService_ChangeRole_Handler,
		},
		{
			MethodName: "ListAuthorizations",
			Handler:    _AppService_ListAuthorizations_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _AppService_CheckPermissions_Handler,
		},
		{
			MethodName: "GetRegistryItem",
			Handler:    _AppService_GetRegistryItem_Handler,
		},
		{
			MethodName: "CreateRegistryItem",
			Handler:    _AppService_CreateRegistryItem_Handler,
		},
		{
			MethodName: "UpdateRegistryItem",
			Handler:    _AppService_UpdateRegistryItem_Handler,
		},
		{
			MethodName: "ListRegistryItems",
			Handler:    _AppService_ListRegistryItems_Handler,
		},
		{
			MethodName: "DeleteRegistryItem",
			Handler:    _AppService_DeleteRegistryItem_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _AppService_CreateModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _AppService_UpdateModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _AppService_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _AppService_ListModules_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _AppService_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _AppService_DeleteKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _AppService_ListKeys_Handler,
		},
		{
			MethodName: "RenameKey",
			Handler:    _AppService_RenameKey_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _AppService_RotateKey_Handler,
		},
		{
			MethodName: "CreateKeyFromExistingKeyAuthorizations",
			Handler:    _AppService_CreateKeyFromExistingKeyAuthorizations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailphysicalDevicePartLogs",
			Handler:       _AppService_TailphysicalDevicePartLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadModuleFile",
			Handler:       _AppService_UploadModuleFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "app/v1/app.proto",
}
