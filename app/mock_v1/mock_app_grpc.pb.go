// Code generated by MockGen. DO NOT EDIT.
// Source: app/v1/app_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "go.viam.com/api/app/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockAppServiceClient is a mock of AppServiceClient interface.
type MockAppServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceClientMockRecorder
}

// MockAppServiceClientMockRecorder is the mock recorder for MockAppServiceClient.
type MockAppServiceClientMockRecorder struct {
	mock *MockAppServiceClient
}

// NewMockAppServiceClient creates a new mock instance.
func NewMockAppServiceClient(ctrl *gomock.Controller) *MockAppServiceClient {
	mock := &MockAppServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServiceClient) EXPECT() *MockAppServiceClientMockRecorder {
	return m.recorder
}

// CreateFragment mocks base method.
func (m *MockAppServiceClient) CreateFragment(ctx context.Context, in *v1.CreateFragmentRequest, opts ...grpc.CallOption) (*v1.CreateFragmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFragment", varargs...)
	ret0, _ := ret[0].(*v1.CreateFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFragment indicates an expected call of CreateFragment.
func (mr *MockAppServiceClientMockRecorder) CreateFragment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFragment", reflect.TypeOf((*MockAppServiceClient)(nil).CreateFragment), varargs...)
}

// CreateLocation mocks base method.
func (m *MockAppServiceClient) CreateLocation(ctx context.Context, in *v1.CreateLocationRequest, opts ...grpc.CallOption) (*v1.CreateLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLocation", varargs...)
	ret0, _ := ret[0].(*v1.CreateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockAppServiceClientMockRecorder) CreateLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockAppServiceClient)(nil).CreateLocation), varargs...)
}

// CreateLocationSecret mocks base method.
func (m *MockAppServiceClient) CreateLocationSecret(ctx context.Context, in *v1.CreateLocationSecretRequest, opts ...grpc.CallOption) (*v1.CreateLocationSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLocationSecret", varargs...)
	ret0, _ := ret[0].(*v1.CreateLocationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocationSecret indicates an expected call of CreateLocationSecret.
func (mr *MockAppServiceClientMockRecorder) CreateLocationSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocationSecret", reflect.TypeOf((*MockAppServiceClient)(nil).CreateLocationSecret), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockAppServiceClient) CreateOrganization(ctx context.Context, in *v1.CreateOrganizationRequest, opts ...grpc.CallOption) (*v1.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*v1.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockAppServiceClientMockRecorder) CreateOrganization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockAppServiceClient)(nil).CreateOrganization), varargs...)
}

// CreateOrganizationInvite mocks base method.
func (m *MockAppServiceClient) CreateOrganizationInvite(ctx context.Context, in *v1.CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*v1.CreateOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationInvite", varargs...)
	ret0, _ := ret[0].(*v1.CreateOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationInvite indicates an expected call of CreateOrganizationInvite.
func (mr *MockAppServiceClientMockRecorder) CreateOrganizationInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationInvite", reflect.TypeOf((*MockAppServiceClient)(nil).CreateOrganizationInvite), varargs...)
}

// CreateRobotPartSecret mocks base method.
func (m *MockAppServiceClient) CreateRobotPartSecret(ctx context.Context, in *v1.CreateRobotPartSecretRequest, opts ...grpc.CallOption) (*v1.CreateRobotPartSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotPartSecret", varargs...)
	ret0, _ := ret[0].(*v1.CreateRobotPartSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotPartSecret indicates an expected call of CreateRobotPartSecret.
func (mr *MockAppServiceClientMockRecorder) CreateRobotPartSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotPartSecret", reflect.TypeOf((*MockAppServiceClient)(nil).CreateRobotPartSecret), varargs...)
}

// DeleteFragment mocks base method.
func (m *MockAppServiceClient) DeleteFragment(ctx context.Context, in *v1.DeleteFragmentRequest, opts ...grpc.CallOption) (*v1.DeleteFragmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFragment", varargs...)
	ret0, _ := ret[0].(*v1.DeleteFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFragment indicates an expected call of DeleteFragment.
func (mr *MockAppServiceClientMockRecorder) DeleteFragment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFragment", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteFragment), varargs...)
}

// DeleteLocation mocks base method.
func (m *MockAppServiceClient) DeleteLocation(ctx context.Context, in *v1.DeleteLocationRequest, opts ...grpc.CallOption) (*v1.DeleteLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocation", varargs...)
	ret0, _ := ret[0].(*v1.DeleteLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockAppServiceClientMockRecorder) DeleteLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteLocation), varargs...)
}

// DeleteLocationSecret mocks base method.
func (m *MockAppServiceClient) DeleteLocationSecret(ctx context.Context, in *v1.DeleteLocationSecretRequest, opts ...grpc.CallOption) (*v1.DeleteLocationSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocationSecret", varargs...)
	ret0, _ := ret[0].(*v1.DeleteLocationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocationSecret indicates an expected call of DeleteLocationSecret.
func (mr *MockAppServiceClientMockRecorder) DeleteLocationSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocationSecret", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteLocationSecret), varargs...)
}

// DeleteOrganization mocks base method.
func (m *MockAppServiceClient) DeleteOrganization(ctx context.Context, in *v1.DeleteOrganizationRequest, opts ...grpc.CallOption) (*v1.DeleteOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganization", varargs...)
	ret0, _ := ret[0].(*v1.DeleteOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockAppServiceClientMockRecorder) DeleteOrganization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteOrganization), varargs...)
}

// DeleteOrganizationInvite mocks base method.
func (m *MockAppServiceClient) DeleteOrganizationInvite(ctx context.Context, in *v1.DeleteOrganizationInviteRequest, opts ...grpc.CallOption) (*v1.DeleteOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganizationInvite", varargs...)
	ret0, _ := ret[0].(*v1.DeleteOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationInvite indicates an expected call of DeleteOrganizationInvite.
func (mr *MockAppServiceClientMockRecorder) DeleteOrganizationInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationInvite", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteOrganizationInvite), varargs...)
}

// DeleteOrganizationMember mocks base method.
func (m *MockAppServiceClient) DeleteOrganizationMember(ctx context.Context, in *v1.DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*v1.DeleteOrganizationMemberResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganizationMember", varargs...)
	ret0, _ := ret[0].(*v1.DeleteOrganizationMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationMember indicates an expected call of DeleteOrganizationMember.
func (mr *MockAppServiceClientMockRecorder) DeleteOrganizationMember(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationMember", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteOrganizationMember), varargs...)
}

// DeleteRobot mocks base method.
func (m *MockAppServiceClient) DeleteRobot(ctx context.Context, in *v1.DeleteRobotRequest, opts ...grpc.CallOption) (*v1.DeleteRobotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobot", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobot indicates an expected call of DeleteRobot.
func (mr *MockAppServiceClientMockRecorder) DeleteRobot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobot", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteRobot), varargs...)
}

// DeleteRobotPart mocks base method.
func (m *MockAppServiceClient) DeleteRobotPart(ctx context.Context, in *v1.DeleteRobotPartRequest, opts ...grpc.CallOption) (*v1.DeleteRobotPartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotPart", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotPart indicates an expected call of DeleteRobotPart.
func (mr *MockAppServiceClientMockRecorder) DeleteRobotPart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotPart", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteRobotPart), varargs...)
}

// DeleteRobotPartSecret mocks base method.
func (m *MockAppServiceClient) DeleteRobotPartSecret(ctx context.Context, in *v1.DeleteRobotPartSecretRequest, opts ...grpc.CallOption) (*v1.DeleteRobotPartSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotPartSecret", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRobotPartSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotPartSecret indicates an expected call of DeleteRobotPartSecret.
func (mr *MockAppServiceClientMockRecorder) DeleteRobotPartSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotPartSecret", reflect.TypeOf((*MockAppServiceClient)(nil).DeleteRobotPartSecret), varargs...)
}

// GetFragment mocks base method.
func (m *MockAppServiceClient) GetFragment(ctx context.Context, in *v1.GetFragmentRequest, opts ...grpc.CallOption) (*v1.GetFragmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFragment", varargs...)
	ret0, _ := ret[0].(*v1.GetFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFragment indicates an expected call of GetFragment.
func (mr *MockAppServiceClientMockRecorder) GetFragment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFragment", reflect.TypeOf((*MockAppServiceClient)(nil).GetFragment), varargs...)
}

// GetLocation mocks base method.
func (m *MockAppServiceClient) GetLocation(ctx context.Context, in *v1.GetLocationRequest, opts ...grpc.CallOption) (*v1.GetLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocation", varargs...)
	ret0, _ := ret[0].(*v1.GetLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockAppServiceClientMockRecorder) GetLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockAppServiceClient)(nil).GetLocation), varargs...)
}

// GetOrganization mocks base method.
func (m *MockAppServiceClient) GetOrganization(ctx context.Context, in *v1.GetOrganizationRequest, opts ...grpc.CallOption) (*v1.GetOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganization", varargs...)
	ret0, _ := ret[0].(*v1.GetOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockAppServiceClientMockRecorder) GetOrganization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockAppServiceClient)(nil).GetOrganization), varargs...)
}

// GetRobot mocks base method.
func (m *MockAppServiceClient) GetRobot(ctx context.Context, in *v1.GetRobotRequest, opts ...grpc.CallOption) (*v1.GetRobotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRobot", varargs...)
	ret0, _ := ret[0].(*v1.GetRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockAppServiceClientMockRecorder) GetRobot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockAppServiceClient)(nil).GetRobot), varargs...)
}

// GetRobotPart mocks base method.
func (m *MockAppServiceClient) GetRobotPart(ctx context.Context, in *v1.GetRobotPartRequest, opts ...grpc.CallOption) (*v1.GetRobotPartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRobotPart", varargs...)
	ret0, _ := ret[0].(*v1.GetRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPart indicates an expected call of GetRobotPart.
func (mr *MockAppServiceClientMockRecorder) GetRobotPart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPart", reflect.TypeOf((*MockAppServiceClient)(nil).GetRobotPart), varargs...)
}

// GetRobotPartHistory mocks base method.
func (m *MockAppServiceClient) GetRobotPartHistory(ctx context.Context, in *v1.GetRobotPartHistoryRequest, opts ...grpc.CallOption) (*v1.GetRobotPartHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRobotPartHistory", varargs...)
	ret0, _ := ret[0].(*v1.GetRobotPartHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPartHistory indicates an expected call of GetRobotPartHistory.
func (mr *MockAppServiceClientMockRecorder) GetRobotPartHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPartHistory", reflect.TypeOf((*MockAppServiceClient)(nil).GetRobotPartHistory), varargs...)
}

// GetRobotPartLogs mocks base method.
func (m *MockAppServiceClient) GetRobotPartLogs(ctx context.Context, in *v1.GetRobotPartLogsRequest, opts ...grpc.CallOption) (*v1.GetRobotPartLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRobotPartLogs", varargs...)
	ret0, _ := ret[0].(*v1.GetRobotPartLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPartLogs indicates an expected call of GetRobotPartLogs.
func (mr *MockAppServiceClientMockRecorder) GetRobotPartLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPartLogs", reflect.TypeOf((*MockAppServiceClient)(nil).GetRobotPartLogs), varargs...)
}

// GetRobotParts mocks base method.
func (m *MockAppServiceClient) GetRobotParts(ctx context.Context, in *v1.GetRobotPartsRequest, opts ...grpc.CallOption) (*v1.GetRobotPartsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRobotParts", varargs...)
	ret0, _ := ret[0].(*v1.GetRobotPartsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotParts indicates an expected call of GetRobotParts.
func (mr *MockAppServiceClientMockRecorder) GetRobotParts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotParts", reflect.TypeOf((*MockAppServiceClient)(nil).GetRobotParts), varargs...)
}

// ListFragments mocks base method.
func (m *MockAppServiceClient) ListFragments(ctx context.Context, in *v1.ListFragmentsRequest, opts ...grpc.CallOption) (*v1.ListFragmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFragments", varargs...)
	ret0, _ := ret[0].(*v1.ListFragmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFragments indicates an expected call of ListFragments.
func (mr *MockAppServiceClientMockRecorder) ListFragments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFragments", reflect.TypeOf((*MockAppServiceClient)(nil).ListFragments), varargs...)
}

// ListLocations mocks base method.
func (m *MockAppServiceClient) ListLocations(ctx context.Context, in *v1.ListLocationsRequest, opts ...grpc.CallOption) (*v1.ListLocationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLocations", varargs...)
	ret0, _ := ret[0].(*v1.ListLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockAppServiceClientMockRecorder) ListLocations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockAppServiceClient)(nil).ListLocations), varargs...)
}

// ListOrganizationMembers mocks base method.
func (m *MockAppServiceClient) ListOrganizationMembers(ctx context.Context, in *v1.ListOrganizationMembersRequest, opts ...grpc.CallOption) (*v1.ListOrganizationMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationMembers", varargs...)
	ret0, _ := ret[0].(*v1.ListOrganizationMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationMembers indicates an expected call of ListOrganizationMembers.
func (mr *MockAppServiceClientMockRecorder) ListOrganizationMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationMembers", reflect.TypeOf((*MockAppServiceClient)(nil).ListOrganizationMembers), varargs...)
}

// ListOrganizations mocks base method.
func (m *MockAppServiceClient) ListOrganizations(ctx context.Context, in *v1.ListOrganizationsRequest, opts ...grpc.CallOption) (*v1.ListOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizations", varargs...)
	ret0, _ := ret[0].(*v1.ListOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockAppServiceClientMockRecorder) ListOrganizations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockAppServiceClient)(nil).ListOrganizations), varargs...)
}

// ListRobots mocks base method.
func (m *MockAppServiceClient) ListRobots(ctx context.Context, in *v1.ListRobotsRequest, opts ...grpc.CallOption) (*v1.ListRobotsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobots", varargs...)
	ret0, _ := ret[0].(*v1.ListRobotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobots indicates an expected call of ListRobots.
func (mr *MockAppServiceClientMockRecorder) ListRobots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobots", reflect.TypeOf((*MockAppServiceClient)(nil).ListRobots), varargs...)
}

// LocationAuth mocks base method.
func (m *MockAppServiceClient) LocationAuth(ctx context.Context, in *v1.LocationAuthRequest, opts ...grpc.CallOption) (*v1.LocationAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocationAuth", varargs...)
	ret0, _ := ret[0].(*v1.LocationAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationAuth indicates an expected call of LocationAuth.
func (mr *MockAppServiceClientMockRecorder) LocationAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationAuth", reflect.TypeOf((*MockAppServiceClient)(nil).LocationAuth), varargs...)
}

// MarkPartAsMain mocks base method.
func (m *MockAppServiceClient) MarkPartAsMain(ctx context.Context, in *v1.MarkPartAsMainRequest, opts ...grpc.CallOption) (*v1.MarkPartAsMainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkPartAsMain", varargs...)
	ret0, _ := ret[0].(*v1.MarkPartAsMainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkPartAsMain indicates an expected call of MarkPartAsMain.
func (mr *MockAppServiceClientMockRecorder) MarkPartAsMain(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPartAsMain", reflect.TypeOf((*MockAppServiceClient)(nil).MarkPartAsMain), varargs...)
}

// MarkPartForRestart mocks base method.
func (m *MockAppServiceClient) MarkPartForRestart(ctx context.Context, in *v1.MarkPartForRestartRequest, opts ...grpc.CallOption) (*v1.MarkPartForRestartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkPartForRestart", varargs...)
	ret0, _ := ret[0].(*v1.MarkPartForRestartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkPartForRestart indicates an expected call of MarkPartForRestart.
func (mr *MockAppServiceClientMockRecorder) MarkPartForRestart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPartForRestart", reflect.TypeOf((*MockAppServiceClient)(nil).MarkPartForRestart), varargs...)
}

// NewRobot mocks base method.
func (m *MockAppServiceClient) NewRobot(ctx context.Context, in *v1.NewRobotRequest, opts ...grpc.CallOption) (*v1.NewRobotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRobot", varargs...)
	ret0, _ := ret[0].(*v1.NewRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRobot indicates an expected call of NewRobot.
func (mr *MockAppServiceClientMockRecorder) NewRobot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRobot", reflect.TypeOf((*MockAppServiceClient)(nil).NewRobot), varargs...)
}

// NewRobotPart mocks base method.
func (m *MockAppServiceClient) NewRobotPart(ctx context.Context, in *v1.NewRobotPartRequest, opts ...grpc.CallOption) (*v1.NewRobotPartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRobotPart", varargs...)
	ret0, _ := ret[0].(*v1.NewRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRobotPart indicates an expected call of NewRobotPart.
func (mr *MockAppServiceClientMockRecorder) NewRobotPart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRobotPart", reflect.TypeOf((*MockAppServiceClient)(nil).NewRobotPart), varargs...)
}

// ResendOrganizationInvite mocks base method.
func (m *MockAppServiceClient) ResendOrganizationInvite(ctx context.Context, in *v1.ResendOrganizationInviteRequest, opts ...grpc.CallOption) (*v1.ResendOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendOrganizationInvite", varargs...)
	ret0, _ := ret[0].(*v1.ResendOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendOrganizationInvite indicates an expected call of ResendOrganizationInvite.
func (mr *MockAppServiceClientMockRecorder) ResendOrganizationInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOrganizationInvite", reflect.TypeOf((*MockAppServiceClient)(nil).ResendOrganizationInvite), varargs...)
}

// ShareLocation mocks base method.
func (m *MockAppServiceClient) ShareLocation(ctx context.Context, in *v1.ShareLocationRequest, opts ...grpc.CallOption) (*v1.ShareLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareLocation", varargs...)
	ret0, _ := ret[0].(*v1.ShareLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareLocation indicates an expected call of ShareLocation.
func (mr *MockAppServiceClientMockRecorder) ShareLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareLocation", reflect.TypeOf((*MockAppServiceClient)(nil).ShareLocation), varargs...)
}

// TailRobotPartLogs mocks base method.
func (m *MockAppServiceClient) TailRobotPartLogs(ctx context.Context, in *v1.TailRobotPartLogsRequest, opts ...grpc.CallOption) (v1.AppService_TailRobotPartLogsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TailRobotPartLogs", varargs...)
	ret0, _ := ret[0].(v1.AppService_TailRobotPartLogsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TailRobotPartLogs indicates an expected call of TailRobotPartLogs.
func (mr *MockAppServiceClientMockRecorder) TailRobotPartLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TailRobotPartLogs", reflect.TypeOf((*MockAppServiceClient)(nil).TailRobotPartLogs), varargs...)
}

// UnshareLocation mocks base method.
func (m *MockAppServiceClient) UnshareLocation(ctx context.Context, in *v1.UnshareLocationRequest, opts ...grpc.CallOption) (*v1.UnshareLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnshareLocation", varargs...)
	ret0, _ := ret[0].(*v1.UnshareLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareLocation indicates an expected call of UnshareLocation.
func (mr *MockAppServiceClientMockRecorder) UnshareLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareLocation", reflect.TypeOf((*MockAppServiceClient)(nil).UnshareLocation), varargs...)
}

// UpdateFragment mocks base method.
func (m *MockAppServiceClient) UpdateFragment(ctx context.Context, in *v1.UpdateFragmentRequest, opts ...grpc.CallOption) (*v1.UpdateFragmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFragment", varargs...)
	ret0, _ := ret[0].(*v1.UpdateFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFragment indicates an expected call of UpdateFragment.
func (mr *MockAppServiceClientMockRecorder) UpdateFragment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFragment", reflect.TypeOf((*MockAppServiceClient)(nil).UpdateFragment), varargs...)
}

// UpdateLocation mocks base method.
func (m *MockAppServiceClient) UpdateLocation(ctx context.Context, in *v1.UpdateLocationRequest, opts ...grpc.CallOption) (*v1.UpdateLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLocation", varargs...)
	ret0, _ := ret[0].(*v1.UpdateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockAppServiceClientMockRecorder) UpdateLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockAppServiceClient)(nil).UpdateLocation), varargs...)
}

// UpdateOrganization mocks base method.
func (m *MockAppServiceClient) UpdateOrganization(ctx context.Context, in *v1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*v1.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganization", varargs...)
	ret0, _ := ret[0].(*v1.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockAppServiceClientMockRecorder) UpdateOrganization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockAppServiceClient)(nil).UpdateOrganization), varargs...)
}

// UpdateRobot mocks base method.
func (m *MockAppServiceClient) UpdateRobot(ctx context.Context, in *v1.UpdateRobotRequest, opts ...grpc.CallOption) (*v1.UpdateRobotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRobot", varargs...)
	ret0, _ := ret[0].(*v1.UpdateRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobot indicates an expected call of UpdateRobot.
func (mr *MockAppServiceClientMockRecorder) UpdateRobot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobot", reflect.TypeOf((*MockAppServiceClient)(nil).UpdateRobot), varargs...)
}

// UpdateRobotPart mocks base method.
func (m *MockAppServiceClient) UpdateRobotPart(ctx context.Context, in *v1.UpdateRobotPartRequest, opts ...grpc.CallOption) (*v1.UpdateRobotPartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRobotPart", varargs...)
	ret0, _ := ret[0].(*v1.UpdateRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotPart indicates an expected call of UpdateRobotPart.
func (mr *MockAppServiceClientMockRecorder) UpdateRobotPart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotPart", reflect.TypeOf((*MockAppServiceClient)(nil).UpdateRobotPart), varargs...)
}

// MockAppService_TailRobotPartLogsClient is a mock of AppService_TailRobotPartLogsClient interface.
type MockAppService_TailRobotPartLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppService_TailRobotPartLogsClientMockRecorder
}

// MockAppService_TailRobotPartLogsClientMockRecorder is the mock recorder for MockAppService_TailRobotPartLogsClient.
type MockAppService_TailRobotPartLogsClientMockRecorder struct {
	mock *MockAppService_TailRobotPartLogsClient
}

// NewMockAppService_TailRobotPartLogsClient creates a new mock instance.
func NewMockAppService_TailRobotPartLogsClient(ctrl *gomock.Controller) *MockAppService_TailRobotPartLogsClient {
	mock := &MockAppService_TailRobotPartLogsClient{ctrl: ctrl}
	mock.recorder = &MockAppService_TailRobotPartLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppService_TailRobotPartLogsClient) EXPECT() *MockAppService_TailRobotPartLogsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAppService_TailRobotPartLogsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAppService_TailRobotPartLogsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAppService_TailRobotPartLogsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAppService_TailRobotPartLogsClient) Recv() (*v1.TailRobotPartLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.TailRobotPartLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAppService_TailRobotPartLogsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockAppService_TailRobotPartLogsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAppService_TailRobotPartLogsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAppService_TailRobotPartLogsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAppService_TailRobotPartLogsClient)(nil).Trailer))
}

// MockAppServiceServer is a mock of AppServiceServer interface.
type MockAppServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceServerMockRecorder
}

// MockAppServiceServerMockRecorder is the mock recorder for MockAppServiceServer.
type MockAppServiceServerMockRecorder struct {
	mock *MockAppServiceServer
}

// NewMockAppServiceServer creates a new mock instance.
func NewMockAppServiceServer(ctrl *gomock.Controller) *MockAppServiceServer {
	mock := &MockAppServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServiceServer) EXPECT() *MockAppServiceServerMockRecorder {
	return m.recorder
}

// CreateFragment mocks base method.
func (m *MockAppServiceServer) CreateFragment(arg0 context.Context, arg1 *v1.CreateFragmentRequest) (*v1.CreateFragmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFragment", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFragment indicates an expected call of CreateFragment.
func (mr *MockAppServiceServerMockRecorder) CreateFragment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFragment", reflect.TypeOf((*MockAppServiceServer)(nil).CreateFragment), arg0, arg1)
}

// CreateLocation mocks base method.
func (m *MockAppServiceServer) CreateLocation(arg0 context.Context, arg1 *v1.CreateLocationRequest) (*v1.CreateLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockAppServiceServerMockRecorder) CreateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockAppServiceServer)(nil).CreateLocation), arg0, arg1)
}

// CreateLocationSecret mocks base method.
func (m *MockAppServiceServer) CreateLocationSecret(arg0 context.Context, arg1 *v1.CreateLocationSecretRequest) (*v1.CreateLocationSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocationSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateLocationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocationSecret indicates an expected call of CreateLocationSecret.
func (mr *MockAppServiceServerMockRecorder) CreateLocationSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocationSecret", reflect.TypeOf((*MockAppServiceServer)(nil).CreateLocationSecret), arg0, arg1)
}

// CreateOrganization mocks base method.
func (m *MockAppServiceServer) CreateOrganization(arg0 context.Context, arg1 *v1.CreateOrganizationRequest) (*v1.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockAppServiceServerMockRecorder) CreateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockAppServiceServer)(nil).CreateOrganization), arg0, arg1)
}

// CreateOrganizationInvite mocks base method.
func (m *MockAppServiceServer) CreateOrganizationInvite(arg0 context.Context, arg1 *v1.CreateOrganizationInviteRequest) (*v1.CreateOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationInvite indicates an expected call of CreateOrganizationInvite.
func (mr *MockAppServiceServerMockRecorder) CreateOrganizationInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationInvite", reflect.TypeOf((*MockAppServiceServer)(nil).CreateOrganizationInvite), arg0, arg1)
}

// CreateRobotPartSecret mocks base method.
func (m *MockAppServiceServer) CreateRobotPartSecret(arg0 context.Context, arg1 *v1.CreateRobotPartSecretRequest) (*v1.CreateRobotPartSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotPartSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateRobotPartSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotPartSecret indicates an expected call of CreateRobotPartSecret.
func (mr *MockAppServiceServerMockRecorder) CreateRobotPartSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotPartSecret", reflect.TypeOf((*MockAppServiceServer)(nil).CreateRobotPartSecret), arg0, arg1)
}

// DeleteFragment mocks base method.
func (m *MockAppServiceServer) DeleteFragment(arg0 context.Context, arg1 *v1.DeleteFragmentRequest) (*v1.DeleteFragmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFragment", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFragment indicates an expected call of DeleteFragment.
func (mr *MockAppServiceServerMockRecorder) DeleteFragment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFragment", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteFragment), arg0, arg1)
}

// DeleteLocation mocks base method.
func (m *MockAppServiceServer) DeleteLocation(arg0 context.Context, arg1 *v1.DeleteLocationRequest) (*v1.DeleteLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockAppServiceServerMockRecorder) DeleteLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteLocation), arg0, arg1)
}

// DeleteLocationSecret mocks base method.
func (m *MockAppServiceServer) DeleteLocationSecret(arg0 context.Context, arg1 *v1.DeleteLocationSecretRequest) (*v1.DeleteLocationSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocationSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteLocationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocationSecret indicates an expected call of DeleteLocationSecret.
func (mr *MockAppServiceServerMockRecorder) DeleteLocationSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocationSecret", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteLocationSecret), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockAppServiceServer) DeleteOrganization(arg0 context.Context, arg1 *v1.DeleteOrganizationRequest) (*v1.DeleteOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockAppServiceServerMockRecorder) DeleteOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteOrganization), arg0, arg1)
}

// DeleteOrganizationInvite mocks base method.
func (m *MockAppServiceServer) DeleteOrganizationInvite(arg0 context.Context, arg1 *v1.DeleteOrganizationInviteRequest) (*v1.DeleteOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationInvite indicates an expected call of DeleteOrganizationInvite.
func (mr *MockAppServiceServerMockRecorder) DeleteOrganizationInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationInvite", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteOrganizationInvite), arg0, arg1)
}

// DeleteOrganizationMember mocks base method.
func (m *MockAppServiceServer) DeleteOrganizationMember(arg0 context.Context, arg1 *v1.DeleteOrganizationMemberRequest) (*v1.DeleteOrganizationMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationMember", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteOrganizationMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationMember indicates an expected call of DeleteOrganizationMember.
func (mr *MockAppServiceServerMockRecorder) DeleteOrganizationMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationMember", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteOrganizationMember), arg0, arg1)
}

// DeleteRobot mocks base method.
func (m *MockAppServiceServer) DeleteRobot(arg0 context.Context, arg1 *v1.DeleteRobotRequest) (*v1.DeleteRobotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobot", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobot indicates an expected call of DeleteRobot.
func (mr *MockAppServiceServerMockRecorder) DeleteRobot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobot", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteRobot), arg0, arg1)
}

// DeleteRobotPart mocks base method.
func (m *MockAppServiceServer) DeleteRobotPart(arg0 context.Context, arg1 *v1.DeleteRobotPartRequest) (*v1.DeleteRobotPartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotPart", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotPart indicates an expected call of DeleteRobotPart.
func (mr *MockAppServiceServerMockRecorder) DeleteRobotPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotPart", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteRobotPart), arg0, arg1)
}

// DeleteRobotPartSecret mocks base method.
func (m *MockAppServiceServer) DeleteRobotPartSecret(arg0 context.Context, arg1 *v1.DeleteRobotPartSecretRequest) (*v1.DeleteRobotPartSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotPartSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRobotPartSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotPartSecret indicates an expected call of DeleteRobotPartSecret.
func (mr *MockAppServiceServerMockRecorder) DeleteRobotPartSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotPartSecret", reflect.TypeOf((*MockAppServiceServer)(nil).DeleteRobotPartSecret), arg0, arg1)
}

// GetFragment mocks base method.
func (m *MockAppServiceServer) GetFragment(arg0 context.Context, arg1 *v1.GetFragmentRequest) (*v1.GetFragmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFragment", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFragment indicates an expected call of GetFragment.
func (mr *MockAppServiceServerMockRecorder) GetFragment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFragment", reflect.TypeOf((*MockAppServiceServer)(nil).GetFragment), arg0, arg1)
}

// GetLocation mocks base method.
func (m *MockAppServiceServer) GetLocation(arg0 context.Context, arg1 *v1.GetLocationRequest) (*v1.GetLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockAppServiceServerMockRecorder) GetLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockAppServiceServer)(nil).GetLocation), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockAppServiceServer) GetOrganization(arg0 context.Context, arg1 *v1.GetOrganizationRequest) (*v1.GetOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockAppServiceServerMockRecorder) GetOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockAppServiceServer)(nil).GetOrganization), arg0, arg1)
}

// GetRobot mocks base method.
func (m *MockAppServiceServer) GetRobot(arg0 context.Context, arg1 *v1.GetRobotRequest) (*v1.GetRobotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobot", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockAppServiceServerMockRecorder) GetRobot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockAppServiceServer)(nil).GetRobot), arg0, arg1)
}

// GetRobotPart mocks base method.
func (m *MockAppServiceServer) GetRobotPart(arg0 context.Context, arg1 *v1.GetRobotPartRequest) (*v1.GetRobotPartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotPart", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPart indicates an expected call of GetRobotPart.
func (mr *MockAppServiceServerMockRecorder) GetRobotPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPart", reflect.TypeOf((*MockAppServiceServer)(nil).GetRobotPart), arg0, arg1)
}

// GetRobotPartHistory mocks base method.
func (m *MockAppServiceServer) GetRobotPartHistory(arg0 context.Context, arg1 *v1.GetRobotPartHistoryRequest) (*v1.GetRobotPartHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotPartHistory", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRobotPartHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPartHistory indicates an expected call of GetRobotPartHistory.
func (mr *MockAppServiceServerMockRecorder) GetRobotPartHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPartHistory", reflect.TypeOf((*MockAppServiceServer)(nil).GetRobotPartHistory), arg0, arg1)
}

// GetRobotPartLogs mocks base method.
func (m *MockAppServiceServer) GetRobotPartLogs(arg0 context.Context, arg1 *v1.GetRobotPartLogsRequest) (*v1.GetRobotPartLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotPartLogs", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRobotPartLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotPartLogs indicates an expected call of GetRobotPartLogs.
func (mr *MockAppServiceServerMockRecorder) GetRobotPartLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotPartLogs", reflect.TypeOf((*MockAppServiceServer)(nil).GetRobotPartLogs), arg0, arg1)
}

// GetRobotParts mocks base method.
func (m *MockAppServiceServer) GetRobotParts(arg0 context.Context, arg1 *v1.GetRobotPartsRequest) (*v1.GetRobotPartsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotParts", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRobotPartsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotParts indicates an expected call of GetRobotParts.
func (mr *MockAppServiceServerMockRecorder) GetRobotParts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotParts", reflect.TypeOf((*MockAppServiceServer)(nil).GetRobotParts), arg0, arg1)
}

// ListFragments mocks base method.
func (m *MockAppServiceServer) ListFragments(arg0 context.Context, arg1 *v1.ListFragmentsRequest) (*v1.ListFragmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFragments", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListFragmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFragments indicates an expected call of ListFragments.
func (mr *MockAppServiceServerMockRecorder) ListFragments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFragments", reflect.TypeOf((*MockAppServiceServer)(nil).ListFragments), arg0, arg1)
}

// ListLocations mocks base method.
func (m *MockAppServiceServer) ListLocations(arg0 context.Context, arg1 *v1.ListLocationsRequest) (*v1.ListLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockAppServiceServerMockRecorder) ListLocations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockAppServiceServer)(nil).ListLocations), arg0, arg1)
}

// ListOrganizationMembers mocks base method.
func (m *MockAppServiceServer) ListOrganizationMembers(arg0 context.Context, arg1 *v1.ListOrganizationMembersRequest) (*v1.ListOrganizationMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationMembers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListOrganizationMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationMembers indicates an expected call of ListOrganizationMembers.
func (mr *MockAppServiceServerMockRecorder) ListOrganizationMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationMembers", reflect.TypeOf((*MockAppServiceServer)(nil).ListOrganizationMembers), arg0, arg1)
}

// ListOrganizations mocks base method.
func (m *MockAppServiceServer) ListOrganizations(arg0 context.Context, arg1 *v1.ListOrganizationsRequest) (*v1.ListOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockAppServiceServerMockRecorder) ListOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockAppServiceServer)(nil).ListOrganizations), arg0, arg1)
}

// ListRobots mocks base method.
func (m *MockAppServiceServer) ListRobots(arg0 context.Context, arg1 *v1.ListRobotsRequest) (*v1.ListRobotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobots", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListRobotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobots indicates an expected call of ListRobots.
func (mr *MockAppServiceServerMockRecorder) ListRobots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobots", reflect.TypeOf((*MockAppServiceServer)(nil).ListRobots), arg0, arg1)
}

// LocationAuth mocks base method.
func (m *MockAppServiceServer) LocationAuth(arg0 context.Context, arg1 *v1.LocationAuthRequest) (*v1.LocationAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationAuth", arg0, arg1)
	ret0, _ := ret[0].(*v1.LocationAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationAuth indicates an expected call of LocationAuth.
func (mr *MockAppServiceServerMockRecorder) LocationAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationAuth", reflect.TypeOf((*MockAppServiceServer)(nil).LocationAuth), arg0, arg1)
}

// MarkPartAsMain mocks base method.
func (m *MockAppServiceServer) MarkPartAsMain(arg0 context.Context, arg1 *v1.MarkPartAsMainRequest) (*v1.MarkPartAsMainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPartAsMain", arg0, arg1)
	ret0, _ := ret[0].(*v1.MarkPartAsMainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkPartAsMain indicates an expected call of MarkPartAsMain.
func (mr *MockAppServiceServerMockRecorder) MarkPartAsMain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPartAsMain", reflect.TypeOf((*MockAppServiceServer)(nil).MarkPartAsMain), arg0, arg1)
}

// MarkPartForRestart mocks base method.
func (m *MockAppServiceServer) MarkPartForRestart(arg0 context.Context, arg1 *v1.MarkPartForRestartRequest) (*v1.MarkPartForRestartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPartForRestart", arg0, arg1)
	ret0, _ := ret[0].(*v1.MarkPartForRestartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkPartForRestart indicates an expected call of MarkPartForRestart.
func (mr *MockAppServiceServerMockRecorder) MarkPartForRestart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPartForRestart", reflect.TypeOf((*MockAppServiceServer)(nil).MarkPartForRestart), arg0, arg1)
}

// NewRobot mocks base method.
func (m *MockAppServiceServer) NewRobot(arg0 context.Context, arg1 *v1.NewRobotRequest) (*v1.NewRobotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRobot", arg0, arg1)
	ret0, _ := ret[0].(*v1.NewRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRobot indicates an expected call of NewRobot.
func (mr *MockAppServiceServerMockRecorder) NewRobot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRobot", reflect.TypeOf((*MockAppServiceServer)(nil).NewRobot), arg0, arg1)
}

// NewRobotPart mocks base method.
func (m *MockAppServiceServer) NewRobotPart(arg0 context.Context, arg1 *v1.NewRobotPartRequest) (*v1.NewRobotPartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRobotPart", arg0, arg1)
	ret0, _ := ret[0].(*v1.NewRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRobotPart indicates an expected call of NewRobotPart.
func (mr *MockAppServiceServerMockRecorder) NewRobotPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRobotPart", reflect.TypeOf((*MockAppServiceServer)(nil).NewRobotPart), arg0, arg1)
}

// ResendOrganizationInvite mocks base method.
func (m *MockAppServiceServer) ResendOrganizationInvite(arg0 context.Context, arg1 *v1.ResendOrganizationInviteRequest) (*v1.ResendOrganizationInviteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*v1.ResendOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendOrganizationInvite indicates an expected call of ResendOrganizationInvite.
func (mr *MockAppServiceServerMockRecorder) ResendOrganizationInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOrganizationInvite", reflect.TypeOf((*MockAppServiceServer)(nil).ResendOrganizationInvite), arg0, arg1)
}

// ShareLocation mocks base method.
func (m *MockAppServiceServer) ShareLocation(arg0 context.Context, arg1 *v1.ShareLocationRequest) (*v1.ShareLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.ShareLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareLocation indicates an expected call of ShareLocation.
func (mr *MockAppServiceServerMockRecorder) ShareLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareLocation", reflect.TypeOf((*MockAppServiceServer)(nil).ShareLocation), arg0, arg1)
}

// TailRobotPartLogs mocks base method.
func (m *MockAppServiceServer) TailRobotPartLogs(arg0 *v1.TailRobotPartLogsRequest, arg1 v1.AppService_TailRobotPartLogsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TailRobotPartLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TailRobotPartLogs indicates an expected call of TailRobotPartLogs.
func (mr *MockAppServiceServerMockRecorder) TailRobotPartLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TailRobotPartLogs", reflect.TypeOf((*MockAppServiceServer)(nil).TailRobotPartLogs), arg0, arg1)
}

// UnshareLocation mocks base method.
func (m *MockAppServiceServer) UnshareLocation(arg0 context.Context, arg1 *v1.UnshareLocationRequest) (*v1.UnshareLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.UnshareLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareLocation indicates an expected call of UnshareLocation.
func (mr *MockAppServiceServerMockRecorder) UnshareLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareLocation", reflect.TypeOf((*MockAppServiceServer)(nil).UnshareLocation), arg0, arg1)
}

// UpdateFragment mocks base method.
func (m *MockAppServiceServer) UpdateFragment(arg0 context.Context, arg1 *v1.UpdateFragmentRequest) (*v1.UpdateFragmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFragment", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateFragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFragment indicates an expected call of UpdateFragment.
func (mr *MockAppServiceServerMockRecorder) UpdateFragment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFragment", reflect.TypeOf((*MockAppServiceServer)(nil).UpdateFragment), arg0, arg1)
}

// UpdateLocation mocks base method.
func (m *MockAppServiceServer) UpdateLocation(arg0 context.Context, arg1 *v1.UpdateLocationRequest) (*v1.UpdateLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockAppServiceServerMockRecorder) UpdateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockAppServiceServer)(nil).UpdateLocation), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockAppServiceServer) UpdateOrganization(arg0 context.Context, arg1 *v1.UpdateOrganizationRequest) (*v1.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockAppServiceServerMockRecorder) UpdateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockAppServiceServer)(nil).UpdateOrganization), arg0, arg1)
}

// UpdateRobot mocks base method.
func (m *MockAppServiceServer) UpdateRobot(arg0 context.Context, arg1 *v1.UpdateRobotRequest) (*v1.UpdateRobotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobot", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateRobotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobot indicates an expected call of UpdateRobot.
func (mr *MockAppServiceServerMockRecorder) UpdateRobot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobot", reflect.TypeOf((*MockAppServiceServer)(nil).UpdateRobot), arg0, arg1)
}

// UpdateRobotPart mocks base method.
func (m *MockAppServiceServer) UpdateRobotPart(arg0 context.Context, arg1 *v1.UpdateRobotPartRequest) (*v1.UpdateRobotPartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobotPart", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateRobotPartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotPart indicates an expected call of UpdateRobotPart.
func (mr *MockAppServiceServerMockRecorder) UpdateRobotPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotPart", reflect.TypeOf((*MockAppServiceServer)(nil).UpdateRobotPart), arg0, arg1)
}

// mustEmbedUnimplementedAppServiceServer mocks base method.
func (m *MockAppServiceServer) mustEmbedUnimplementedAppServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppServiceServer")
}

// mustEmbedUnimplementedAppServiceServer indicates an expected call of mustEmbedUnimplementedAppServiceServer.
func (mr *MockAppServiceServerMockRecorder) mustEmbedUnimplementedAppServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppServiceServer", reflect.TypeOf((*MockAppServiceServer)(nil).mustEmbedUnimplementedAppServiceServer))
}

// MockUnsafeAppServiceServer is a mock of UnsafeAppServiceServer interface.
type MockUnsafeAppServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppServiceServerMockRecorder
}

// MockUnsafeAppServiceServerMockRecorder is the mock recorder for MockUnsafeAppServiceServer.
type MockUnsafeAppServiceServerMockRecorder struct {
	mock *MockUnsafeAppServiceServer
}

// NewMockUnsafeAppServiceServer creates a new mock instance.
func NewMockUnsafeAppServiceServer(ctrl *gomock.Controller) *MockUnsafeAppServiceServer {
	mock := &MockUnsafeAppServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppServiceServer) EXPECT() *MockUnsafeAppServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppServiceServer mocks base method.
func (m *MockUnsafeAppServiceServer) mustEmbedUnimplementedAppServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppServiceServer")
}

// mustEmbedUnimplementedAppServiceServer indicates an expected call of mustEmbedUnimplementedAppServiceServer.
func (mr *MockUnsafeAppServiceServerMockRecorder) mustEmbedUnimplementedAppServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppServiceServer", reflect.TypeOf((*MockUnsafeAppServiceServer)(nil).mustEmbedUnimplementedAppServiceServer))
}

// MockAppService_TailRobotPartLogsServer is a mock of AppService_TailRobotPartLogsServer interface.
type MockAppService_TailRobotPartLogsServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppService_TailRobotPartLogsServerMockRecorder
}

// MockAppService_TailRobotPartLogsServerMockRecorder is the mock recorder for MockAppService_TailRobotPartLogsServer.
type MockAppService_TailRobotPartLogsServerMockRecorder struct {
	mock *MockAppService_TailRobotPartLogsServer
}

// NewMockAppService_TailRobotPartLogsServer creates a new mock instance.
func NewMockAppService_TailRobotPartLogsServer(ctrl *gomock.Controller) *MockAppService_TailRobotPartLogsServer {
	mock := &MockAppService_TailRobotPartLogsServer{ctrl: ctrl}
	mock.recorder = &MockAppService_TailRobotPartLogsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppService_TailRobotPartLogsServer) EXPECT() *MockAppService_TailRobotPartLogsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAppService_TailRobotPartLogsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAppService_TailRobotPartLogsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAppService_TailRobotPartLogsServer) Send(arg0 *v1.TailRobotPartLogsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAppService_TailRobotPartLogsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAppService_TailRobotPartLogsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAppService_TailRobotPartLogsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAppService_TailRobotPartLogsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAppService_TailRobotPartLogsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAppService_TailRobotPartLogsServer)(nil).SetTrailer), arg0)
}
