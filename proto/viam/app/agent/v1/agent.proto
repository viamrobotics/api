syntax = "proto3";

package viam.app.agent.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/app/agent/v1";

service AgentDeviceService {
  // DeviceAgentConfig is for retrieving config by the on-device agent.
  rpc DeviceAgentConfig(DeviceAgentConfigRequest) returns (DeviceAgentConfigResponse);
}

// Device side
message DeviceAgentConfigRequest {
  // robot partID
  string id = 1;
  // info about the host system
  HostInfo host_info = 2;
  // current subsystems and versions
  map<string, string> subsystem_versions = 3;
}

message DeviceAgentConfigResponse {
  // subsystems to be installed/configured/updated
  // note: previously installed subsystems will be removed from the system if removed from this list
  map<string, DeviceSubsystemConfig> subsystem_configs = 1;
  // how often this request should be repeated
  google.protobuf.Duration check_interval = 2;
}

message DeviceSubsystemConfig {
  // data needed to download/validate the subsystem
  SubsystemUpdateInfo update_info = 1;
  // if this subsystem is disabled and should not be started by the agent
  bool disable = 2;
  // force_restart will restart the subsystem, even if no updates are available
  bool force_restart = 3;
  //arbitrary config sections
  google.protobuf.Struct attributes = 4;
}

message HostInfo {
  // platform is the docker styled combination of kernel and architecture. Ex: linux/amd64, darwin/arm64
  string platform = 1;
  // ID and VERSION_ID fields from /etc/os-release, colon seperated. Ex: ubuntu:22.04, debian:11
  string distro = 2;
  // additional tags for specific hardware or software that's present and may affect software selection
  // ex: "jetson", "rpi4", "systemd", etc.
  repeated string tags = 3;
}

message SubsystemUpdateInfo {
  // unpacked filename as it is expected on disk (regardless of url)
  string filename = 1;
  // url to download from
  string url = 2;
  // version expected at the url
  string version = 3;
  // sha256 sum of file as downloaded
  bytes sha256 = 4;
  // determines if decompression or executable permissions are needed
  PackageFormat format = 5;
}

enum PackageFormat {
  // unknown/unset (autodetection may be attempted)
  PACKAGE_FORMAT_UNSPECIFIED = 0;
  // do nothing
  PACKAGE_FORMAT_RAW = 1;
  // decompress .xz file
  PACKAGE_FORMAT_XZ = 2;
  // set executable permissions
  PACKAGE_FORMAT_EXECUTABLE = 3;
  // decompress and set executable
  PACKAGE_FORMAT_XZ_EXECUTABLE = 4;
}
