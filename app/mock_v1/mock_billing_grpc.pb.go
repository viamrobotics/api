// Code generated by MockGen. DO NOT EDIT.
// Source: app/v1/billing_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "go.viam.com/api/app/v1"
	grpc "google.golang.org/grpc"
)

// MockBillingServiceClient is a mock of BillingServiceClient interface.
type MockBillingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceClientMockRecorder
}

// MockBillingServiceClientMockRecorder is the mock recorder for MockBillingServiceClient.
type MockBillingServiceClientMockRecorder struct {
	mock *MockBillingServiceClient
}

// NewMockBillingServiceClient creates a new mock instance.
func NewMockBillingServiceClient(ctrl *gomock.Controller) *MockBillingServiceClient {
	mock := &MockBillingServiceClient{ctrl: ctrl}
	mock.recorder = &MockBillingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingServiceClient) EXPECT() *MockBillingServiceClientMockRecorder {
	return m.recorder
}

// GetBillingSummary mocks base method.
func (m *MockBillingServiceClient) GetBillingSummary(ctx context.Context, in *v1.GetBillingSummaryRequest, opts ...grpc.CallOption) (*v1.GetBillingSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBillingSummary", varargs...)
	ret0, _ := ret[0].(*v1.GetBillingSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingSummary indicates an expected call of GetBillingSummary.
func (mr *MockBillingServiceClientMockRecorder) GetBillingSummary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingSummary", reflect.TypeOf((*MockBillingServiceClient)(nil).GetBillingSummary), varargs...)
}

// GetCurrentMonthUsageSummary mocks base method.
func (m *MockBillingServiceClient) GetCurrentMonthUsageSummary(ctx context.Context, in *v1.GetCurrentMonthUsageSummaryRequest, opts ...grpc.CallOption) (*v1.GetCurrentMonthUsageSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentMonthUsageSummary", varargs...)
	ret0, _ := ret[0].(*v1.GetCurrentMonthUsageSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMonthUsageSummary indicates an expected call of GetCurrentMonthUsageSummary.
func (mr *MockBillingServiceClientMockRecorder) GetCurrentMonthUsageSummary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMonthUsageSummary", reflect.TypeOf((*MockBillingServiceClient)(nil).GetCurrentMonthUsageSummary), varargs...)
}

// GetInvoiceHistory mocks base method.
func (m *MockBillingServiceClient) GetInvoiceHistory(ctx context.Context, in *v1.GetInvoiceHistoryRequest, opts ...grpc.CallOption) (*v1.GetInvoiceHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvoiceHistory", varargs...)
	ret0, _ := ret[0].(*v1.GetInvoiceHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceHistory indicates an expected call of GetInvoiceHistory.
func (mr *MockBillingServiceClientMockRecorder) GetInvoiceHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceHistory", reflect.TypeOf((*MockBillingServiceClient)(nil).GetInvoiceHistory), varargs...)
}

// GetItemizedInvoice mocks base method.
func (m *MockBillingServiceClient) GetItemizedInvoice(ctx context.Context, in *v1.GetItemizedInvoiceRequest, opts ...grpc.CallOption) (*v1.GetItemizedInvoiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemizedInvoice", varargs...)
	ret0, _ := ret[0].(*v1.GetItemizedInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemizedInvoice indicates an expected call of GetItemizedInvoice.
func (mr *MockBillingServiceClientMockRecorder) GetItemizedInvoice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemizedInvoice", reflect.TypeOf((*MockBillingServiceClient)(nil).GetItemizedInvoice), varargs...)
}

// GetUnpaidBalance mocks base method.
func (m *MockBillingServiceClient) GetUnpaidBalance(ctx context.Context, in *v1.GetUnpaidBalanceRequest, opts ...grpc.CallOption) (*v1.GetUnpaidBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnpaidBalance", varargs...)
	ret0, _ := ret[0].(*v1.GetUnpaidBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaidBalance indicates an expected call of GetUnpaidBalance.
func (mr *MockBillingServiceClientMockRecorder) GetUnpaidBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaidBalance", reflect.TypeOf((*MockBillingServiceClient)(nil).GetUnpaidBalance), varargs...)
}

// MockBillingServiceServer is a mock of BillingServiceServer interface.
type MockBillingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceServerMockRecorder
}

// MockBillingServiceServerMockRecorder is the mock recorder for MockBillingServiceServer.
type MockBillingServiceServerMockRecorder struct {
	mock *MockBillingServiceServer
}

// NewMockBillingServiceServer creates a new mock instance.
func NewMockBillingServiceServer(ctrl *gomock.Controller) *MockBillingServiceServer {
	mock := &MockBillingServiceServer{ctrl: ctrl}
	mock.recorder = &MockBillingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingServiceServer) EXPECT() *MockBillingServiceServerMockRecorder {
	return m.recorder
}

// GetBillingSummary mocks base method.
func (m *MockBillingServiceServer) GetBillingSummary(arg0 context.Context, arg1 *v1.GetBillingSummaryRequest) (*v1.GetBillingSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingSummary", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetBillingSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingSummary indicates an expected call of GetBillingSummary.
func (mr *MockBillingServiceServerMockRecorder) GetBillingSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingSummary", reflect.TypeOf((*MockBillingServiceServer)(nil).GetBillingSummary), arg0, arg1)
}

// GetCurrentMonthUsageSummary mocks base method.
func (m *MockBillingServiceServer) GetCurrentMonthUsageSummary(arg0 context.Context, arg1 *v1.GetCurrentMonthUsageSummaryRequest) (*v1.GetCurrentMonthUsageSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMonthUsageSummary", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetCurrentMonthUsageSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMonthUsageSummary indicates an expected call of GetCurrentMonthUsageSummary.
func (mr *MockBillingServiceServerMockRecorder) GetCurrentMonthUsageSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMonthUsageSummary", reflect.TypeOf((*MockBillingServiceServer)(nil).GetCurrentMonthUsageSummary), arg0, arg1)
}

// GetInvoiceHistory mocks base method.
func (m *MockBillingServiceServer) GetInvoiceHistory(arg0 context.Context, arg1 *v1.GetInvoiceHistoryRequest) (*v1.GetInvoiceHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceHistory", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetInvoiceHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceHistory indicates an expected call of GetInvoiceHistory.
func (mr *MockBillingServiceServerMockRecorder) GetInvoiceHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceHistory", reflect.TypeOf((*MockBillingServiceServer)(nil).GetInvoiceHistory), arg0, arg1)
}

// GetItemizedInvoice mocks base method.
func (m *MockBillingServiceServer) GetItemizedInvoice(arg0 context.Context, arg1 *v1.GetItemizedInvoiceRequest) (*v1.GetItemizedInvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemizedInvoice", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetItemizedInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemizedInvoice indicates an expected call of GetItemizedInvoice.
func (mr *MockBillingServiceServerMockRecorder) GetItemizedInvoice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemizedInvoice", reflect.TypeOf((*MockBillingServiceServer)(nil).GetItemizedInvoice), arg0, arg1)
}

// GetUnpaidBalance mocks base method.
func (m *MockBillingServiceServer) GetUnpaidBalance(arg0 context.Context, arg1 *v1.GetUnpaidBalanceRequest) (*v1.GetUnpaidBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpaidBalance", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetUnpaidBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaidBalance indicates an expected call of GetUnpaidBalance.
func (mr *MockBillingServiceServerMockRecorder) GetUnpaidBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaidBalance", reflect.TypeOf((*MockBillingServiceServer)(nil).GetUnpaidBalance), arg0, arg1)
}

// mustEmbedUnimplementedBillingServiceServer mocks base method.
func (m *MockBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingServiceServer")
}

// mustEmbedUnimplementedBillingServiceServer indicates an expected call of mustEmbedUnimplementedBillingServiceServer.
func (mr *MockBillingServiceServerMockRecorder) mustEmbedUnimplementedBillingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingServiceServer", reflect.TypeOf((*MockBillingServiceServer)(nil).mustEmbedUnimplementedBillingServiceServer))
}

// MockUnsafeBillingServiceServer is a mock of UnsafeBillingServiceServer interface.
type MockUnsafeBillingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBillingServiceServerMockRecorder
}

// MockUnsafeBillingServiceServerMockRecorder is the mock recorder for MockUnsafeBillingServiceServer.
type MockUnsafeBillingServiceServerMockRecorder struct {
	mock *MockUnsafeBillingServiceServer
}

// NewMockUnsafeBillingServiceServer creates a new mock instance.
func NewMockUnsafeBillingServiceServer(ctrl *gomock.Controller) *MockUnsafeBillingServiceServer {
	mock := &MockUnsafeBillingServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBillingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBillingServiceServer) EXPECT() *MockUnsafeBillingServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBillingServiceServer mocks base method.
func (m *MockUnsafeBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBillingServiceServer")
}

// mustEmbedUnimplementedBillingServiceServer indicates an expected call of mustEmbedUnimplementedBillingServiceServer.
func (mr *MockUnsafeBillingServiceServerMockRecorder) mustEmbedUnimplementedBillingServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBillingServiceServer", reflect.TypeOf((*MockUnsafeBillingServiceServer)(nil).mustEmbedUnimplementedBillingServiceServer))
}
