/**
 * @fileoverview gRPC-Web generated client stub for viam.module.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: module/v1/module.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var app_v1_robot_pb = require('../../app/v1/robot_pb.js')

var robot_v1_robot_pb = require('../../robot/v1/robot_pb.js')
const proto = {};
proto.viam = {};
proto.viam.module = {};
proto.viam.module.v1 = require('./module_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.viam.module.v1.ModuleServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.viam.module.v1.ModuleServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.AddComponentRequest,
 *   !proto.viam.module.v1.AddComponentResponse>}
 */
const methodDescriptor_ModuleService_AddComponent = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/AddComponent',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.AddComponentRequest,
  proto.viam.module.v1.AddComponentResponse,
  /**
   * @param {!proto.viam.module.v1.AddComponentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.AddComponentResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.AddComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.AddComponentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.AddComponentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.addComponent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/AddComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_AddComponent,
      callback);
};


/**
 * @param {!proto.viam.module.v1.AddComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.AddComponentResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.addComponent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/AddComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_AddComponent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.RemoveComponentRequest,
 *   !proto.viam.module.v1.RemoveComponentResponse>}
 */
const methodDescriptor_ModuleService_RemoveComponent = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/RemoveComponent',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.RemoveComponentRequest,
  proto.viam.module.v1.RemoveComponentResponse,
  /**
   * @param {!proto.viam.module.v1.RemoveComponentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.RemoveComponentResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.RemoveComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.RemoveComponentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.RemoveComponentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.removeComponent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/RemoveComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_RemoveComponent,
      callback);
};


/**
 * @param {!proto.viam.module.v1.RemoveComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.RemoveComponentResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.removeComponent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/RemoveComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_RemoveComponent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.ReconfigureComponentRequest,
 *   !proto.viam.module.v1.ReconfigureComponentResponse>}
 */
const methodDescriptor_ModuleService_ReconfigureComponent = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/ReconfigureComponent',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.ReconfigureComponentRequest,
  proto.viam.module.v1.ReconfigureComponentResponse,
  /**
   * @param {!proto.viam.module.v1.ReconfigureComponentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.ReconfigureComponentResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.ReconfigureComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.ReconfigureComponentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.ReconfigureComponentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.reconfigureComponent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/ReconfigureComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_ReconfigureComponent,
      callback);
};


/**
 * @param {!proto.viam.module.v1.ReconfigureComponentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.ReconfigureComponentResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.reconfigureComponent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/ReconfigureComponent',
      request,
      metadata || {},
      methodDescriptor_ModuleService_ReconfigureComponent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.AddServiceRequest,
 *   !proto.viam.module.v1.AddServiceResponse>}
 */
const methodDescriptor_ModuleService_AddService = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/AddService',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.AddServiceRequest,
  proto.viam.module.v1.AddServiceResponse,
  /**
   * @param {!proto.viam.module.v1.AddServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.AddServiceResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.AddServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.AddServiceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.AddServiceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.addService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/AddService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_AddService,
      callback);
};


/**
 * @param {!proto.viam.module.v1.AddServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.AddServiceResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.addService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/AddService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_AddService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.RemoveServiceRequest,
 *   !proto.viam.module.v1.RemoveServiceResponse>}
 */
const methodDescriptor_ModuleService_RemoveService = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/RemoveService',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.RemoveServiceRequest,
  proto.viam.module.v1.RemoveServiceResponse,
  /**
   * @param {!proto.viam.module.v1.RemoveServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.RemoveServiceResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.RemoveServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.RemoveServiceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.RemoveServiceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.removeService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/RemoveService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_RemoveService,
      callback);
};


/**
 * @param {!proto.viam.module.v1.RemoveServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.RemoveServiceResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.removeService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/RemoveService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_RemoveService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.ReconfigureServiceRequest,
 *   !proto.viam.module.v1.ReconfigureServiceResponse>}
 */
const methodDescriptor_ModuleService_ReconfigureService = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/ReconfigureService',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.ReconfigureServiceRequest,
  proto.viam.module.v1.ReconfigureServiceResponse,
  /**
   * @param {!proto.viam.module.v1.ReconfigureServiceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.ReconfigureServiceResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.ReconfigureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.ReconfigureServiceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.ReconfigureServiceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.reconfigureService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/ReconfigureService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_ReconfigureService,
      callback);
};


/**
 * @param {!proto.viam.module.v1.ReconfigureServiceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.ReconfigureServiceResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.reconfigureService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/ReconfigureService',
      request,
      metadata || {},
      methodDescriptor_ModuleService_ReconfigureService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.CloseModuleRequest,
 *   !proto.viam.module.v1.CloseModuleResponse>}
 */
const methodDescriptor_ModuleService_CloseModule = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/CloseModule',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.CloseModuleRequest,
  proto.viam.module.v1.CloseModuleResponse,
  /**
   * @param {!proto.viam.module.v1.CloseModuleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.CloseModuleResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.CloseModuleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.CloseModuleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.CloseModuleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.closeModule =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/CloseModule',
      request,
      metadata || {},
      methodDescriptor_ModuleService_CloseModule,
      callback);
};


/**
 * @param {!proto.viam.module.v1.CloseModuleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.CloseModuleResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.closeModule =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/CloseModule',
      request,
      metadata || {},
      methodDescriptor_ModuleService_CloseModule);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viam.module.v1.ReadyRequest,
 *   !proto.viam.module.v1.ReadyResponse>}
 */
const methodDescriptor_ModuleService_Ready = new grpc.web.MethodDescriptor(
  '/viam.module.v1.ModuleService/Ready',
  grpc.web.MethodType.UNARY,
  proto.viam.module.v1.ReadyRequest,
  proto.viam.module.v1.ReadyResponse,
  /**
   * @param {!proto.viam.module.v1.ReadyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viam.module.v1.ReadyResponse.deserializeBinary
);


/**
 * @param {!proto.viam.module.v1.ReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viam.module.v1.ReadyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viam.module.v1.ReadyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viam.module.v1.ModuleServiceClient.prototype.ready =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viam.module.v1.ModuleService/Ready',
      request,
      metadata || {},
      methodDescriptor_ModuleService_Ready,
      callback);
};


/**
 * @param {!proto.viam.module.v1.ReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viam.module.v1.ReadyResponse>}
 *     Promise that resolves to the response
 */
proto.viam.module.v1.ModuleServicePromiseClient.prototype.ready =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viam.module.v1.ModuleService/Ready',
      request,
      metadata || {},
      methodDescriptor_ModuleService_Ready);
};


module.exports = proto.viam.module.v1;

