// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: component/motor/v1/motor.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MotorService_SetPower_FullMethodName          = "/viam.component.motor.v1.MotorService/SetPower"
	MotorService_GoFor_FullMethodName             = "/viam.component.motor.v1.MotorService/GoFor"
	MotorService_GoTo_FullMethodName              = "/viam.component.motor.v1.MotorService/GoTo"
	MotorService_SetRPM_FullMethodName            = "/viam.component.motor.v1.MotorService/SetRPM"
	MotorService_ResetZeroPosition_FullMethodName = "/viam.component.motor.v1.MotorService/ResetZeroPosition"
	MotorService_GetPosition_FullMethodName       = "/viam.component.motor.v1.MotorService/GetPosition"
	MotorService_GetProperties_FullMethodName     = "/viam.component.motor.v1.MotorService/GetProperties"
	MotorService_Stop_FullMethodName              = "/viam.component.motor.v1.MotorService/Stop"
	MotorService_IsPowered_FullMethodName         = "/viam.component.motor.v1.MotorService/IsPowered"
	MotorService_IsMoving_FullMethodName          = "/viam.component.motor.v1.MotorService/IsMoving"
	MotorService_DoCommand_FullMethodName         = "/viam.component.motor.v1.MotorService/DoCommand"
	MotorService_GetGeometries_FullMethodName     = "/viam.component.motor.v1.MotorService/GetGeometries"
)

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A MotorService maintains all motors associated with a robot
type MotorServiceClient interface {
	// SetPower sets the percentage of the motor's total power that should be employed
	// expressed a value between -1 and 1 where negative values indicate a backwards
	// direction and positive values a forward direction
	SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*SetPowerResponse, error)
	// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
	// for a specified number of rotations relative to its starting position
	// This method will return an error if position reporting is not supported
	// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
	// Deprecated: If revolutions is 0, this will run the motor at rpm indefinitely.
	GoFor(ctx context.Context, in *GoForRequest, opts ...grpc.CallOption) (*GoForResponse, error)
	// GoTo requests the robot's motor to move to a specific position that
	// is relative to its home position at a specified speed which is expressed in RPM
	// This method will return an error if position reporting is not supported
	GoTo(ctx context.Context, in *GoToRequest, opts ...grpc.CallOption) (*GoToResponse, error)
	// SetRPM instructs the motor to move at the specified RPM indefinitely.
	SetRPM(ctx context.Context, in *SetRPMRequest, opts ...grpc.CallOption) (*SetRPMResponse, error)
	// ResetZeroPosition sets the current position of the motor as the new zero position
	// This method will return an error if position reporting is not supported
	ResetZeroPosition(ctx context.Context, in *ResetZeroPositionRequest, opts ...grpc.CallOption) (*ResetZeroPositionResponse, error)
	// Position reports the position of the robot's motor relative to its zero position
	// This method will return an error if position reporting is not supported
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
	GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error)
	// Stop turns the robot's motor off
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// IsPowered returns true if the robot's motor is on
	IsPowered(ctx context.Context, in *IsPoweredRequest, opts ...grpc.CallOption) (*IsPoweredResponse, error)
	// IsMoving reports if a component is in motion
	IsMoving(ctx context.Context, in *IsMovingRequest, opts ...grpc.CallOption) (*IsMovingResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error)
}

type motorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorServiceClient(cc grpc.ClientConnInterface) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*SetPowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPowerResponse)
	err := c.cc.Invoke(ctx, MotorService_SetPower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GoFor(ctx context.Context, in *GoForRequest, opts ...grpc.CallOption) (*GoForResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoForResponse)
	err := c.cc.Invoke(ctx, MotorService_GoFor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GoTo(ctx context.Context, in *GoToRequest, opts ...grpc.CallOption) (*GoToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoToResponse)
	err := c.cc.Invoke(ctx, MotorService_GoTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) SetRPM(ctx context.Context, in *SetRPMRequest, opts ...grpc.CallOption) (*SetRPMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRPMResponse)
	err := c.cc.Invoke(ctx, MotorService_SetRPM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) ResetZeroPosition(ctx context.Context, in *ResetZeroPositionRequest, opts ...grpc.CallOption) (*ResetZeroPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetZeroPositionResponse)
	err := c.cc.Invoke(ctx, MotorService_ResetZeroPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, MotorService_GetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPropertiesResponse)
	err := c.cc.Invoke(ctx, MotorService_GetProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, MotorService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) IsPowered(ctx context.Context, in *IsPoweredRequest, opts ...grpc.CallOption) (*IsPoweredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPoweredResponse)
	err := c.cc.Invoke(ctx, MotorService_IsPowered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) IsMoving(ctx context.Context, in *IsMovingRequest, opts ...grpc.CallOption) (*IsMovingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMovingResponse)
	err := c.cc.Invoke(ctx, MotorService_IsMoving_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, MotorService_DoCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetGeometriesResponse)
	err := c.cc.Invoke(ctx, MotorService_GetGeometries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotorServiceServer is the server API for MotorService service.
// All implementations must embed UnimplementedMotorServiceServer
// for forward compatibility.
//
// A MotorService maintains all motors associated with a robot
type MotorServiceServer interface {
	// SetPower sets the percentage of the motor's total power that should be employed
	// expressed a value between -1 and 1 where negative values indicate a backwards
	// direction and positive values a forward direction
	SetPower(context.Context, *SetPowerRequest) (*SetPowerResponse, error)
	// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
	// for a specified number of rotations relative to its starting position
	// This method will return an error if position reporting is not supported
	// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
	// Deprecated: If revolutions is 0, this will run the motor at rpm indefinitely.
	GoFor(context.Context, *GoForRequest) (*GoForResponse, error)
	// GoTo requests the robot's motor to move to a specific position that
	// is relative to its home position at a specified speed which is expressed in RPM
	// This method will return an error if position reporting is not supported
	GoTo(context.Context, *GoToRequest) (*GoToResponse, error)
	// SetRPM instructs the motor to move at the specified RPM indefinitely.
	SetRPM(context.Context, *SetRPMRequest) (*SetRPMResponse, error)
	// ResetZeroPosition sets the current position of the motor as the new zero position
	// This method will return an error if position reporting is not supported
	ResetZeroPosition(context.Context, *ResetZeroPositionRequest) (*ResetZeroPositionResponse, error)
	// Position reports the position of the robot's motor relative to its zero position
	// This method will return an error if position reporting is not supported
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
	GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error)
	// Stop turns the robot's motor off
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// IsPowered returns true if the robot's motor is on
	IsPowered(context.Context, *IsPoweredRequest) (*IsPoweredResponse, error)
	// IsMoving reports if a component is in motion
	IsMoving(context.Context, *IsMovingRequest) (*IsMovingResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error)
	mustEmbedUnimplementedMotorServiceServer()
}

// UnimplementedMotorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMotorServiceServer struct{}

func (UnimplementedMotorServiceServer) SetPower(context.Context, *SetPowerRequest) (*SetPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}
func (UnimplementedMotorServiceServer) GoFor(context.Context, *GoForRequest) (*GoForResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoFor not implemented")
}
func (UnimplementedMotorServiceServer) GoTo(context.Context, *GoToRequest) (*GoToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoTo not implemented")
}
func (UnimplementedMotorServiceServer) SetRPM(context.Context, *SetRPMRequest) (*SetRPMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRPM not implemented")
}
func (UnimplementedMotorServiceServer) ResetZeroPosition(context.Context, *ResetZeroPositionRequest) (*ResetZeroPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetZeroPosition not implemented")
}
func (UnimplementedMotorServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedMotorServiceServer) GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedMotorServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedMotorServiceServer) IsPowered(context.Context, *IsPoweredRequest) (*IsPoweredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPowered not implemented")
}
func (UnimplementedMotorServiceServer) IsMoving(context.Context, *IsMovingRequest) (*IsMovingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMoving not implemented")
}
func (UnimplementedMotorServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedMotorServiceServer) GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeometries not implemented")
}
func (UnimplementedMotorServiceServer) mustEmbedUnimplementedMotorServiceServer() {}
func (UnimplementedMotorServiceServer) testEmbeddedByValue()                      {}

// UnsafeMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorServiceServer will
// result in compilation errors.
type UnsafeMotorServiceServer interface {
	mustEmbedUnimplementedMotorServiceServer()
}

func RegisterMotorServiceServer(s grpc.ServiceRegistrar, srv MotorServiceServer) {
	// If the following call pancis, it indicates UnimplementedMotorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MotorService_ServiceDesc, srv)
}

func _MotorService_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_SetPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).SetPower(ctx, req.(*SetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GoFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GoFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GoFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GoFor(ctx, req.(*GoForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GoTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GoTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GoTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GoTo(ctx, req.(*GoToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_SetRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).SetRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_SetRPM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).SetRPM(ctx, req.(*SetRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_ResetZeroPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetZeroPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).ResetZeroPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_ResetZeroPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).ResetZeroPosition(ctx, req.(*ResetZeroPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetProperties(ctx, req.(*GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_IsPowered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPoweredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).IsPowered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_IsPowered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).IsPowered(ctx, req.(*IsPoweredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_IsMoving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMovingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).IsMoving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_IsMoving_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).IsMoving(ctx, req.(*IsMovingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_DoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetGeometries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGeometriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetGeometries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetGeometries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetGeometries(ctx, req.(*v1.GetGeometriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotorService_ServiceDesc is the grpc.ServiceDesc for MotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.component.motor.v1.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPower",
			Handler:    _MotorService_SetPower_Handler,
		},
		{
			MethodName: "GoFor",
			Handler:    _MotorService_GoFor_Handler,
		},
		{
			MethodName: "GoTo",
			Handler:    _MotorService_GoTo_Handler,
		},
		{
			MethodName: "SetRPM",
			Handler:    _MotorService_SetRPM_Handler,
		},
		{
			MethodName: "ResetZeroPosition",
			Handler:    _MotorService_ResetZeroPosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _MotorService_GetPosition_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _MotorService_GetProperties_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _MotorService_Stop_Handler,
		},
		{
			MethodName: "IsPowered",
			Handler:    _MotorService_IsPowered_Handler,
		},
		{
			MethodName: "IsMoving",
			Handler:    _MotorService_IsMoving_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _MotorService_DoCommand_Handler,
		},
		{
			MethodName: "GetGeometries",
			Handler:    _MotorService_GetGeometries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "component/motor/v1/motor.proto",
}
