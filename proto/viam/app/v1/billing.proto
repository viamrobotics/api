syntax = "proto3";

package viam.app.v1;

import "google/protobuf/timestamp.proto";

option go_package = "go.viam.com/api/app/v1";

service BillingService {
  // Detailed breakdown of current month's costs
  rpc GetCurrentMonthUsage(GetCurrentMonthUsageRequest) returns (GetCurrentMonthUsageResponse);
  // Org-level information (like billing email and payment details)
  rpc GetOrgBillingInformation(GetOrgBillingInformationRequest) returns (GetOrgBillingInformationResponse);
  // Total outstanding balance and previous invoices
  rpc GetInvoicesSummary(GetInvoicesSummaryRequest) returns (GetInvoicesSummaryResponse);
  // Download a PDF invoice
  rpc GetInvoicePdf(GetInvoicePdfRequest) returns (stream GetInvoicePdfResponse);
  // Send an email with a prompt to the user's org's billing page.
  rpc SendPaymentRequiredEmail(SendPaymentRequiredEmailRequest) returns (SendPaymentRequiredEmailResponse);
}

message InvoiceSummary {
  string id = 1;
  google.protobuf.Timestamp invoice_date = 2;
  double invoice_amount = 3;
  string status = 4;
  google.protobuf.Timestamp due_date = 5;
  google.protobuf.Timestamp paid_date = 6;
}

enum PaymentMethodType {
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;
  PAYMENT_METHOD_TYPE_CARD = 1;
}

message PaymentMethodCard {
  string brand = 1;
  string last_four_digits = 2;
}

message GetCurrentMonthUsageRequest {
  string org_id = 1;
}

enum UsageCostType {
  USAGE_COST_TYPE_UNSPECIFIED = 0;
  USAGE_COST_TYPE_DATA_UPLOAD = 1 [deprecated = true];
  USAGE_COST_TYPE_DATA_EGRESS = 2 [deprecated = true];
  USAGE_COST_TYPE_REMOTE_CONTROL = 3;
  USAGE_COST_TYPE_STANDARD_COMPUTE = 4;
  USAGE_COST_TYPE_CLOUD_STORAGE = 5 [deprecated = true];
  USAGE_COST_TYPE_BINARY_DATA_CLOUD_STORAGE = 6;
  USAGE_COST_TYPE_OTHER_CLOUD_STORAGE = 7 [deprecated = true];
  USAGE_COST_TYPE_PER_MACHINE = 8;
  USAGE_COST_TYPE_TRIGGER_NOTIFICATION = 9;
  USAGE_COST_TYPE_TABULAR_DATA_CLOUD_STORAGE = 10;
  USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_STORAGE = 11;
  USAGE_COST_TYPE_LOGS_CLOUD_STORAGE = 12;
  USAGE_COST_TYPE_TRAINING_LOGS_CLOUD_STORAGE = 13;
  USAGE_COST_TYPE_PACKAGES_CLOUD_STORAGE = 14;
  USAGE_COST_TYPE_BINARY_DATA_UPLOAD = 15;
  USAGE_COST_TYPE_TABULAR_DATA_UPLOAD = 16;
  USAGE_COST_TYPE_LOGS_UPLOAD = 17;
  USAGE_COST_TYPE_BINARY_DATA_EGRESS = 18;
  USAGE_COST_TYPE_TABULAR_DATA_EGRESS = 19;
  USAGE_COST_TYPE_LOGS_EGRESS = 20;
  USAGE_COST_TYPE_ML_TRAINING_LOGS_EGRESS = 21;
}

enum SourceType {
  SOURCE_TYPE_UNSPECIFIED = 0;
  SOURCE_TYPE_ORG = 1;
  SOURCE_TYPE_FRAGMENT = 2;
}

message UsageCost {
  UsageCostType resource_type = 1;
  double cost = 2;
}

message ResourceUsageCostsBySource {
  SourceType source_type = 1;
  ResourceUsageCosts resource_usage_costs = 2;
  string tier_name = 3;
}

message ResourceUsageCosts {
  repeated UsageCost usage_costs = 1;
  double discount = 2;
  double total_with_discount = 3;
  double total_without_discount = 4;
}

message GetCurrentMonthUsageResponse {
  google.protobuf.Timestamp start_date = 1;
  google.protobuf.Timestamp end_date = 2;
  repeated ResourceUsageCostsBySource resource_usage_costs_by_source = 14;
  double subtotal = 15;

  // all fields below are deprecated
  double cloud_storage_usage_cost = 3 [deprecated = true];
  double data_upload_usage_cost = 4 [deprecated = true];
  double data_egres_usage_cost = 5 [deprecated = true];
  double remote_control_usage_cost = 6 [deprecated = true];
  double standard_compute_usage_cost = 7 [deprecated = true];
  double discount_amount = 8 [deprecated = true];
  double total_usage_with_discount = 9 [deprecated = true];
  double total_usage_without_discount = 10 [deprecated = true];
  double per_machine_usage_cost = 11 [deprecated = true];
  double binary_data_cloud_storage_usage_cost = 12 [deprecated = true];
  double other_cloud_storage_usage_cost = 13 [deprecated = true];
}

message GetOrgBillingInformationRequest {
  string org_id = 1;
}

message GetOrgBillingInformationResponse {
  PaymentMethodType type = 1;
  string billing_email = 2;

  // defined if type is PAYMENT_METHOD_TYPE_CARD
  optional PaymentMethodCard method = 3;
  // Only return billing_tier for billing dashboard admin users
  optional string billing_tier = 4;
}

message GetInvoicesSummaryRequest {
  string org_id = 1;
}

message GetInvoicesSummaryResponse {
  // all unpaid balances at the end of the last billing cycle
  double outstanding_balance = 1;
  // all previous invoices
  repeated InvoiceSummary invoices = 2;
}

message GetInvoicePdfRequest {
  string id = 1;
  string org_id = 2;
}

message GetInvoicePdfResponse {
  bytes chunk = 1;
}

message SendPaymentRequiredEmailRequest {
  string customer_org_id = 1;
  string billing_owner_org_id = 2;
}

message SendPaymentRequiredEmailResponse {}
