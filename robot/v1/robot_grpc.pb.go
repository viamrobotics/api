// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: physicalDevice/v1/physicalDevice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// physicalDeviceServiceClient is the client API for physicalDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type physicalDeviceServiceClient interface {
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error)
	// ResourceNames returns the list of all resources.
	ResourceNames(ctx context.Context, in *ResourceNamesRequest, opts ...grpc.CallOption) (*ResourceNamesResponse, error)
	// ResourceRPCSubtypes returns the list of all resource types.
	ResourceRPCSubtypes(ctx context.Context, in *ResourceRPCSubtypesRequest, opts ...grpc.CallOption) (*ResourceRPCSubtypesResponse, error)
	CancelOperation(ctx context.Context, in *CancelOperationRequest, opts ...grpc.CallOption) (*CancelOperationResponse, error)
	BlockForOperation(ctx context.Context, in *BlockForOperationRequest, opts ...grpc.CallOption) (*BlockForOperationResponse, error)
	// DiscoverComponents returns the list of discovered component configurations.
	DiscoverComponents(ctx context.Context, in *DiscoverComponentsRequest, opts ...grpc.CallOption) (*DiscoverComponentsResponse, error)
	FrameSystemConfig(ctx context.Context, in *FrameSystemConfigRequest, opts ...grpc.CallOption) (*FrameSystemConfigResponse, error)
	TransformPose(ctx context.Context, in *TransformPoseRequest, opts ...grpc.CallOption) (*TransformPoseResponse, error)
	TransformPCD(ctx context.Context, in *TransformPCDRequest, opts ...grpc.CallOption) (*TransformPCDResponse, error)
	// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
	StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (physicalDeviceService_StreamStatusClient, error)
	// StopAll will stop all current and outstanding operations for the physicalDevice and stops all actuators and movement
	StopAll(ctx context.Context, in *StopAllRequest, opts ...grpc.CallOption) (*StopAllResponse, error)
	// StartSession creates a new session that expects at least one heartbeat within the returned window.
	// If the window lapses, any resources that have safety heart monitored methods, where this session was
	// the last caller on the resource, will be stopped.
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
	// SESSION_EXPIRED error will be returned.
	SendSessionHeartbeat(ctx context.Context, in *SendSessionHeartbeatRequest, opts ...grpc.CallOption) (*SendSessionHeartbeatResponse, error)
	// Log sends logs to be logged by this physicalDevice. Currently used for module logging.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// GetCloudMetadata returns app-related information about the physicalDevice.
	GetCloudMetadata(ctx context.Context, in *GetCloudMetadataRequest, opts ...grpc.CallOption) (*GetCloudMetadataResponse, error)
	RestartModule(ctx context.Context, in *RestartModuleRequest, opts ...grpc.CallOption) (*RestartModuleResponse, error)
	// Shutdown shuts down the physicalDevice.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type physicalDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewphysicalDeviceServiceClient(cc grpc.ClientConnInterface) physicalDeviceServiceClient {
	return &physicalDeviceServiceClient{cc}
}

func (c *physicalDeviceServiceClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/GetOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	out := new(GetSessionsResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) ResourceNames(ctx context.Context, in *ResourceNamesRequest, opts ...grpc.CallOption) (*ResourceNamesResponse, error) {
	out := new(ResourceNamesResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/ResourceNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) ResourceRPCSubtypes(ctx context.Context, in *ResourceRPCSubtypesRequest, opts ...grpc.CallOption) (*ResourceRPCSubtypesResponse, error) {
	out := new(ResourceRPCSubtypesResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/ResourceRPCSubtypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) CancelOperation(ctx context.Context, in *CancelOperationRequest, opts ...grpc.CallOption) (*CancelOperationResponse, error) {
	out := new(CancelOperationResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/CancelOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) BlockForOperation(ctx context.Context, in *BlockForOperationRequest, opts ...grpc.CallOption) (*BlockForOperationResponse, error) {
	out := new(BlockForOperationResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/BlockForOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) DiscoverComponents(ctx context.Context, in *DiscoverComponentsRequest, opts ...grpc.CallOption) (*DiscoverComponentsResponse, error) {
	out := new(DiscoverComponentsResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/DiscoverComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) FrameSystemConfig(ctx context.Context, in *FrameSystemConfigRequest, opts ...grpc.CallOption) (*FrameSystemConfigResponse, error) {
	out := new(FrameSystemConfigResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/FrameSystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) TransformPose(ctx context.Context, in *TransformPoseRequest, opts ...grpc.CallOption) (*TransformPoseResponse, error) {
	out := new(TransformPoseResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/TransformPose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) TransformPCD(ctx context.Context, in *TransformPCDRequest, opts ...grpc.CallOption) (*TransformPCDResponse, error) {
	out := new(TransformPCDResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/TransformPCD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (physicalDeviceService_StreamStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &physicalDeviceService_ServiceDesc.Streams[0], "/viam.physicalDevice.v1.physicalDeviceService/StreamStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &physicalDeviceServiceStreamStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type physicalDeviceService_StreamStatusClient interface {
	Recv() (*StreamStatusResponse, error)
	grpc.ClientStream
}

type physicalDeviceServiceStreamStatusClient struct {
	grpc.ClientStream
}

func (x *physicalDeviceServiceStreamStatusClient) Recv() (*StreamStatusResponse, error) {
	m := new(StreamStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *physicalDeviceServiceClient) StopAll(ctx context.Context, in *StopAllRequest, opts ...grpc.CallOption) (*StopAllResponse, error) {
	out := new(StopAllResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/StopAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) SendSessionHeartbeat(ctx context.Context, in *SendSessionHeartbeatRequest, opts ...grpc.CallOption) (*SendSessionHeartbeatResponse, error) {
	out := new(SendSessionHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/SendSessionHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) GetCloudMetadata(ctx context.Context, in *GetCloudMetadataRequest, opts ...grpc.CallOption) (*GetCloudMetadataResponse, error) {
	out := new(GetCloudMetadataResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/GetCloudMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) RestartModule(ctx context.Context, in *RestartModuleRequest, opts ...grpc.CallOption) (*RestartModuleResponse, error) {
	out := new(RestartModuleResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/RestartModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalDeviceServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/viam.physicalDevice.v1.physicalDeviceService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// physicalDeviceServiceServer is the server API for physicalDeviceService service.
// All implementations must embed UnimplementedphysicalDeviceServiceServer
// for forward compatibility
type physicalDeviceServiceServer interface {
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error)
	// ResourceNames returns the list of all resources.
	ResourceNames(context.Context, *ResourceNamesRequest) (*ResourceNamesResponse, error)
	// ResourceRPCSubtypes returns the list of all resource types.
	ResourceRPCSubtypes(context.Context, *ResourceRPCSubtypesRequest) (*ResourceRPCSubtypesResponse, error)
	CancelOperation(context.Context, *CancelOperationRequest) (*CancelOperationResponse, error)
	BlockForOperation(context.Context, *BlockForOperationRequest) (*BlockForOperationResponse, error)
	// DiscoverComponents returns the list of discovered component configurations.
	DiscoverComponents(context.Context, *DiscoverComponentsRequest) (*DiscoverComponentsResponse, error)
	FrameSystemConfig(context.Context, *FrameSystemConfigRequest) (*FrameSystemConfigResponse, error)
	TransformPose(context.Context, *TransformPoseRequest) (*TransformPoseResponse, error)
	TransformPCD(context.Context, *TransformPCDRequest) (*TransformPCDResponse, error)
	// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
	StreamStatus(*StreamStatusRequest, physicalDeviceService_StreamStatusServer) error
	// StopAll will stop all current and outstanding operations for the physicalDevice and stops all actuators and movement
	StopAll(context.Context, *StopAllRequest) (*StopAllResponse, error)
	// StartSession creates a new session that expects at least one heartbeat within the returned window.
	// If the window lapses, any resources that have safety heart monitored methods, where this session was
	// the last caller on the resource, will be stopped.
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
	// SESSION_EXPIRED error will be returned.
	SendSessionHeartbeat(context.Context, *SendSessionHeartbeatRequest) (*SendSessionHeartbeatResponse, error)
	// Log sends logs to be logged by this physicalDevice. Currently used for module logging.
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// GetCloudMetadata returns app-related information about the physicalDevice.
	GetCloudMetadata(context.Context, *GetCloudMetadataRequest) (*GetCloudMetadataResponse, error)
	RestartModule(context.Context, *RestartModuleRequest) (*RestartModuleResponse, error)
	// Shutdown shuts down the physicalDevice.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedphysicalDeviceServiceServer()
}

// UnimplementedphysicalDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedphysicalDeviceServiceServer struct {
}

func (UnimplementedphysicalDeviceServiceServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) ResourceNames(context.Context, *ResourceNamesRequest) (*ResourceNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceNames not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) ResourceRPCSubtypes(context.Context, *ResourceRPCSubtypesRequest) (*ResourceRPCSubtypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceRPCSubtypes not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) CancelOperation(context.Context, *CancelOperationRequest) (*CancelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOperation not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) BlockForOperation(context.Context, *BlockForOperationRequest) (*BlockForOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockForOperation not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) DiscoverComponents(context.Context, *DiscoverComponentsRequest) (*DiscoverComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverComponents not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) FrameSystemConfig(context.Context, *FrameSystemConfigRequest) (*FrameSystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrameSystemConfig not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) TransformPose(context.Context, *TransformPoseRequest) (*TransformPoseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformPose not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) TransformPCD(context.Context, *TransformPCDRequest) (*TransformPCDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformPCD not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) StreamStatus(*StreamStatusRequest, physicalDeviceService_StreamStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) StopAll(context.Context, *StopAllRequest) (*StopAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAll not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) SendSessionHeartbeat(context.Context, *SendSessionHeartbeatRequest) (*SendSessionHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSessionHeartbeat not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) GetCloudMetadata(context.Context, *GetCloudMetadataRequest) (*GetCloudMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudMetadata not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) RestartModule(context.Context, *RestartModuleRequest) (*RestartModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartModule not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedphysicalDeviceServiceServer) mustEmbedUnimplementedphysicalDeviceServiceServer() {}

// UnsafephysicalDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to physicalDeviceServiceServer will
// result in compilation errors.
type UnsafephysicalDeviceServiceServer interface {
	mustEmbedUnimplementedphysicalDeviceServiceServer()
}

func RegisterphysicalDeviceServiceServer(s grpc.ServiceRegistrar, srv physicalDeviceServiceServer) {
	s.RegisterService(&physicalDeviceService_ServiceDesc, srv)
}

func _physicalDeviceService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_ResourceNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).ResourceNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/ResourceNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).ResourceNames(ctx, req.(*ResourceNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_ResourceRPCSubtypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRPCSubtypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).ResourceRPCSubtypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/ResourceRPCSubtypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).ResourceRPCSubtypes(ctx, req.(*ResourceRPCSubtypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_CancelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).CancelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/CancelOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).CancelOperation(ctx, req.(*CancelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_BlockForOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockForOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).BlockForOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/BlockForOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).BlockForOperation(ctx, req.(*BlockForOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_DiscoverComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).DiscoverComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/DiscoverComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).DiscoverComponents(ctx, req.(*DiscoverComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_FrameSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).FrameSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/FrameSystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).FrameSystemConfig(ctx, req.(*FrameSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_TransformPose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformPoseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).TransformPose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/TransformPose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).TransformPose(ctx, req.(*TransformPoseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_TransformPCD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformPCDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).TransformPCD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/TransformPCD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).TransformPCD(ctx, req.(*TransformPCDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(physicalDeviceServiceServer).StreamStatus(m, &physicalDeviceServiceStreamStatusServer{stream})
}

type physicalDeviceService_StreamStatusServer interface {
	Send(*StreamStatusResponse) error
	grpc.ServerStream
}

type physicalDeviceServiceStreamStatusServer struct {
	grpc.ServerStream
}

func (x *physicalDeviceServiceStreamStatusServer) Send(m *StreamStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _physicalDeviceService_StopAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).StopAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/StopAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).StopAll(ctx, req.(*StopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_SendSessionHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSessionHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).SendSessionHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/SendSessionHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).SendSessionHeartbeat(ctx, req.(*SendSessionHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_GetCloudMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).GetCloudMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/GetCloudMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).GetCloudMetadata(ctx, req.(*GetCloudMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_RestartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).RestartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/RestartModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).RestartModule(ctx, req.(*RestartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _physicalDeviceService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(physicalDeviceServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.physicalDevice.v1.physicalDeviceService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(physicalDeviceServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// physicalDeviceService_ServiceDesc is the grpc.ServiceDesc for physicalDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var physicalDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.physicalDevice.v1.physicalDeviceService",
	HandlerType: (*physicalDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOperations",
			Handler:    _physicalDeviceService_GetOperations_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _physicalDeviceService_GetSessions_Handler,
		},
		{
			MethodName: "ResourceNames",
			Handler:    _physicalDeviceService_ResourceNames_Handler,
		},
		{
			MethodName: "ResourceRPCSubtypes",
			Handler:    _physicalDeviceService_ResourceRPCSubtypes_Handler,
		},
		{
			MethodName: "CancelOperation",
			Handler:    _physicalDeviceService_CancelOperation_Handler,
		},
		{
			MethodName: "BlockForOperation",
			Handler:    _physicalDeviceService_BlockForOperation_Handler,
		},
		{
			MethodName: "DiscoverComponents",
			Handler:    _physicalDeviceService_DiscoverComponents_Handler,
		},
		{
			MethodName: "FrameSystemConfig",
			Handler:    _physicalDeviceService_FrameSystemConfig_Handler,
		},
		{
			MethodName: "TransformPose",
			Handler:    _physicalDeviceService_TransformPose_Handler,
		},
		{
			MethodName: "TransformPCD",
			Handler:    _physicalDeviceService_TransformPCD_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _physicalDeviceService_GetStatus_Handler,
		},
		{
			MethodName: "StopAll",
			Handler:    _physicalDeviceService_StopAll_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _physicalDeviceService_StartSession_Handler,
		},
		{
			MethodName: "SendSessionHeartbeat",
			Handler:    _physicalDeviceService_SendSessionHeartbeat_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _physicalDeviceService_Log_Handler,
		},
		{
			MethodName: "GetCloudMetadata",
			Handler:    _physicalDeviceService_GetCloudMetadata_Handler,
		},
		{
			MethodName: "RestartModule",
			Handler:    _physicalDeviceService_RestartModule_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _physicalDeviceService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _physicalDeviceService_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "physicalDevice/v1/physicalDevice.proto",
}
