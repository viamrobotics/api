// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: app/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppService_GetUserIDByEmail_FullMethodName                       = "/viam.app.v1.AppService/GetUserIDByEmail"
	AppService_CreateOrganization_FullMethodName                     = "/viam.app.v1.AppService/CreateOrganization"
	AppService_ListOrganizations_FullMethodName                      = "/viam.app.v1.AppService/ListOrganizations"
	AppService_GetOrganizationsWithAccessToLocation_FullMethodName   = "/viam.app.v1.AppService/GetOrganizationsWithAccessToLocation"
	AppService_ListOrganizationsByUser_FullMethodName                = "/viam.app.v1.AppService/ListOrganizationsByUser"
	AppService_GetOrganization_FullMethodName                        = "/viam.app.v1.AppService/GetOrganization"
	AppService_GetOrganizationNamespaceAvailability_FullMethodName   = "/viam.app.v1.AppService/GetOrganizationNamespaceAvailability"
	AppService_UpdateOrganization_FullMethodName                     = "/viam.app.v1.AppService/UpdateOrganization"
	AppService_DeleteOrganization_FullMethodName                     = "/viam.app.v1.AppService/DeleteOrganization"
	AppService_ListOrganizationMembers_FullMethodName                = "/viam.app.v1.AppService/ListOrganizationMembers"
	AppService_CreateOrganizationInvite_FullMethodName               = "/viam.app.v1.AppService/CreateOrganizationInvite"
	AppService_UpdateOrganizationInviteAuthorizations_FullMethodName = "/viam.app.v1.AppService/UpdateOrganizationInviteAuthorizations"
	AppService_DeleteOrganizationMember_FullMethodName               = "/viam.app.v1.AppService/DeleteOrganizationMember"
	AppService_DeleteOrganizationInvite_FullMethodName               = "/viam.app.v1.AppService/DeleteOrganizationInvite"
	AppService_ResendOrganizationInvite_FullMethodName               = "/viam.app.v1.AppService/ResendOrganizationInvite"
	AppService_EnableBillingService_FullMethodName                   = "/viam.app.v1.AppService/EnableBillingService"
	AppService_DisableBillingService_FullMethodName                  = "/viam.app.v1.AppService/DisableBillingService"
	AppService_UpdateBillingService_FullMethodName                   = "/viam.app.v1.AppService/UpdateBillingService"
	AppService_OrganizationSetSupportEmail_FullMethodName            = "/viam.app.v1.AppService/OrganizationSetSupportEmail"
	AppService_OrganizationGetSupportEmail_FullMethodName            = "/viam.app.v1.AppService/OrganizationGetSupportEmail"
	AppService_CreateLocation_FullMethodName                         = "/viam.app.v1.AppService/CreateLocation"
	AppService_GetLocation_FullMethodName                            = "/viam.app.v1.AppService/GetLocation"
	AppService_UpdateLocation_FullMethodName                         = "/viam.app.v1.AppService/UpdateLocation"
	AppService_DeleteLocation_FullMethodName                         = "/viam.app.v1.AppService/DeleteLocation"
	AppService_ListLocations_FullMethodName                          = "/viam.app.v1.AppService/ListLocations"
	AppService_ShareLocation_FullMethodName                          = "/viam.app.v1.AppService/ShareLocation"
	AppService_UnshareLocation_FullMethodName                        = "/viam.app.v1.AppService/UnshareLocation"
	AppService_LocationAuth_FullMethodName                           = "/viam.app.v1.AppService/LocationAuth"
	AppService_CreateLocationSecret_FullMethodName                   = "/viam.app.v1.AppService/CreateLocationSecret"
	AppService_DeleteLocationSecret_FullMethodName                   = "/viam.app.v1.AppService/DeleteLocationSecret"
	AppService_GetRobot_FullMethodName                               = "/viam.app.v1.AppService/GetRobot"
	AppService_GetRoverRentalRobots_FullMethodName                   = "/viam.app.v1.AppService/GetRoverRentalRobots"
	AppService_GetRobotParts_FullMethodName                          = "/viam.app.v1.AppService/GetRobotParts"
	AppService_GetRobotPart_FullMethodName                           = "/viam.app.v1.AppService/GetRobotPart"
	AppService_GetRobotPartLogs_FullMethodName                       = "/viam.app.v1.AppService/GetRobotPartLogs"
	AppService_TailRobotPartLogs_FullMethodName                      = "/viam.app.v1.AppService/TailRobotPartLogs"
	AppService_GetRobotPartHistory_FullMethodName                    = "/viam.app.v1.AppService/GetRobotPartHistory"
	AppService_UpdateRobotPart_FullMethodName                        = "/viam.app.v1.AppService/UpdateRobotPart"
	AppService_NewRobotPart_FullMethodName                           = "/viam.app.v1.AppService/NewRobotPart"
	AppService_DeleteRobotPart_FullMethodName                        = "/viam.app.v1.AppService/DeleteRobotPart"
	AppService_GetRobotAPIKeys_FullMethodName                        = "/viam.app.v1.AppService/GetRobotAPIKeys"
	AppService_MarkPartAsMain_FullMethodName                         = "/viam.app.v1.AppService/MarkPartAsMain"
	AppService_MarkPartForRestart_FullMethodName                     = "/viam.app.v1.AppService/MarkPartForRestart"
	AppService_CreateRobotPartSecret_FullMethodName                  = "/viam.app.v1.AppService/CreateRobotPartSecret"
	AppService_DeleteRobotPartSecret_FullMethodName                  = "/viam.app.v1.AppService/DeleteRobotPartSecret"
	AppService_ListRobots_FullMethodName                             = "/viam.app.v1.AppService/ListRobots"
	AppService_NewRobot_FullMethodName                               = "/viam.app.v1.AppService/NewRobot"
	AppService_UpdateRobot_FullMethodName                            = "/viam.app.v1.AppService/UpdateRobot"
	AppService_DeleteRobot_FullMethodName                            = "/viam.app.v1.AppService/DeleteRobot"
	AppService_ListFragments_FullMethodName                          = "/viam.app.v1.AppService/ListFragments"
	AppService_GetFragment_FullMethodName                            = "/viam.app.v1.AppService/GetFragment"
	AppService_CreateFragment_FullMethodName                         = "/viam.app.v1.AppService/CreateFragment"
	AppService_UpdateFragment_FullMethodName                         = "/viam.app.v1.AppService/UpdateFragment"
	AppService_DeleteFragment_FullMethodName                         = "/viam.app.v1.AppService/DeleteFragment"
	AppService_ListMachineFragments_FullMethodName                   = "/viam.app.v1.AppService/ListMachineFragments"
	AppService_GetFragmentHistory_FullMethodName                     = "/viam.app.v1.AppService/GetFragmentHistory"
	AppService_AddRole_FullMethodName                                = "/viam.app.v1.AppService/AddRole"
	AppService_RemoveRole_FullMethodName                             = "/viam.app.v1.AppService/RemoveRole"
	AppService_ChangeRole_FullMethodName                             = "/viam.app.v1.AppService/ChangeRole"
	AppService_ListAuthorizations_FullMethodName                     = "/viam.app.v1.AppService/ListAuthorizations"
	AppService_CheckPermissions_FullMethodName                       = "/viam.app.v1.AppService/CheckPermissions"
	AppService_GetRegistryItem_FullMethodName                        = "/viam.app.v1.AppService/GetRegistryItem"
	AppService_CreateRegistryItem_FullMethodName                     = "/viam.app.v1.AppService/CreateRegistryItem"
	AppService_UpdateRegistryItem_FullMethodName                     = "/viam.app.v1.AppService/UpdateRegistryItem"
	AppService_ListRegistryItems_FullMethodName                      = "/viam.app.v1.AppService/ListRegistryItems"
	AppService_DeleteRegistryItem_FullMethodName                     = "/viam.app.v1.AppService/DeleteRegistryItem"
	AppService_TransferRegistryItem_FullMethodName                   = "/viam.app.v1.AppService/TransferRegistryItem"
	AppService_CreateModule_FullMethodName                           = "/viam.app.v1.AppService/CreateModule"
	AppService_UpdateModule_FullMethodName                           = "/viam.app.v1.AppService/UpdateModule"
	AppService_UploadModuleFile_FullMethodName                       = "/viam.app.v1.AppService/UploadModuleFile"
	AppService_GetModule_FullMethodName                              = "/viam.app.v1.AppService/GetModule"
	AppService_ListModules_FullMethodName                            = "/viam.app.v1.AppService/ListModules"
	AppService_CreateKey_FullMethodName                              = "/viam.app.v1.AppService/CreateKey"
	AppService_DeleteKey_FullMethodName                              = "/viam.app.v1.AppService/DeleteKey"
	AppService_ListKeys_FullMethodName                               = "/viam.app.v1.AppService/ListKeys"
	AppService_RenameKey_FullMethodName                              = "/viam.app.v1.AppService/RenameKey"
	AppService_RotateKey_FullMethodName                              = "/viam.app.v1.AppService/RotateKey"
	AppService_CreateKeyFromExistingKeyAuthorizations_FullMethodName = "/viam.app.v1.AppService/CreateKeyFromExistingKeyAuthorizations"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// Get the id of the user with the email
	GetUserIDByEmail(ctx context.Context, in *GetUserIDByEmailRequest, opts ...grpc.CallOption) (*GetUserIDByEmailResponse, error)
	// Create a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// List organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Get all organizations that have access to a location.
	GetOrganizationsWithAccessToLocation(ctx context.Context, in *GetOrganizationsWithAccessToLocationRequest, opts ...grpc.CallOption) (*GetOrganizationsWithAccessToLocationResponse, error)
	// List the organizations a user belongs to
	ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error)
	// Get an organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Checks for namespace availablity throughout all orgs.
	GetOrganizationNamespaceAvailability(ctx context.Context, in *GetOrganizationNamespaceAvailabilityRequest, opts ...grpc.CallOption) (*GetOrganizationNamespaceAvailabilityResponse, error)
	// Update an organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// List all members of an organization and all invited members to the organization.
	ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error)
	// Create an organization invite to an organization
	CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error)
	// Update the authorizations attached to an organization invite
	UpdateOrganizationInviteAuthorizations(ctx context.Context, in *UpdateOrganizationInviteAuthorizationsRequest, opts ...grpc.CallOption) (*UpdateOrganizationInviteAuthorizationsResponse, error)
	// Delete an organization member from an organization
	DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*DeleteOrganizationMemberResponse, error)
	// Delete an organization invite
	DeleteOrganizationInvite(ctx context.Context, in *DeleteOrganizationInviteRequest, opts ...grpc.CallOption) (*DeleteOrganizationInviteResponse, error)
	// Resend an organization invite
	ResendOrganizationInvite(ctx context.Context, in *ResendOrganizationInviteRequest, opts ...grpc.CallOption) (*ResendOrganizationInviteResponse, error)
	EnableBillingService(ctx context.Context, in *EnableBillingServiceRequest, opts ...grpc.CallOption) (*EnableBillingServiceResponse, error)
	DisableBillingService(ctx context.Context, in *DisableBillingServiceRequest, opts ...grpc.CallOption) (*DisableBillingServiceResponse, error)
	UpdateBillingService(ctx context.Context, in *UpdateBillingServiceRequest, opts ...grpc.CallOption) (*UpdateBillingServiceResponse, error)
	OrganizationSetSupportEmail(ctx context.Context, in *OrganizationSetSupportEmailRequest, opts ...grpc.CallOption) (*OrganizationSetSupportEmailResponse, error)
	OrganizationGetSupportEmail(ctx context.Context, in *OrganizationGetSupportEmailRequest, opts ...grpc.CallOption) (*OrganizationGetSupportEmailResponse, error)
	// Create a location
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error)
	// Get a location
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
	// Update a location
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	// Delete a location
	DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error)
	// Get a list of locations
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
	// Share a location with an organization
	ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error)
	// Stop sharing a location with an organization
	UnshareLocation(ctx context.Context, in *UnshareLocationRequest, opts ...grpc.CallOption) (*UnshareLocationResponse, error)
	// Get a location's authorization secrets
	LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error)
	// Create a new generated Secret in the Location.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateLocationSecret(ctx context.Context, in *CreateLocationSecretRequest, opts ...grpc.CallOption) (*CreateLocationSecretResponse, error)
	// Delete a Secret from the Location.
	DeleteLocationSecret(ctx context.Context, in *DeleteLocationSecretRequest, opts ...grpc.CallOption) (*DeleteLocationSecretResponse, error)
	// Get a specific robot by ID
	GetRobot(ctx context.Context, in *GetRobotRequest, opts ...grpc.CallOption) (*GetRobotResponse, error)
	// Get Rover Rental Location Robots
	GetRoverRentalRobots(ctx context.Context, in *GetRoverRentalRobotsRequest, opts ...grpc.CallOption) (*GetRoverRentalRobotsResponse, error)
	GetRobotParts(ctx context.Context, in *GetRobotPartsRequest, opts ...grpc.CallOption) (*GetRobotPartsResponse, error)
	// Get a specific robot part by ID
	GetRobotPart(ctx context.Context, in *GetRobotPartRequest, opts ...grpc.CallOption) (*GetRobotPartResponse, error)
	GetRobotPartLogs(ctx context.Context, in *GetRobotPartLogsRequest, opts ...grpc.CallOption) (*GetRobotPartLogsResponse, error)
	TailRobotPartLogs(ctx context.Context, in *TailRobotPartLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TailRobotPartLogsResponse], error)
	// Get a specific robot part histy by ID
	GetRobotPartHistory(ctx context.Context, in *GetRobotPartHistoryRequest, opts ...grpc.CallOption) (*GetRobotPartHistoryResponse, error)
	// Update a robot
	UpdateRobotPart(ctx context.Context, in *UpdateRobotPartRequest, opts ...grpc.CallOption) (*UpdateRobotPartResponse, error)
	// Create a new robot part
	NewRobotPart(ctx context.Context, in *NewRobotPartRequest, opts ...grpc.CallOption) (*NewRobotPartResponse, error)
	// Delete a robot part
	DeleteRobotPart(ctx context.Context, in *DeleteRobotPartRequest, opts ...grpc.CallOption) (*DeleteRobotPartResponse, error)
	// Gets the Robot API Keys for the robot
	GetRobotAPIKeys(ctx context.Context, in *GetRobotAPIKeysRequest, opts ...grpc.CallOption) (*GetRobotAPIKeysResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error)
	// Marks part for restart. Once the robot part checks-in with the app the flag
	// is reset on the robot part. Calling this multiple times before a robot part
	// checks-in has no affect.
	// Note: This API may be removed in the near future.
	// TODO(APP-388): Remove
	MarkPartForRestart(ctx context.Context, in *MarkPartForRestartRequest, opts ...grpc.CallOption) (*MarkPartForRestartResponse, error)
	// Create a new generated Secret in the Robot Part.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateRobotPartSecret(ctx context.Context, in *CreateRobotPartSecretRequest, opts ...grpc.CallOption) (*CreateRobotPartSecretResponse, error)
	// Delete a Secret from the RobotPart.
	DeleteRobotPartSecret(ctx context.Context, in *DeleteRobotPartSecretRequest, opts ...grpc.CallOption) (*DeleteRobotPartSecretResponse, error)
	// Get a list of robots
	ListRobots(ctx context.Context, in *ListRobotsRequest, opts ...grpc.CallOption) (*ListRobotsResponse, error)
	// NewRobot creates a new robot
	NewRobot(ctx context.Context, in *NewRobotRequest, opts ...grpc.CallOption) (*NewRobotResponse, error)
	// UpdateRobot updates a robot
	UpdateRobot(ctx context.Context, in *UpdateRobotRequest, opts ...grpc.CallOption) (*UpdateRobotResponse, error)
	// DeleteRobot deletes a robot
	DeleteRobot(ctx context.Context, in *DeleteRobotRequest, opts ...grpc.CallOption) (*DeleteRobotResponse, error)
	// Gets a list of fragments
	ListFragments(ctx context.Context, in *ListFragmentsRequest, opts ...grpc.CallOption) (*ListFragmentsResponse, error)
	// Gets a single fragment
	GetFragment(ctx context.Context, in *GetFragmentRequest, opts ...grpc.CallOption) (*GetFragmentResponse, error)
	// Creates a fragment
	CreateFragment(ctx context.Context, in *CreateFragmentRequest, opts ...grpc.CallOption) (*CreateFragmentResponse, error)
	// Updates a fragment
	UpdateFragment(ctx context.Context, in *UpdateFragmentRequest, opts ...grpc.CallOption) (*UpdateFragmentResponse, error)
	// Deletes a fragment
	DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error)
	// Gets top level and nested fragments for a machine, as well as any other specified fragment ids
	ListMachineFragments(ctx context.Context, in *ListMachineFragmentsRequest, opts ...grpc.CallOption) (*ListMachineFragmentsResponse, error)
	// Gets fragment history
	GetFragmentHistory(ctx context.Context, in *GetFragmentHistoryRequest, opts ...grpc.CallOption) (*GetFragmentHistoryResponse, error)
	// Creates an IdentityAuthorization
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	// Deletes an IdentityAuthorization
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error)
	// Changes an IdentityAuthorization to a new IdentityAuthorization
	ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error)
	// Returns all authorization roles for a given resource
	ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error)
	// Validates a permission for the current user
	CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error)
	GetRegistryItem(ctx context.Context, in *GetRegistryItemRequest, opts ...grpc.CallOption) (*GetRegistryItemResponse, error)
	CreateRegistryItem(ctx context.Context, in *CreateRegistryItemRequest, opts ...grpc.CallOption) (*CreateRegistryItemResponse, error)
	UpdateRegistryItem(ctx context.Context, in *UpdateRegistryItemRequest, opts ...grpc.CallOption) (*UpdateRegistryItemResponse, error)
	ListRegistryItems(ctx context.Context, in *ListRegistryItemsRequest, opts ...grpc.CallOption) (*ListRegistryItemsResponse, error)
	DeleteRegistryItem(ctx context.Context, in *DeleteRegistryItemRequest, opts ...grpc.CallOption) (*DeleteRegistryItemResponse, error)
	TransferRegistryItem(ctx context.Context, in *TransferRegistryItemRequest, opts ...grpc.CallOption) (*TransferRegistryItemResponse, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error)
	UploadModuleFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadModuleFileRequest, UploadModuleFileResponse], error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	RenameKey(ctx context.Context, in *RenameKeyRequest, opts ...grpc.CallOption) (*RenameKeyResponse, error)
	RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error)
	CreateKeyFromExistingKeyAuthorizations(ctx context.Context, in *CreateKeyFromExistingKeyAuthorizationsRequest, opts ...grpc.CallOption) (*CreateKeyFromExistingKeyAuthorizationsResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetUserIDByEmail(ctx context.Context, in *GetUserIDByEmailRequest, opts ...grpc.CallOption) (*GetUserIDByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIDByEmailResponse)
	err := c.cc.Invoke(ctx, AppService_GetUserIDByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, AppService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, AppService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganizationsWithAccessToLocation(ctx context.Context, in *GetOrganizationsWithAccessToLocationRequest, opts ...grpc.CallOption) (*GetOrganizationsWithAccessToLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationsWithAccessToLocationResponse)
	err := c.cc.Invoke(ctx, AppService_GetOrganizationsWithAccessToLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsByUserResponse)
	err := c.cc.Invoke(ctx, AppService_ListOrganizationsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, AppService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOrganizationNamespaceAvailability(ctx context.Context, in *GetOrganizationNamespaceAvailabilityRequest, opts ...grpc.CallOption) (*GetOrganizationNamespaceAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationNamespaceAvailabilityResponse)
	err := c.cc.Invoke(ctx, AppService_GetOrganizationNamespaceAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListOrganizationMembers(ctx context.Context, in *ListOrganizationMembersRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, AppService_ListOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, AppService_CreateOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateOrganizationInviteAuthorizations(ctx context.Context, in *UpdateOrganizationInviteAuthorizationsRequest, opts ...grpc.CallOption) (*UpdateOrganizationInviteAuthorizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationInviteAuthorizationsResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateOrganizationInviteAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganizationMember(ctx context.Context, in *DeleteOrganizationMemberRequest, opts ...grpc.CallOption) (*DeleteOrganizationMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteOrganizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteOrganizationInvite(ctx context.Context, in *DeleteOrganizationInviteRequest, opts ...grpc.CallOption) (*DeleteOrganizationInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ResendOrganizationInvite(ctx context.Context, in *ResendOrganizationInviteRequest, opts ...grpc.CallOption) (*ResendOrganizationInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, AppService_ResendOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) EnableBillingService(ctx context.Context, in *EnableBillingServiceRequest, opts ...grpc.CallOption) (*EnableBillingServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableBillingServiceResponse)
	err := c.cc.Invoke(ctx, AppService_EnableBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DisableBillingService(ctx context.Context, in *DisableBillingServiceRequest, opts ...grpc.CallOption) (*DisableBillingServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableBillingServiceResponse)
	err := c.cc.Invoke(ctx, AppService_DisableBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateBillingService(ctx context.Context, in *UpdateBillingServiceRequest, opts ...grpc.CallOption) (*UpdateBillingServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBillingServiceResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) OrganizationSetSupportEmail(ctx context.Context, in *OrganizationSetSupportEmailRequest, opts ...grpc.CallOption) (*OrganizationSetSupportEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationSetSupportEmailResponse)
	err := c.cc.Invoke(ctx, AppService_OrganizationSetSupportEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) OrganizationGetSupportEmail(ctx context.Context, in *OrganizationGetSupportEmailRequest, opts ...grpc.CallOption) (*OrganizationGetSupportEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrganizationGetSupportEmailResponse)
	err := c.cc.Invoke(ctx, AppService_OrganizationGetSupportEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*CreateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationResponse)
	err := c.cc.Invoke(ctx, AppService_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, AppService_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocationResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, AppService_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ShareLocation(ctx context.Context, in *ShareLocationRequest, opts ...grpc.CallOption) (*ShareLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareLocationResponse)
	err := c.cc.Invoke(ctx, AppService_ShareLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UnshareLocation(ctx context.Context, in *UnshareLocationRequest, opts ...grpc.CallOption) (*UnshareLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnshareLocationResponse)
	err := c.cc.Invoke(ctx, AppService_UnshareLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationAuthResponse)
	err := c.cc.Invoke(ctx, AppService_LocationAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateLocationSecret(ctx context.Context, in *CreateLocationSecretRequest, opts ...grpc.CallOption) (*CreateLocationSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocationSecretResponse)
	err := c.cc.Invoke(ctx, AppService_CreateLocationSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteLocationSecret(ctx context.Context, in *DeleteLocationSecretRequest, opts ...grpc.CallOption) (*DeleteLocationSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocationSecretResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteLocationSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRobot(ctx context.Context, in *GetRobotRequest, opts ...grpc.CallOption) (*GetRobotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRoverRentalRobots(ctx context.Context, in *GetRoverRentalRobotsRequest, opts ...grpc.CallOption) (*GetRoverRentalRobotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoverRentalRobotsResponse)
	err := c.cc.Invoke(ctx, AppService_GetRoverRentalRobots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRobotParts(ctx context.Context, in *GetRobotPartsRequest, opts ...grpc.CallOption) (*GetRobotPartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotPartsResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobotParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRobotPart(ctx context.Context, in *GetRobotPartRequest, opts ...grpc.CallOption) (*GetRobotPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotPartResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobotPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRobotPartLogs(ctx context.Context, in *GetRobotPartLogsRequest, opts ...grpc.CallOption) (*GetRobotPartLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotPartLogsResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobotPartLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) TailRobotPartLogs(ctx context.Context, in *TailRobotPartLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TailRobotPartLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[0], AppService_TailRobotPartLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TailRobotPartLogsRequest, TailRobotPartLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppService_TailRobotPartLogsClient = grpc.ServerStreamingClient[TailRobotPartLogsResponse]

func (c *appServiceClient) GetRobotPartHistory(ctx context.Context, in *GetRobotPartHistoryRequest, opts ...grpc.CallOption) (*GetRobotPartHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotPartHistoryResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobotPartHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateRobotPart(ctx context.Context, in *UpdateRobotPartRequest, opts ...grpc.CallOption) (*UpdateRobotPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRobotPartResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateRobotPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) NewRobotPart(ctx context.Context, in *NewRobotPartRequest, opts ...grpc.CallOption) (*NewRobotPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewRobotPartResponse)
	err := c.cc.Invoke(ctx, AppService_NewRobotPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteRobotPart(ctx context.Context, in *DeleteRobotPartRequest, opts ...grpc.CallOption) (*DeleteRobotPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRobotPartResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteRobotPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRobotAPIKeys(ctx context.Context, in *GetRobotAPIKeysRequest, opts ...grpc.CallOption) (*GetRobotAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRobotAPIKeysResponse)
	err := c.cc.Invoke(ctx, AppService_GetRobotAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkPartAsMainResponse)
	err := c.cc.Invoke(ctx, AppService_MarkPartAsMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) MarkPartForRestart(ctx context.Context, in *MarkPartForRestartRequest, opts ...grpc.CallOption) (*MarkPartForRestartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkPartForRestartResponse)
	err := c.cc.Invoke(ctx, AppService_MarkPartForRestart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateRobotPartSecret(ctx context.Context, in *CreateRobotPartSecretRequest, opts ...grpc.CallOption) (*CreateRobotPartSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRobotPartSecretResponse)
	err := c.cc.Invoke(ctx, AppService_CreateRobotPartSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteRobotPartSecret(ctx context.Context, in *DeleteRobotPartSecretRequest, opts ...grpc.CallOption) (*DeleteRobotPartSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRobotPartSecretResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteRobotPartSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListRobots(ctx context.Context, in *ListRobotsRequest, opts ...grpc.CallOption) (*ListRobotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRobotsResponse)
	err := c.cc.Invoke(ctx, AppService_ListRobots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) NewRobot(ctx context.Context, in *NewRobotRequest, opts ...grpc.CallOption) (*NewRobotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewRobotResponse)
	err := c.cc.Invoke(ctx, AppService_NewRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateRobot(ctx context.Context, in *UpdateRobotRequest, opts ...grpc.CallOption) (*UpdateRobotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRobotResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteRobot(ctx context.Context, in *DeleteRobotRequest, opts ...grpc.CallOption) (*DeleteRobotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRobotResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListFragments(ctx context.Context, in *ListFragmentsRequest, opts ...grpc.CallOption) (*ListFragmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFragmentsResponse)
	err := c.cc.Invoke(ctx, AppService_ListFragments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetFragment(ctx context.Context, in *GetFragmentRequest, opts ...grpc.CallOption) (*GetFragmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFragmentResponse)
	err := c.cc.Invoke(ctx, AppService_GetFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateFragment(ctx context.Context, in *CreateFragmentRequest, opts ...grpc.CallOption) (*CreateFragmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFragmentResponse)
	err := c.cc.Invoke(ctx, AppService_CreateFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateFragment(ctx context.Context, in *UpdateFragmentRequest, opts ...grpc.CallOption) (*UpdateFragmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFragmentResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFragmentResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListMachineFragments(ctx context.Context, in *ListMachineFragmentsRequest, opts ...grpc.CallOption) (*ListMachineFragmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineFragmentsResponse)
	err := c.cc.Invoke(ctx, AppService_ListMachineFragments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetFragmentHistory(ctx context.Context, in *GetFragmentHistoryRequest, opts ...grpc.CallOption) (*GetFragmentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFragmentHistoryResponse)
	err := c.cc.Invoke(ctx, AppService_GetFragmentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRoleResponse)
	err := c.cc.Invoke(ctx, AppService_AddRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRoleResponse)
	err := c.cc.Invoke(ctx, AppService_RemoveRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeRoleResponse)
	err := c.cc.Invoke(ctx, AppService_ChangeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorizationsResponse)
	err := c.cc.Invoke(ctx, AppService_ListAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionsResponse)
	err := c.cc.Invoke(ctx, AppService_CheckPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetRegistryItem(ctx context.Context, in *GetRegistryItemRequest, opts ...grpc.CallOption) (*GetRegistryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegistryItemResponse)
	err := c.cc.Invoke(ctx, AppService_GetRegistryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateRegistryItem(ctx context.Context, in *CreateRegistryItemRequest, opts ...grpc.CallOption) (*CreateRegistryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRegistryItemResponse)
	err := c.cc.Invoke(ctx, AppService_CreateRegistryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateRegistryItem(ctx context.Context, in *UpdateRegistryItemRequest, opts ...grpc.CallOption) (*UpdateRegistryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRegistryItemResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateRegistryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListRegistryItems(ctx context.Context, in *ListRegistryItemsRequest, opts ...grpc.CallOption) (*ListRegistryItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegistryItemsResponse)
	err := c.cc.Invoke(ctx, AppService_ListRegistryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteRegistryItem(ctx context.Context, in *DeleteRegistryItemRequest, opts ...grpc.CallOption) (*DeleteRegistryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRegistryItemResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteRegistryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) TransferRegistryItem(ctx context.Context, in *TransferRegistryItemRequest, opts ...grpc.CallOption) (*TransferRegistryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferRegistryItemResponse)
	err := c.cc.Invoke(ctx, AppService_TransferRegistryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, AppService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UploadModuleFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadModuleFileRequest, UploadModuleFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[1], AppService_UploadModuleFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadModuleFileRequest, UploadModuleFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppService_UploadModuleFileClient = grpc.ClientStreamingClient[UploadModuleFileRequest, UploadModuleFileResponse]

func (c *appServiceClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModuleResponse)
	err := c.cc.Invoke(ctx, AppService_GetModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, AppService_ListModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, AppService_CreateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, AppService_ListKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RenameKey(ctx context.Context, in *RenameKeyRequest, opts ...grpc.CallOption) (*RenameKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameKeyResponse)
	err := c.cc.Invoke(ctx, AppService_RenameKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateKeyResponse)
	err := c.cc.Invoke(ctx, AppService_RotateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateKeyFromExistingKeyAuthorizations(ctx context.Context, in *CreateKeyFromExistingKeyAuthorizationsRequest, opts ...grpc.CallOption) (*CreateKeyFromExistingKeyAuthorizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyFromExistingKeyAuthorizationsResponse)
	err := c.cc.Invoke(ctx, AppService_CreateKeyFromExistingKeyAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility.
type AppServiceServer interface {
	// Get the id of the user with the email
	GetUserIDByEmail(context.Context, *GetUserIDByEmailRequest) (*GetUserIDByEmailResponse, error)
	// Create a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// List organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// Get all organizations that have access to a location.
	GetOrganizationsWithAccessToLocation(context.Context, *GetOrganizationsWithAccessToLocationRequest) (*GetOrganizationsWithAccessToLocationResponse, error)
	// List the organizations a user belongs to
	ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error)
	// Get an organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// Checks for namespace availablity throughout all orgs.
	GetOrganizationNamespaceAvailability(context.Context, *GetOrganizationNamespaceAvailabilityRequest) (*GetOrganizationNamespaceAvailabilityResponse, error)
	// Update an organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Delete an organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// List all members of an organization and all invited members to the organization.
	ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error)
	// Create an organization invite to an organization
	CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error)
	// Update the authorizations attached to an organization invite
	UpdateOrganizationInviteAuthorizations(context.Context, *UpdateOrganizationInviteAuthorizationsRequest) (*UpdateOrganizationInviteAuthorizationsResponse, error)
	// Delete an organization member from an organization
	DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*DeleteOrganizationMemberResponse, error)
	// Delete an organization invite
	DeleteOrganizationInvite(context.Context, *DeleteOrganizationInviteRequest) (*DeleteOrganizationInviteResponse, error)
	// Resend an organization invite
	ResendOrganizationInvite(context.Context, *ResendOrganizationInviteRequest) (*ResendOrganizationInviteResponse, error)
	EnableBillingService(context.Context, *EnableBillingServiceRequest) (*EnableBillingServiceResponse, error)
	DisableBillingService(context.Context, *DisableBillingServiceRequest) (*DisableBillingServiceResponse, error)
	UpdateBillingService(context.Context, *UpdateBillingServiceRequest) (*UpdateBillingServiceResponse, error)
	OrganizationSetSupportEmail(context.Context, *OrganizationSetSupportEmailRequest) (*OrganizationSetSupportEmailResponse, error)
	OrganizationGetSupportEmail(context.Context, *OrganizationGetSupportEmailRequest) (*OrganizationGetSupportEmailResponse, error)
	// Create a location
	CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error)
	// Get a location
	GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	// Update a location
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	// Delete a location
	DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error)
	// Get a list of locations
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
	// Share a location with an organization
	ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error)
	// Stop sharing a location with an organization
	UnshareLocation(context.Context, *UnshareLocationRequest) (*UnshareLocationResponse, error)
	// Get a location's authorization secrets
	LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error)
	// Create a new generated Secret in the Location.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateLocationSecret(context.Context, *CreateLocationSecretRequest) (*CreateLocationSecretResponse, error)
	// Delete a Secret from the Location.
	DeleteLocationSecret(context.Context, *DeleteLocationSecretRequest) (*DeleteLocationSecretResponse, error)
	// Get a specific robot by ID
	GetRobot(context.Context, *GetRobotRequest) (*GetRobotResponse, error)
	// Get Rover Rental Location Robots
	GetRoverRentalRobots(context.Context, *GetRoverRentalRobotsRequest) (*GetRoverRentalRobotsResponse, error)
	GetRobotParts(context.Context, *GetRobotPartsRequest) (*GetRobotPartsResponse, error)
	// Get a specific robot part by ID
	GetRobotPart(context.Context, *GetRobotPartRequest) (*GetRobotPartResponse, error)
	GetRobotPartLogs(context.Context, *GetRobotPartLogsRequest) (*GetRobotPartLogsResponse, error)
	TailRobotPartLogs(*TailRobotPartLogsRequest, grpc.ServerStreamingServer[TailRobotPartLogsResponse]) error
	// Get a specific robot part histy by ID
	GetRobotPartHistory(context.Context, *GetRobotPartHistoryRequest) (*GetRobotPartHistoryResponse, error)
	// Update a robot
	UpdateRobotPart(context.Context, *UpdateRobotPartRequest) (*UpdateRobotPartResponse, error)
	// Create a new robot part
	NewRobotPart(context.Context, *NewRobotPartRequest) (*NewRobotPartResponse, error)
	// Delete a robot part
	DeleteRobotPart(context.Context, *DeleteRobotPartRequest) (*DeleteRobotPartResponse, error)
	// Gets the Robot API Keys for the robot
	GetRobotAPIKeys(context.Context, *GetRobotAPIKeysRequest) (*GetRobotAPIKeysResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error)
	// Marks part for restart. Once the robot part checks-in with the app the flag
	// is reset on the robot part. Calling this multiple times before a robot part
	// checks-in has no affect.
	// Note: This API may be removed in the near future.
	// TODO(APP-388): Remove
	MarkPartForRestart(context.Context, *MarkPartForRestartRequest) (*MarkPartForRestartResponse, error)
	// Create a new generated Secret in the Robot Part.
	//   - Succeeds if there are no more than 2 active secrets after creation.
	CreateRobotPartSecret(context.Context, *CreateRobotPartSecretRequest) (*CreateRobotPartSecretResponse, error)
	// Delete a Secret from the RobotPart.
	DeleteRobotPartSecret(context.Context, *DeleteRobotPartSecretRequest) (*DeleteRobotPartSecretResponse, error)
	// Get a list of robots
	ListRobots(context.Context, *ListRobotsRequest) (*ListRobotsResponse, error)
	// NewRobot creates a new robot
	NewRobot(context.Context, *NewRobotRequest) (*NewRobotResponse, error)
	// UpdateRobot updates a robot
	UpdateRobot(context.Context, *UpdateRobotRequest) (*UpdateRobotResponse, error)
	// DeleteRobot deletes a robot
	DeleteRobot(context.Context, *DeleteRobotRequest) (*DeleteRobotResponse, error)
	// Gets a list of fragments
	ListFragments(context.Context, *ListFragmentsRequest) (*ListFragmentsResponse, error)
	// Gets a single fragment
	GetFragment(context.Context, *GetFragmentRequest) (*GetFragmentResponse, error)
	// Creates a fragment
	CreateFragment(context.Context, *CreateFragmentRequest) (*CreateFragmentResponse, error)
	// Updates a fragment
	UpdateFragment(context.Context, *UpdateFragmentRequest) (*UpdateFragmentResponse, error)
	// Deletes a fragment
	DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error)
	// Gets top level and nested fragments for a machine, as well as any other specified fragment ids
	ListMachineFragments(context.Context, *ListMachineFragmentsRequest) (*ListMachineFragmentsResponse, error)
	// Gets fragment history
	GetFragmentHistory(context.Context, *GetFragmentHistoryRequest) (*GetFragmentHistoryResponse, error)
	// Creates an IdentityAuthorization
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	// Deletes an IdentityAuthorization
	RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error)
	// Changes an IdentityAuthorization to a new IdentityAuthorization
	ChangeRole(context.Context, *ChangeRoleRequest) (*ChangeRoleResponse, error)
	// Returns all authorization roles for a given resource
	ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error)
	// Validates a permission for the current user
	CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error)
	GetRegistryItem(context.Context, *GetRegistryItemRequest) (*GetRegistryItemResponse, error)
	CreateRegistryItem(context.Context, *CreateRegistryItemRequest) (*CreateRegistryItemResponse, error)
	UpdateRegistryItem(context.Context, *UpdateRegistryItemRequest) (*UpdateRegistryItemResponse, error)
	ListRegistryItems(context.Context, *ListRegistryItemsRequest) (*ListRegistryItemsResponse, error)
	DeleteRegistryItem(context.Context, *DeleteRegistryItemRequest) (*DeleteRegistryItemResponse, error)
	TransferRegistryItem(context.Context, *TransferRegistryItemRequest) (*TransferRegistryItemResponse, error)
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error)
	UploadModuleFile(grpc.ClientStreamingServer[UploadModuleFileRequest, UploadModuleFileResponse]) error
	GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	RenameKey(context.Context, *RenameKeyRequest) (*RenameKeyResponse, error)
	RotateKey(context.Context, *RotateKeyRequest) (*RotateKeyResponse, error)
	CreateKeyFromExistingKeyAuthorizations(context.Context, *CreateKeyFromExistingKeyAuthorizationsRequest) (*CreateKeyFromExistingKeyAuthorizationsResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppServiceServer struct{}

func (UnimplementedAppServiceServer) GetUserIDByEmail(context.Context, *GetUserIDByEmailRequest) (*GetUserIDByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByEmail not implemented")
}
func (UnimplementedAppServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedAppServiceServer) GetOrganizationsWithAccessToLocation(context.Context, *GetOrganizationsWithAccessToLocationRequest) (*GetOrganizationsWithAccessToLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsWithAccessToLocation not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsByUser not implemented")
}
func (UnimplementedAppServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedAppServiceServer) GetOrganizationNamespaceAvailability(context.Context, *GetOrganizationNamespaceAvailabilityRequest) (*GetOrganizationNamespaceAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationNamespaceAvailability not implemented")
}
func (UnimplementedAppServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedAppServiceServer) ListOrganizationMembers(context.Context, *ListOrganizationMembersRequest) (*ListOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (UnimplementedAppServiceServer) CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) UpdateOrganizationInviteAuthorizations(context.Context, *UpdateOrganizationInviteAuthorizationsRequest) (*UpdateOrganizationInviteAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationInviteAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganizationMember(context.Context, *DeleteOrganizationMemberRequest) (*DeleteOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMember not implemented")
}
func (UnimplementedAppServiceServer) DeleteOrganizationInvite(context.Context, *DeleteOrganizationInviteRequest) (*DeleteOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) ResendOrganizationInvite(context.Context, *ResendOrganizationInviteRequest) (*ResendOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOrganizationInvite not implemented")
}
func (UnimplementedAppServiceServer) EnableBillingService(context.Context, *EnableBillingServiceRequest) (*EnableBillingServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBillingService not implemented")
}
func (UnimplementedAppServiceServer) DisableBillingService(context.Context, *DisableBillingServiceRequest) (*DisableBillingServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBillingService not implemented")
}
func (UnimplementedAppServiceServer) UpdateBillingService(context.Context, *UpdateBillingServiceRequest) (*UpdateBillingServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingService not implemented")
}
func (UnimplementedAppServiceServer) OrganizationSetSupportEmail(context.Context, *OrganizationSetSupportEmailRequest) (*OrganizationSetSupportEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationSetSupportEmail not implemented")
}
func (UnimplementedAppServiceServer) OrganizationGetSupportEmail(context.Context, *OrganizationGetSupportEmailRequest) (*OrganizationGetSupportEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationGetSupportEmail not implemented")
}
func (UnimplementedAppServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*CreateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedAppServiceServer) GetLocation(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedAppServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedAppServiceServer) DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedAppServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedAppServiceServer) ShareLocation(context.Context, *ShareLocationRequest) (*ShareLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareLocation not implemented")
}
func (UnimplementedAppServiceServer) UnshareLocation(context.Context, *UnshareLocationRequest) (*UnshareLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareLocation not implemented")
}
func (UnimplementedAppServiceServer) LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationAuth not implemented")
}
func (UnimplementedAppServiceServer) CreateLocationSecret(context.Context, *CreateLocationSecretRequest) (*CreateLocationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationSecret not implemented")
}
func (UnimplementedAppServiceServer) DeleteLocationSecret(context.Context, *DeleteLocationSecretRequest) (*DeleteLocationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocationSecret not implemented")
}
func (UnimplementedAppServiceServer) GetRobot(context.Context, *GetRobotRequest) (*GetRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobot not implemented")
}
func (UnimplementedAppServiceServer) GetRoverRentalRobots(context.Context, *GetRoverRentalRobotsRequest) (*GetRoverRentalRobotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoverRentalRobots not implemented")
}
func (UnimplementedAppServiceServer) GetRobotParts(context.Context, *GetRobotPartsRequest) (*GetRobotPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotParts not implemented")
}
func (UnimplementedAppServiceServer) GetRobotPart(context.Context, *GetRobotPartRequest) (*GetRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPart not implemented")
}
func (UnimplementedAppServiceServer) GetRobotPartLogs(context.Context, *GetRobotPartLogsRequest) (*GetRobotPartLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPartLogs not implemented")
}
func (UnimplementedAppServiceServer) TailRobotPartLogs(*TailRobotPartLogsRequest, grpc.ServerStreamingServer[TailRobotPartLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TailRobotPartLogs not implemented")
}
func (UnimplementedAppServiceServer) GetRobotPartHistory(context.Context, *GetRobotPartHistoryRequest) (*GetRobotPartHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPartHistory not implemented")
}
func (UnimplementedAppServiceServer) UpdateRobotPart(context.Context, *UpdateRobotPartRequest) (*UpdateRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRobotPart not implemented")
}
func (UnimplementedAppServiceServer) NewRobotPart(context.Context, *NewRobotPartRequest) (*NewRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRobotPart not implemented")
}
func (UnimplementedAppServiceServer) DeleteRobotPart(context.Context, *DeleteRobotPartRequest) (*DeleteRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobotPart not implemented")
}
func (UnimplementedAppServiceServer) GetRobotAPIKeys(context.Context, *GetRobotAPIKeysRequest) (*GetRobotAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotAPIKeys not implemented")
}
func (UnimplementedAppServiceServer) MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartAsMain not implemented")
}
func (UnimplementedAppServiceServer) MarkPartForRestart(context.Context, *MarkPartForRestartRequest) (*MarkPartForRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartForRestart not implemented")
}
func (UnimplementedAppServiceServer) CreateRobotPartSecret(context.Context, *CreateRobotPartSecretRequest) (*CreateRobotPartSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobotPartSecret not implemented")
}
func (UnimplementedAppServiceServer) DeleteRobotPartSecret(context.Context, *DeleteRobotPartSecretRequest) (*DeleteRobotPartSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobotPartSecret not implemented")
}
func (UnimplementedAppServiceServer) ListRobots(context.Context, *ListRobotsRequest) (*ListRobotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRobots not implemented")
}
func (UnimplementedAppServiceServer) NewRobot(context.Context, *NewRobotRequest) (*NewRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRobot not implemented")
}
func (UnimplementedAppServiceServer) UpdateRobot(context.Context, *UpdateRobotRequest) (*UpdateRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRobot not implemented")
}
func (UnimplementedAppServiceServer) DeleteRobot(context.Context, *DeleteRobotRequest) (*DeleteRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobot not implemented")
}
func (UnimplementedAppServiceServer) ListFragments(context.Context, *ListFragmentsRequest) (*ListFragmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFragments not implemented")
}
func (UnimplementedAppServiceServer) GetFragment(context.Context, *GetFragmentRequest) (*GetFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFragment not implemented")
}
func (UnimplementedAppServiceServer) CreateFragment(context.Context, *CreateFragmentRequest) (*CreateFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFragment not implemented")
}
func (UnimplementedAppServiceServer) UpdateFragment(context.Context, *UpdateFragmentRequest) (*UpdateFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFragment not implemented")
}
func (UnimplementedAppServiceServer) DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragment not implemented")
}
func (UnimplementedAppServiceServer) ListMachineFragments(context.Context, *ListMachineFragmentsRequest) (*ListMachineFragmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineFragments not implemented")
}
func (UnimplementedAppServiceServer) GetFragmentHistory(context.Context, *GetFragmentHistoryRequest) (*GetFragmentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFragmentHistory not implemented")
}
func (UnimplementedAppServiceServer) AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAppServiceServer) RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedAppServiceServer) ChangeRole(context.Context, *ChangeRoleRequest) (*ChangeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRole not implemented")
}
func (UnimplementedAppServiceServer) ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (UnimplementedAppServiceServer) GetRegistryItem(context.Context, *GetRegistryItemRequest) (*GetRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) CreateRegistryItem(context.Context, *CreateRegistryItemRequest) (*CreateRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) UpdateRegistryItem(context.Context, *UpdateRegistryItemRequest) (*UpdateRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) ListRegistryItems(context.Context, *ListRegistryItemsRequest) (*ListRegistryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryItems not implemented")
}
func (UnimplementedAppServiceServer) DeleteRegistryItem(context.Context, *DeleteRegistryItemRequest) (*DeleteRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) TransferRegistryItem(context.Context, *TransferRegistryItemRequest) (*TransferRegistryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferRegistryItem not implemented")
}
func (UnimplementedAppServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedAppServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedAppServiceServer) UploadModuleFile(grpc.ClientStreamingServer[UploadModuleFileRequest, UploadModuleFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadModuleFile not implemented")
}
func (UnimplementedAppServiceServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedAppServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedAppServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedAppServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedAppServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedAppServiceServer) RenameKey(context.Context, *RenameKeyRequest) (*RenameKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameKey not implemented")
}
func (UnimplementedAppServiceServer) RotateKey(context.Context, *RotateKeyRequest) (*RotateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKey not implemented")
}
func (UnimplementedAppServiceServer) CreateKeyFromExistingKeyAuthorizations(context.Context, *CreateKeyFromExistingKeyAuthorizationsRequest) (*CreateKeyFromExistingKeyAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyFromExistingKeyAuthorizations not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}
func (UnimplementedAppServiceServer) testEmbeddedByValue()                    {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GetUserIDByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetUserIDByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetUserIDByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetUserIDByEmail(ctx, req.(*GetUserIDByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganizationsWithAccessToLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsWithAccessToLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganizationsWithAccessToLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetOrganizationsWithAccessToLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganizationsWithAccessToLocation(ctx, req.(*GetOrganizationsWithAccessToLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListOrganizationsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizationsByUser(ctx, req.(*ListOrganizationsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOrganizationNamespaceAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationNamespaceAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOrganizationNamespaceAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetOrganizationNamespaceAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOrganizationNamespaceAvailability(ctx, req.(*GetOrganizationNamespaceAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListOrganizationMembers(ctx, req.(*ListOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateOrganizationInvite(ctx, req.(*CreateOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateOrganizationInviteAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationInviteAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateOrganizationInviteAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateOrganizationInviteAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateOrganizationInviteAuthorizations(ctx, req.(*UpdateOrganizationInviteAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganizationMember(ctx, req.(*DeleteOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteOrganizationInvite(ctx, req.(*DeleteOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ResendOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ResendOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ResendOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ResendOrganizationInvite(ctx, req.(*ResendOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_EnableBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).EnableBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_EnableBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).EnableBillingService(ctx, req.(*EnableBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DisableBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DisableBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DisableBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DisableBillingService(ctx, req.(*DisableBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateBillingService(ctx, req.(*UpdateBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_OrganizationSetSupportEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationSetSupportEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).OrganizationSetSupportEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_OrganizationSetSupportEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).OrganizationSetSupportEmail(ctx, req.(*OrganizationSetSupportEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_OrganizationGetSupportEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationGetSupportEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).OrganizationGetSupportEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_OrganizationGetSupportEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).OrganizationGetSupportEmail(ctx, req.(*OrganizationGetSupportEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteLocation(ctx, req.(*DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ShareLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ShareLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ShareLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ShareLocation(ctx, req.(*ShareLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UnshareLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UnshareLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UnshareLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UnshareLocation(ctx, req.(*UnshareLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_LocationAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).LocationAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_LocationAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).LocationAuth(ctx, req.(*LocationAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateLocationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateLocationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateLocationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateLocationSecret(ctx, req.(*CreateLocationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteLocationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteLocationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteLocationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteLocationSecret(ctx, req.(*DeleteLocationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobot(ctx, req.(*GetRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRoverRentalRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoverRentalRobotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRoverRentalRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRoverRentalRobots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRoverRentalRobots(ctx, req.(*GetRoverRentalRobotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRobotParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobotParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobotParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobotParts(ctx, req.(*GetRobotPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobotPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobotPart(ctx, req.(*GetRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRobotPartLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobotPartLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobotPartLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobotPartLogs(ctx, req.(*GetRobotPartLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_TailRobotPartLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRobotPartLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppServiceServer).TailRobotPartLogs(m, &grpc.GenericServerStream[TailRobotPartLogsRequest, TailRobotPartLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppService_TailRobotPartLogsServer = grpc.ServerStreamingServer[TailRobotPartLogsResponse]

func _AppService_GetRobotPartHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobotPartHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobotPartHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobotPartHistory(ctx, req.(*GetRobotPartHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateRobotPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateRobotPart(ctx, req.(*UpdateRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_NewRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).NewRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_NewRobotPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).NewRobotPart(ctx, req.(*NewRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteRobotPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteRobotPart(ctx, req.(*DeleteRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRobotAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRobotAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRobotAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRobotAPIKeys(ctx, req.(*GetRobotAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_MarkPartAsMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPartAsMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).MarkPartAsMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_MarkPartAsMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).MarkPartAsMain(ctx, req.(*MarkPartAsMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_MarkPartForRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPartForRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).MarkPartForRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_MarkPartForRestart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).MarkPartForRestart(ctx, req.(*MarkPartForRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateRobotPartSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRobotPartSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateRobotPartSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateRobotPartSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateRobotPartSecret(ctx, req.(*CreateRobotPartSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteRobotPartSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotPartSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteRobotPartSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteRobotPartSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteRobotPartSecret(ctx, req.(*DeleteRobotPartSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRobotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListRobots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListRobots(ctx, req.(*ListRobotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_NewRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).NewRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_NewRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).NewRobot(ctx, req.(*NewRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateRobot(ctx, req.(*UpdateRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteRobot(ctx, req.(*DeleteRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListFragments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFragmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListFragments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListFragments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListFragments(ctx, req.(*ListFragmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetFragment(ctx, req.(*GetFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateFragment(ctx, req.(*CreateFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateFragment(ctx, req.(*UpdateFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteFragment(ctx, req.(*DeleteFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListMachineFragments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineFragmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListMachineFragments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListMachineFragments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListMachineFragments(ctx, req.(*ListMachineFragmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetFragmentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFragmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetFragmentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetFragmentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetFragmentHistory(ctx, req.(*GetFragmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_RemoveRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RemoveRole(ctx, req.(*RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ChangeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ChangeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ChangeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ChangeRole(ctx, req.(*ChangeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListAuthorizations(ctx, req.(*ListAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CheckPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CheckPermissions(ctx, req.(*CheckPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetRegistryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetRegistryItem(ctx, req.(*GetRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateRegistryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateRegistryItem(ctx, req.(*CreateRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateRegistryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateRegistryItem(ctx, req.(*UpdateRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListRegistryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListRegistryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListRegistryItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListRegistryItems(ctx, req.(*ListRegistryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteRegistryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteRegistryItem(ctx, req.(*DeleteRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_TransferRegistryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRegistryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).TransferRegistryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_TransferRegistryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).TransferRegistryItem(ctx, req.(*TransferRegistryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UploadModuleFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServiceServer).UploadModuleFile(&grpc.GenericServerStream[UploadModuleFileRequest, UploadModuleFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppService_UploadModuleFileServer = grpc.ClientStreamingServer[UploadModuleFileRequest, UploadModuleFileResponse]

func _AppService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RenameKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RenameKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_RenameKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RenameKey(ctx, req.(*RenameKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_RotateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RotateKey(ctx, req.(*RotateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateKeyFromExistingKeyAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyFromExistingKeyAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateKeyFromExistingKeyAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateKeyFromExistingKeyAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateKeyFromExistingKeyAuthorizations(ctx, req.(*CreateKeyFromExistingKeyAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserIDByEmail",
			Handler:    _AppService_GetUserIDByEmail_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _AppService_CreateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _AppService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationsWithAccessToLocation",
			Handler:    _AppService_GetOrganizationsWithAccessToLocation_Handler,
		},
		{
			MethodName: "ListOrganizationsByUser",
			Handler:    _AppService_ListOrganizationsByUser_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _AppService_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationNamespaceAvailability",
			Handler:    _AppService_GetOrganizationNamespaceAvailability_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _AppService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _AppService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _AppService_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "CreateOrganizationInvite",
			Handler:    _AppService_CreateOrganizationInvite_Handler,
		},
		{
			MethodName: "UpdateOrganizationInviteAuthorizations",
			Handler:    _AppService_UpdateOrganizationInviteAuthorizations_Handler,
		},
		{
			MethodName: "DeleteOrganizationMember",
			Handler:    _AppService_DeleteOrganizationMember_Handler,
		},
		{
			MethodName: "DeleteOrganizationInvite",
			Handler:    _AppService_DeleteOrganizationInvite_Handler,
		},
		{
			MethodName: "ResendOrganizationInvite",
			Handler:    _AppService_ResendOrganizationInvite_Handler,
		},
		{
			MethodName: "EnableBillingService",
			Handler:    _AppService_EnableBillingService_Handler,
		},
		{
			MethodName: "DisableBillingService",
			Handler:    _AppService_DisableBillingService_Handler,
		},
		{
			MethodName: "UpdateBillingService",
			Handler:    _AppService_UpdateBillingService_Handler,
		},
		{
			MethodName: "OrganizationSetSupportEmail",
			Handler:    _AppService_OrganizationSetSupportEmail_Handler,
		},
		{
			MethodName: "OrganizationGetSupportEmail",
			Handler:    _AppService_OrganizationGetSupportEmail_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _AppService_CreateLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _AppService_GetLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _AppService_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _AppService_DeleteLocation_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _AppService_ListLocations_Handler,
		},
		{
			MethodName: "ShareLocation",
			Handler:    _AppService_ShareLocation_Handler,
		},
		{
			MethodName: "UnshareLocation",
			Handler:    _AppService_UnshareLocation_Handler,
		},
		{
			MethodName: "LocationAuth",
			Handler:    _AppService_LocationAuth_Handler,
		},
		{
			MethodName: "CreateLocationSecret",
			Handler:    _AppService_CreateLocationSecret_Handler,
		},
		{
			MethodName: "DeleteLocationSecret",
			Handler:    _AppService_DeleteLocationSecret_Handler,
		},
		{
			MethodName: "GetRobot",
			Handler:    _AppService_GetRobot_Handler,
		},
		{
			MethodName: "GetRoverRentalRobots",
			Handler:    _AppService_GetRoverRentalRobots_Handler,
		},
		{
			MethodName: "GetRobotParts",
			Handler:    _AppService_GetRobotParts_Handler,
		},
		{
			MethodName: "GetRobotPart",
			Handler:    _AppService_GetRobotPart_Handler,
		},
		{
			MethodName: "GetRobotPartLogs",
			Handler:    _AppService_GetRobotPartLogs_Handler,
		},
		{
			MethodName: "GetRobotPartHistory",
			Handler:    _AppService_GetRobotPartHistory_Handler,
		},
		{
			MethodName: "UpdateRobotPart",
			Handler:    _AppService_UpdateRobotPart_Handler,
		},
		{
			MethodName: "NewRobotPart",
			Handler:    _AppService_NewRobotPart_Handler,
		},
		{
			MethodName: "DeleteRobotPart",
			Handler:    _AppService_DeleteRobotPart_Handler,
		},
		{
			MethodName: "GetRobotAPIKeys",
			Handler:    _AppService_GetRobotAPIKeys_Handler,
		},
		{
			MethodName: "MarkPartAsMain",
			Handler:    _AppService_MarkPartAsMain_Handler,
		},
		{
			MethodName: "MarkPartForRestart",
			Handler:    _AppService_MarkPartForRestart_Handler,
		},
		{
			MethodName: "CreateRobotPartSecret",
			Handler:    _AppService_CreateRobotPartSecret_Handler,
		},
		{
			MethodName: "DeleteRobotPartSecret",
			Handler:    _AppService_DeleteRobotPartSecret_Handler,
		},
		{
			MethodName: "ListRobots",
			Handler:    _AppService_ListRobots_Handler,
		},
		{
			MethodName: "NewRobot",
			Handler:    _AppService_NewRobot_Handler,
		},
		{
			MethodName: "UpdateRobot",
			Handler:    _AppService_UpdateRobot_Handler,
		},
		{
			MethodName: "DeleteRobot",
			Handler:    _AppService_DeleteRobot_Handler,
		},
		{
			MethodName: "ListFragments",
			Handler:    _AppService_ListFragments_Handler,
		},
		{
			MethodName: "GetFragment",
			Handler:    _AppService_GetFragment_Handler,
		},
		{
			MethodName: "CreateFragment",
			Handler:    _AppService_CreateFragment_Handler,
		},
		{
			MethodName: "UpdateFragment",
			Handler:    _AppService_UpdateFragment_Handler,
		},
		{
			MethodName: "DeleteFragment",
			Handler:    _AppService_DeleteFragment_Handler,
		},
		{
			MethodName: "ListMachineFragments",
			Handler:    _AppService_ListMachineFragments_Handler,
		},
		{
			MethodName: "GetFragmentHistory",
			Handler:    _AppService_GetFragmentHistory_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _AppService_AddRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _AppService_RemoveRole_Handler,
		},
		{
			MethodName: "ChangeRole",
			Handler:    _AppService_ChangeRole_Handler,
		},
		{
			MethodName: "ListAuthorizations",
			Handler:    _AppService_ListAuthorizations_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _AppService_CheckPermissions_Handler,
		},
		{
			MethodName: "GetRegistryItem",
			Handler:    _AppService_GetRegistryItem_Handler,
		},
		{
			MethodName: "CreateRegistryItem",
			Handler:    _AppService_CreateRegistryItem_Handler,
		},
		{
			MethodName: "UpdateRegistryItem",
			Handler:    _AppService_UpdateRegistryItem_Handler,
		},
		{
			MethodName: "ListRegistryItems",
			Handler:    _AppService_ListRegistryItems_Handler,
		},
		{
			MethodName: "DeleteRegistryItem",
			Handler:    _AppService_DeleteRegistryItem_Handler,
		},
		{
			MethodName: "TransferRegistryItem",
			Handler:    _AppService_TransferRegistryItem_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _AppService_CreateModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _AppService_UpdateModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _AppService_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _AppService_ListModules_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _AppService_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _AppService_DeleteKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _AppService_ListKeys_Handler,
		},
		{
			MethodName: "RenameKey",
			Handler:    _AppService_RenameKey_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _AppService_RotateKey_Handler,
		},
		{
			MethodName: "CreateKeyFromExistingKeyAuthorizations",
			Handler:    _AppService_CreateKeyFromExistingKeyAuthorizations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailRobotPartLogs",
			Handler:       _AppService_TailRobotPartLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadModuleFile",
			Handler:       _AppService_UploadModuleFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "app/v1/app.proto",
}
