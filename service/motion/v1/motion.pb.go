// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: service/motion/v1/motion.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Moves any component on the robot to a specified destination which can be from the reference frame of any other component on the robot.
type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Destination to move to, which can a pose in the reference frame of any frame in the robot's frame system
	Destination *v1.PoseInFrame `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Avoid obstacles by specifying their geometries in the world state
	// Augment the frame system of the robot by specifying additional transforms to add to it for the duration of the Move
	WorldState *v1.WorldState `protobuf:"bytes,4,opt,name=world_state,json=worldState,proto3,oneof" json:"world_state,omitempty"`
	// Constrain the way the robot will move
	Constraints *Constraints `protobuf:"bytes,5,opt,name=constraints,proto3,oneof" json:"constraints,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{0}
}

func (x *MoveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveRequest) GetDestination() *v1.PoseInFrame {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveRequest) GetWorldState() *v1.WorldState {
	if x != nil {
		return x.WorldState
	}
	return nil
}

func (x *MoveRequest) GetConstraints() *Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *MoveRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{1}
}

func (x *MoveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MoveOnMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specify a destination to, which can be any pose with respect to the SLAM map's origin
	Destination *v1.Pose `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Name of the slam service from which the SLAM map is requested
	SlamServiceName *v1.ResourceName `protobuf:"bytes,4,opt,name=slam_service_name,json=slamServiceName,proto3" json:"slam_service_name,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveOnMapRequest) Reset() {
	*x = MoveOnMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOnMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnMapRequest) ProtoMessage() {}

func (x *MoveOnMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnMapRequest.ProtoReflect.Descriptor instead.
func (*MoveOnMapRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{2}
}

func (x *MoveOnMapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveOnMapRequest) GetDestination() *v1.Pose {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveOnMapRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveOnMapRequest) GetSlamServiceName() *v1.ResourceName {
	if x != nil {
		return x.SlamServiceName
	}
	return nil
}

func (x *MoveOnMapRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveOnMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveOnMapResponse) Reset() {
	*x = MoveOnMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOnMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnMapResponse) ProtoMessage() {}

func (x *MoveOnMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnMapResponse.ProtoReflect.Descriptor instead.
func (*MoveOnMapResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{3}
}

func (x *MoveOnMapResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MoveOnGlobeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Destination, encoded as a GeoPoint
	Destination *v1.GeoPoint `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Optional compass heading to achieve at the destination, in degrees [0-360)
	Heading *float64 `protobuf:"fixed64,3,opt,name=heading,proto3,oneof" json:"heading,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Name of the movement sensor which will be used to check robot location
	MovementSensorName *v1.ResourceName `protobuf:"bytes,5,opt,name=movement_sensor_name,json=movementSensorName,proto3" json:"movement_sensor_name,omitempty"`
	// Obstacles to be considered for motion planning
	Obstacles []*v1.GeoObstacle `protobuf:"bytes,6,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	// Optional linear velocity to target when moving
	LinearMetersPerSec *float32 `protobuf:"fixed32,7,opt,name=linear_meters_per_sec,json=linearMetersPerSec,proto3,oneof" json:"linear_meters_per_sec,omitempty"`
	// Optional angular velocity to target when turning
	AngularDegPerSec *float32 `protobuf:"fixed32,8,opt,name=angular_deg_per_sec,json=angularDegPerSec,proto3,oneof" json:"angular_deg_per_sec,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveOnGlobeRequest) Reset() {
	*x = MoveOnGlobeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOnGlobeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnGlobeRequest) ProtoMessage() {}

func (x *MoveOnGlobeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnGlobeRequest.ProtoReflect.Descriptor instead.
func (*MoveOnGlobeRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{4}
}

func (x *MoveOnGlobeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveOnGlobeRequest) GetDestination() *v1.GeoPoint {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetHeading() float64 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *MoveOnGlobeRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetMovementSensorName() *v1.ResourceName {
	if x != nil {
		return x.MovementSensorName
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetObstacles() []*v1.GeoObstacle {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetLinearMetersPerSec() float32 {
	if x != nil && x.LinearMetersPerSec != nil {
		return *x.LinearMetersPerSec
	}
	return 0
}

func (x *MoveOnGlobeRequest) GetAngularDegPerSec() float32 {
	if x != nil && x.AngularDegPerSec != nil {
		return *x.AngularDegPerSec
	}
	return 0
}

func (x *MoveOnGlobeRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveOnGlobeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveOnGlobeResponse) Reset() {
	*x = MoveOnGlobeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOnGlobeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnGlobeResponse) ProtoMessage() {}

func (x *MoveOnGlobeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnGlobeResponse.ProtoReflect.Descriptor instead.
func (*MoveOnGlobeResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{5}
}

func (x *MoveOnGlobeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MoveSingleComponentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Destination   *v1.PoseInFrame  `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	ComponentName *v1.ResourceName `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	WorldState    *v1.WorldState   `protobuf:"bytes,4,opt,name=world_state,json=worldState,proto3,oneof" json:"world_state,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveSingleComponentRequest) Reset() {
	*x = MoveSingleComponentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveSingleComponentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSingleComponentRequest) ProtoMessage() {}

func (x *MoveSingleComponentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSingleComponentRequest.ProtoReflect.Descriptor instead.
func (*MoveSingleComponentRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{6}
}

func (x *MoveSingleComponentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveSingleComponentRequest) GetDestination() *v1.PoseInFrame {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveSingleComponentRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveSingleComponentRequest) GetWorldState() *v1.WorldState {
	if x != nil {
		return x.WorldState
	}
	return nil
}

func (x *MoveSingleComponentRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveSingleComponentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveSingleComponentResponse) Reset() {
	*x = MoveSingleComponentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveSingleComponentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSingleComponentResponse) ProtoMessage() {}

func (x *MoveSingleComponentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSingleComponentResponse.ProtoReflect.Descriptor instead.
func (*MoveSingleComponentResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{7}
}

func (x *MoveSingleComponentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetPoseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the component whose pose is being requested
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// the reference frame in which the component's pose
	// should be provided, if unset this defaults
	// to the "world" reference frame
	DestinationFrame string `protobuf:"bytes,3,opt,name=destination_frame,json=destinationFrame,proto3" json:"destination_frame,omitempty"`
	// pose information on any additional reference frames that are needed
	// to compute the component's pose
	SupplementalTransforms []*v1.Transform `protobuf:"bytes,4,rep,name=supplemental_transforms,json=supplementalTransforms,proto3" json:"supplemental_transforms,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GetPoseRequest) Reset() {
	*x = GetPoseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoseRequest) ProtoMessage() {}

func (x *GetPoseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoseRequest.ProtoReflect.Descriptor instead.
func (*GetPoseRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{8}
}

func (x *GetPoseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPoseRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *GetPoseRequest) GetDestinationFrame() string {
	if x != nil {
		return x.DestinationFrame
	}
	return ""
}

func (x *GetPoseRequest) GetSupplementalTransforms() []*v1.Transform {
	if x != nil {
		return x.SupplementalTransforms
	}
	return nil
}

func (x *GetPoseRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetPoseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose *v1.PoseInFrame `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *GetPoseResponse) Reset() {
	*x = GetPoseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoseResponse) ProtoMessage() {}

func (x *GetPoseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoseResponse.ProtoReflect.Descriptor instead.
func (*GetPoseResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{9}
}

func (x *GetPoseResponse) GetPose() *v1.PoseInFrame {
	if x != nil {
		return x.Pose
	}
	return nil
}

// Constraints specifies all enumerated constraints to be passed to Viam's motion planning, along with any optional parameters
type Constraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Typed message for a specific constraint
	LinearConstraint       []*LinearConstraint       `protobuf:"bytes,1,rep,name=linear_constraint,json=linearConstraint,proto3" json:"linear_constraint,omitempty"`
	OrientationConstraint  []*OrientationConstraint  `protobuf:"bytes,2,rep,name=orientation_constraint,json=orientationConstraint,proto3" json:"orientation_constraint,omitempty"`
	CollisionSpecification []*CollisionSpecification `protobuf:"bytes,3,rep,name=collision_specification,json=collisionSpecification,proto3" json:"collision_specification,omitempty"` // Arc constraint, Time constraint, and others will be added here when they are supported
}

func (x *Constraints) Reset() {
	*x = Constraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraints) ProtoMessage() {}

func (x *Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraints.ProtoReflect.Descriptor instead.
func (*Constraints) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{10}
}

func (x *Constraints) GetLinearConstraint() []*LinearConstraint {
	if x != nil {
		return x.LinearConstraint
	}
	return nil
}

func (x *Constraints) GetOrientationConstraint() []*OrientationConstraint {
	if x != nil {
		return x.OrientationConstraint
	}
	return nil
}

func (x *Constraints) GetCollisionSpecification() []*CollisionSpecification {
	if x != nil {
		return x.CollisionSpecification
	}
	return nil
}

// LinearConstraint specifies that the component being moved should move linearly relative to its goal. It does not constrain the motion of components other than the `component_name` specified in motion.Move
type LinearConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineToleranceMm          *float32 `protobuf:"fixed32,1,opt,name=line_tolerance_mm,json=lineToleranceMm,proto3,oneof" json:"line_tolerance_mm,omitempty"`                            // Max linear deviation from straight-line between start and goal, in mm.
	OrientationToleranceDegs *float32 `protobuf:"fixed32,2,opt,name=orientation_tolerance_degs,json=orientationToleranceDegs,proto3,oneof" json:"orientation_tolerance_degs,omitempty"` // Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
}

func (x *LinearConstraint) Reset() {
	*x = LinearConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearConstraint) ProtoMessage() {}

func (x *LinearConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearConstraint.ProtoReflect.Descriptor instead.
func (*LinearConstraint) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{11}
}

func (x *LinearConstraint) GetLineToleranceMm() float32 {
	if x != nil && x.LineToleranceMm != nil {
		return *x.LineToleranceMm
	}
	return 0
}

func (x *LinearConstraint) GetOrientationToleranceDegs() float32 {
	if x != nil && x.OrientationToleranceDegs != nil {
		return *x.OrientationToleranceDegs
	}
	return 0
}

// OrientationConstraint specifies that the component being moved will not deviate its orientation beyond some threshold relative to the goal. It does not constrain the motion of components other than the `component_name` specified in motion.Move
type OrientationConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrientationToleranceDegs *float32 `protobuf:"fixed32,1,opt,name=orientation_tolerance_degs,json=orientationToleranceDegs,proto3,oneof" json:"orientation_tolerance_degs,omitempty"` // Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
}

func (x *OrientationConstraint) Reset() {
	*x = OrientationConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrientationConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrientationConstraint) ProtoMessage() {}

func (x *OrientationConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrientationConstraint.ProtoReflect.Descriptor instead.
func (*OrientationConstraint) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{12}
}

func (x *OrientationConstraint) GetOrientationToleranceDegs() float32 {
	if x != nil && x.OrientationToleranceDegs != nil {
		return *x.OrientationToleranceDegs
	}
	return 0
}

// CollisionSpecification is used to selectively apply obstacle avoidance to specific parts of the robot
type CollisionSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pairs of frame which should be allowed to collide with one another
	Allows []*CollisionSpecification_AllowedFrameCollisions `protobuf:"bytes,1,rep,name=allows,proto3" json:"allows,omitempty"`
}

func (x *CollisionSpecification) Reset() {
	*x = CollisionSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollisionSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollisionSpecification) ProtoMessage() {}

func (x *CollisionSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollisionSpecification.ProtoReflect.Descriptor instead.
func (*CollisionSpecification) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{13}
}

func (x *CollisionSpecification) GetAllows() []*CollisionSpecification_AllowedFrameCollisions {
	if x != nil {
		return x.Allows
	}
	return nil
}

type CollisionSpecification_AllowedFrameCollisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame1 string `protobuf:"bytes,1,opt,name=frame1,proto3" json:"frame1,omitempty"`
	Frame2 string `protobuf:"bytes,2,opt,name=frame2,proto3" json:"frame2,omitempty"`
}

func (x *CollisionSpecification_AllowedFrameCollisions) Reset() {
	*x = CollisionSpecification_AllowedFrameCollisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_motion_v1_motion_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollisionSpecification_AllowedFrameCollisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollisionSpecification_AllowedFrameCollisions) ProtoMessage() {}

func (x *CollisionSpecification_AllowedFrameCollisions) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollisionSpecification_AllowedFrameCollisions.ProtoReflect.Descriptor instead.
func (*CollisionSpecification_AllowedFrameCollisions) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CollisionSpecification_AllowedFrameCollisions) GetFrame1() string {
	if x != nil {
		return x.Frame1
	}
	return ""
}

func (x *CollisionSpecification_AllowedFrameCollisions) GetFrame2() string {
	if x != nil {
		return x.Frame2
	}
	return ""
}

var File_service_motion_v1_motion_proto protoreflect.FileDescriptor

var file_service_motion_v1_motion_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03, 0x0a,
	0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x10,
	0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x6c, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x6c, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x2d, 0x0a, 0x11, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xac, 0x04, 0x0a, 0x12, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x12, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4f, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x64, 0x65, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x10, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x44,
	0x65, 0x67, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x22, 0x2f, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65,
	0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x1a, 0x4d, 0x6f,
	0x76, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x37, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x10, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x64, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x15, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xbb, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x18, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x22, 0x79,
	0x0a, 0x15, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x18, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x43, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x1a, 0x48, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x32, 0xad, 0x07,
	0x0a, 0x0d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x82, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22,
	0x2e, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x12,
	0xa0, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x12,
	0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47,
	0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x22, 0x30, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x38, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x65, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d,
	0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x3f, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x5a, 0x21, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_motion_v1_motion_proto_rawDescOnce sync.Once
	file_service_motion_v1_motion_proto_rawDescData = file_service_motion_v1_motion_proto_rawDesc
)

func file_service_motion_v1_motion_proto_rawDescGZIP() []byte {
	file_service_motion_v1_motion_proto_rawDescOnce.Do(func() {
		file_service_motion_v1_motion_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_motion_v1_motion_proto_rawDescData)
	})
	return file_service_motion_v1_motion_proto_rawDescData
}

var file_service_motion_v1_motion_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_service_motion_v1_motion_proto_goTypes = []interface{}{
	(*MoveRequest)(nil),                                   // 0: viam.service.motion.v1.MoveRequest
	(*MoveResponse)(nil),                                  // 1: viam.service.motion.v1.MoveResponse
	(*MoveOnMapRequest)(nil),                              // 2: viam.service.motion.v1.MoveOnMapRequest
	(*MoveOnMapResponse)(nil),                             // 3: viam.service.motion.v1.MoveOnMapResponse
	(*MoveOnGlobeRequest)(nil),                            // 4: viam.service.motion.v1.MoveOnGlobeRequest
	(*MoveOnGlobeResponse)(nil),                           // 5: viam.service.motion.v1.MoveOnGlobeResponse
	(*MoveSingleComponentRequest)(nil),                    // 6: viam.service.motion.v1.MoveSingleComponentRequest
	(*MoveSingleComponentResponse)(nil),                   // 7: viam.service.motion.v1.MoveSingleComponentResponse
	(*GetPoseRequest)(nil),                                // 8: viam.service.motion.v1.GetPoseRequest
	(*GetPoseResponse)(nil),                               // 9: viam.service.motion.v1.GetPoseResponse
	(*Constraints)(nil),                                   // 10: viam.service.motion.v1.Constraints
	(*LinearConstraint)(nil),                              // 11: viam.service.motion.v1.LinearConstraint
	(*OrientationConstraint)(nil),                         // 12: viam.service.motion.v1.OrientationConstraint
	(*CollisionSpecification)(nil),                        // 13: viam.service.motion.v1.CollisionSpecification
	(*CollisionSpecification_AllowedFrameCollisions)(nil), // 14: viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions
	(*v1.PoseInFrame)(nil),                                // 15: viam.common.v1.PoseInFrame
	(*v1.ResourceName)(nil),                               // 16: viam.common.v1.ResourceName
	(*v1.WorldState)(nil),                                 // 17: viam.common.v1.WorldState
	(*structpb.Struct)(nil),                               // 18: google.protobuf.Struct
	(*v1.Pose)(nil),                                       // 19: viam.common.v1.Pose
	(*v1.GeoPoint)(nil),                                   // 20: viam.common.v1.GeoPoint
	(*v1.GeoObstacle)(nil),                                // 21: viam.common.v1.GeoObstacle
	(*v1.Transform)(nil),                                  // 22: viam.common.v1.Transform
	(*v1.DoCommandRequest)(nil),                           // 23: viam.common.v1.DoCommandRequest
	(*v1.DoCommandResponse)(nil),                          // 24: viam.common.v1.DoCommandResponse
}
var file_service_motion_v1_motion_proto_depIdxs = []int32{
	15, // 0: viam.service.motion.v1.MoveRequest.destination:type_name -> viam.common.v1.PoseInFrame
	16, // 1: viam.service.motion.v1.MoveRequest.component_name:type_name -> viam.common.v1.ResourceName
	17, // 2: viam.service.motion.v1.MoveRequest.world_state:type_name -> viam.common.v1.WorldState
	10, // 3: viam.service.motion.v1.MoveRequest.constraints:type_name -> viam.service.motion.v1.Constraints
	18, // 4: viam.service.motion.v1.MoveRequest.extra:type_name -> google.protobuf.Struct
	19, // 5: viam.service.motion.v1.MoveOnMapRequest.destination:type_name -> viam.common.v1.Pose
	16, // 6: viam.service.motion.v1.MoveOnMapRequest.component_name:type_name -> viam.common.v1.ResourceName
	16, // 7: viam.service.motion.v1.MoveOnMapRequest.slam_service_name:type_name -> viam.common.v1.ResourceName
	18, // 8: viam.service.motion.v1.MoveOnMapRequest.extra:type_name -> google.protobuf.Struct
	20, // 9: viam.service.motion.v1.MoveOnGlobeRequest.destination:type_name -> viam.common.v1.GeoPoint
	16, // 10: viam.service.motion.v1.MoveOnGlobeRequest.component_name:type_name -> viam.common.v1.ResourceName
	16, // 11: viam.service.motion.v1.MoveOnGlobeRequest.movement_sensor_name:type_name -> viam.common.v1.ResourceName
	21, // 12: viam.service.motion.v1.MoveOnGlobeRequest.obstacles:type_name -> viam.common.v1.GeoObstacle
	18, // 13: viam.service.motion.v1.MoveOnGlobeRequest.extra:type_name -> google.protobuf.Struct
	15, // 14: viam.service.motion.v1.MoveSingleComponentRequest.destination:type_name -> viam.common.v1.PoseInFrame
	16, // 15: viam.service.motion.v1.MoveSingleComponentRequest.component_name:type_name -> viam.common.v1.ResourceName
	17, // 16: viam.service.motion.v1.MoveSingleComponentRequest.world_state:type_name -> viam.common.v1.WorldState
	18, // 17: viam.service.motion.v1.MoveSingleComponentRequest.extra:type_name -> google.protobuf.Struct
	16, // 18: viam.service.motion.v1.GetPoseRequest.component_name:type_name -> viam.common.v1.ResourceName
	22, // 19: viam.service.motion.v1.GetPoseRequest.supplemental_transforms:type_name -> viam.common.v1.Transform
	18, // 20: viam.service.motion.v1.GetPoseRequest.extra:type_name -> google.protobuf.Struct
	15, // 21: viam.service.motion.v1.GetPoseResponse.pose:type_name -> viam.common.v1.PoseInFrame
	11, // 22: viam.service.motion.v1.Constraints.linear_constraint:type_name -> viam.service.motion.v1.LinearConstraint
	12, // 23: viam.service.motion.v1.Constraints.orientation_constraint:type_name -> viam.service.motion.v1.OrientationConstraint
	13, // 24: viam.service.motion.v1.Constraints.collision_specification:type_name -> viam.service.motion.v1.CollisionSpecification
	14, // 25: viam.service.motion.v1.CollisionSpecification.allows:type_name -> viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions
	0,  // 26: viam.service.motion.v1.MotionService.Move:input_type -> viam.service.motion.v1.MoveRequest
	2,  // 27: viam.service.motion.v1.MotionService.MoveOnMap:input_type -> viam.service.motion.v1.MoveOnMapRequest
	4,  // 28: viam.service.motion.v1.MotionService.MoveOnGlobe:input_type -> viam.service.motion.v1.MoveOnGlobeRequest
	6,  // 29: viam.service.motion.v1.MotionService.MoveSingleComponent:input_type -> viam.service.motion.v1.MoveSingleComponentRequest
	8,  // 30: viam.service.motion.v1.MotionService.GetPose:input_type -> viam.service.motion.v1.GetPoseRequest
	23, // 31: viam.service.motion.v1.MotionService.DoCommand:input_type -> viam.common.v1.DoCommandRequest
	1,  // 32: viam.service.motion.v1.MotionService.Move:output_type -> viam.service.motion.v1.MoveResponse
	3,  // 33: viam.service.motion.v1.MotionService.MoveOnMap:output_type -> viam.service.motion.v1.MoveOnMapResponse
	5,  // 34: viam.service.motion.v1.MotionService.MoveOnGlobe:output_type -> viam.service.motion.v1.MoveOnGlobeResponse
	7,  // 35: viam.service.motion.v1.MotionService.MoveSingleComponent:output_type -> viam.service.motion.v1.MoveSingleComponentResponse
	9,  // 36: viam.service.motion.v1.MotionService.GetPose:output_type -> viam.service.motion.v1.GetPoseResponse
	24, // 37: viam.service.motion.v1.MotionService.DoCommand:output_type -> viam.common.v1.DoCommandResponse
	32, // [32:38] is the sub-list for method output_type
	26, // [26:32] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_service_motion_v1_motion_proto_init() }
func file_service_motion_v1_motion_proto_init() {
	if File_service_motion_v1_motion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_motion_v1_motion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveOnMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveOnMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveOnGlobeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveOnGlobeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveSingleComponentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveSingleComponentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrientationConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollisionSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_motion_v1_motion_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollisionSpecification_AllowedFrameCollisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_motion_v1_motion_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_service_motion_v1_motion_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_service_motion_v1_motion_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_service_motion_v1_motion_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_service_motion_v1_motion_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_motion_v1_motion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_motion_v1_motion_proto_goTypes,
		DependencyIndexes: file_service_motion_v1_motion_proto_depIdxs,
		MessageInfos:      file_service_motion_v1_motion_proto_msgTypes,
	}.Build()
	File_service_motion_v1_motion_proto = out.File
	file_service_motion_v1_motion_proto_rawDesc = nil
	file_service_motion_v1_motion_proto_goTypes = nil
	file_service_motion_v1_motion_proto_depIdxs = nil
}
