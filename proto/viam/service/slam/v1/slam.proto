syntax = "proto3";

package viam.service.slam.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/service/slam/v1";
option java_package = "com.viam.service.slam.v1";

// A SlamService declares the gRPC contract for a slam service
service SLAMService {
  // GetPosition returns the current estimated position of the robot with
  // respect to the "origin" of the map.
  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/position"
    };
  }

  // GetMap returns the latest map image or point cloud generated by the
  // SLAM library
  rpc GetMap(GetMapRequest) returns (GetMapResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/map"
    };
  }

  // GetPositionNew returns the current estimated position of the robot with
  // respect to a returned component reference. Note: this function will be
  // renamed to GetPosition and replace the existing one in the near future
  rpc GetPositionNew(GetPositionNewRequest) returns (GetPositionNewResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/position_new"
    };
  }

  // GetPointCloudMap returns the latest point cloud map generated by the
  // SLAM library
  rpc GetPointCloudMap(GetPointCloudMapRequest) returns (GetPointCloudMapResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/point_cloud_map"
    };
  }
  // GetInternalState returns the internal map as defined by the specified slam
  // algorithm required to continue mapping/localizing. This endpoint is not
  // intended for end user usage
  rpc GetInternalState(GetInternalStateRequest) returns (GetInternalStateResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/internal_state"
    };
  }
}

message GetPositionRequest {
  // Name of slam service
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPositionResponse {
  // Current position of the robot within the World frame.
  common.v1.PoseInFrame pose = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetMapRequest {
  // Name of slam service
  string name = 1;
  // Requested MIME type of response (image/jpeg or image/pcd)
  string mime_type = 2;
  // Optional parameter for image/jpeg mime_type, used to project point
  // cloud into a 2D image.
  optional common.v1.Pose camera_position = 3;
  // Optional parameter for image/jpeg mime_type, defaults to false.
  // Tells us whether to include the robot position on the 2D image.
  bool include_robot_marker = 4;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetMapResponse {
  // Image or point cloud of mime_type.
  oneof map {
    common.v1.PointCloudObject point_cloud = 1;
    bytes image = 2;
  }
  // Actual MIME type of response (image/jpeg or image/pcd)
  string mime_type = 3;
}

message GetPositionNewRequest {
  // Name of slam service
  string name = 1;
}

message GetPositionNewResponse {
  // Current position of the specified component in the SLAM Map
  common.v1.Pose pose = 1;
  // This is usually the name of the camera that is in the SLAM config
  string component_reference = 2;
  // Additional information in the response
  google.protobuf.Struct extra = 99;
}

message GetPointCloudMapRequest {
  // Name of slam service
  string name = 1;
}

message GetPointCloudMapResponse {
  // pointclouds are returned as a set of bytes in the standard PCD format
  // https://pointclouds.org/documentation/tutorials/pcd_file_format.html
  bytes point_cloud_pcd = 1;
}

message GetInternalStateRequest {
  // Name of slam service
  string name = 1;
}

message GetInternalStateResponse {
  // Internal state of the SLAM algorithm required to continue mapping/localization
  bytes internal_state = 1;
}
