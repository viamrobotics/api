// source: component/inputcontroller/v1/input_controller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.Event', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.GetControlsRequest', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.GetControlsResponse', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.GetEventsRequest', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.GetEventsResponse', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.Status', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.StreamEventsRequest', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.StreamEventsResponse', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.TriggerEventRequest', null, global);
goog.exportSymbol('proto.viam.component.inputcontroller.v1.TriggerEventResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.GetControlsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.GetControlsRequest.displayName = 'proto.viam.component.inputcontroller.v1.GetControlsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.inputcontroller.v1.GetControlsResponse.repeatedFields_, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.GetControlsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.GetControlsResponse.displayName = 'proto.viam.component.inputcontroller.v1.GetControlsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.GetEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.GetEventsRequest.displayName = 'proto.viam.component.inputcontroller.v1.GetEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.inputcontroller.v1.GetEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.GetEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.GetEventsResponse.displayName = 'proto.viam.component.inputcontroller.v1.GetEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.TriggerEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.TriggerEventRequest.displayName = 'proto.viam.component.inputcontroller.v1.TriggerEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.TriggerEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.TriggerEventResponse.displayName = 'proto.viam.component.inputcontroller.v1.TriggerEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.Event.displayName = 'proto.viam.component.inputcontroller.v1.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.inputcontroller.v1.StreamEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.StreamEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.StreamEventsRequest.displayName = 'proto.viam.component.inputcontroller.v1.StreamEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.repeatedFields_, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.displayName = 'proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.StreamEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.StreamEventsResponse.displayName = 'proto.viam.component.inputcontroller.v1.StreamEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.inputcontroller.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.inputcontroller.v1.Status.repeatedFields_, null);
};
goog.inherits(proto.viam.component.inputcontroller.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.inputcontroller.v1.Status.displayName = 'proto.viam.component.inputcontroller.v1.Status';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.GetControlsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: jspb.Message.getFieldWithDefault(msg, 1, ""),
    extra: (f = msg.getExtra()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsRequest}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.GetControlsRequest;
  return proto.viam.component.inputcontroller.v1.GetControlsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsRequest}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setController(value);
      break;
    case 99:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.GetControlsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string controller = 1;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.getController = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.setController = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct extra = 99;
 * @return {?proto.google.protobuf.Struct}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.getExtra = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 99));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsRequest} returns this
*/
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.GetControlsRequest.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 99) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.GetControlsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsResponse}
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.GetControlsResponse;
  return proto.viam.component.inputcontroller.v1.GetControlsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsResponse}
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addControls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.GetControlsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.GetControlsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string controls = 1;
 * @return {!Array<string>}
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.getControlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsResponse} returns this
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.setControlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsResponse} returns this
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.addControls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.GetControlsResponse} returns this
 */
proto.viam.component.inputcontroller.v1.GetControlsResponse.prototype.clearControlsList = function() {
  return this.setControlsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.GetEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: jspb.Message.getFieldWithDefault(msg, 1, ""),
    extra: (f = msg.getExtra()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsRequest}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.GetEventsRequest;
  return proto.viam.component.inputcontroller.v1.GetEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsRequest}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setController(value);
      break;
    case 99:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.GetEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string controller = 1;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.getController = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.setController = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct extra = 99;
 * @return {?proto.google.protobuf.Struct}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.getExtra = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 99));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsRequest} returns this
*/
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.GetEventsRequest.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 99) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.GetEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.viam.component.inputcontroller.v1.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsResponse}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.GetEventsResponse;
  return proto.viam.component.inputcontroller.v1.GetEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsResponse}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.component.inputcontroller.v1.Event;
      reader.readMessage(value,proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.GetEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.GetEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.viam.component.inputcontroller.v1.Event>}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.viam.component.inputcontroller.v1.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.component.inputcontroller.v1.Event, 1));
};


/**
 * @param {!Array<!proto.viam.component.inputcontroller.v1.Event>} value
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsResponse} returns this
*/
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viam.component.inputcontroller.v1.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viam.component.inputcontroller.v1.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.GetEventsResponse} returns this
 */
proto.viam.component.inputcontroller.v1.GetEventsResponse.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.TriggerEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: jspb.Message.getFieldWithDefault(msg, 1, ""),
    event: (f = msg.getEvent()) && proto.viam.component.inputcontroller.v1.Event.toObject(includeInstance, f),
    extra: (f = msg.getExtra()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.TriggerEventRequest;
  return proto.viam.component.inputcontroller.v1.TriggerEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setController(value);
      break;
    case 2:
      var value = new proto.viam.component.inputcontroller.v1.Event;
      reader.readMessage(value,proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 99:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.TriggerEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string controller = 1;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.getController = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} returns this
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.setController = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.getEvent = function() {
  return /** @type{?proto.viam.component.inputcontroller.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.inputcontroller.v1.Event, 2));
};


/**
 * @param {?proto.viam.component.inputcontroller.v1.Event|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} returns this
*/
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} returns this
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Struct extra = 99;
 * @return {?proto.google.protobuf.Struct}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.getExtra = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 99));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} returns this
*/
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventRequest} returns this
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.TriggerEventRequest.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 99) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.TriggerEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventResponse}
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.TriggerEventResponse;
  return proto.viam.component.inputcontroller.v1.TriggerEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.TriggerEventResponse}
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.TriggerEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.TriggerEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.TriggerEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    event: jspb.Message.getFieldWithDefault(msg, 2, ""),
    control: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.Event;
  return proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setControl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getControl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.Event} returns this
*/
proto.viam.component.inputcontroller.v1.Event.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.Event} returns this
 */
proto.viam.component.inputcontroller.v1.Event.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string event = 2;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.Event} returns this
 */
proto.viam.component.inputcontroller.v1.Event.prototype.setEvent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string control = 3;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.getControl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.Event} returns this
 */
proto.viam.component.inputcontroller.v1.Event.prototype.setControl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double value = 4;
 * @return {number}
 */
proto.viam.component.inputcontroller.v1.Event.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.inputcontroller.v1.Event} returns this
 */
proto.viam.component.inputcontroller.v1.Event.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.StreamEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.toObject, includeInstance),
    extra: (f = msg.getExtra()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.StreamEventsRequest;
  return proto.viam.component.inputcontroller.v1.StreamEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setController(value);
      break;
    case 2:
      var value = new proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events;
      reader.readMessage(value,proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 99:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.StreamEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.serializeBinaryToWriter
    );
  }
  f = message.getExtra();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.toObject = function(includeInstance, msg) {
  var f, obj = {
    control: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    cancelledEventsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events;
  return proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addEvents(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCancelledEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCancelledEventsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string control = 1;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.getControl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.setControl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string events = 2;
 * @return {!Array<string>}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.getEventsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.setEventsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.addEvents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated string cancelled_events = 3;
 * @return {!Array<string>}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.getCancelledEventsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.setCancelledEventsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.addCancelledEvents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events.prototype.clearCancelledEventsList = function() {
  return this.setCancelledEventsList([]);
};


/**
 * optional string controller = 1;
 * @return {string}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.getController = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.setController = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Events events = 2;
 * @return {!Array<!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events>}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events, 2));
};


/**
 * @param {!Array<!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events>} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} returns this
*/
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viam.component.inputcontroller.v1.StreamEventsRequest.Events, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional google.protobuf.Struct extra = 99;
 * @return {?proto.google.protobuf.Struct}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.getExtra = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 99));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} returns this
*/
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.setExtra = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsRequest} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.clearExtra = function() {
  return this.setExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.StreamEventsRequest.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 99) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.StreamEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.viam.component.inputcontroller.v1.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsResponse}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.StreamEventsResponse;
  return proto.viam.component.inputcontroller.v1.StreamEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsResponse}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.component.inputcontroller.v1.Event;
      reader.readMessage(value,proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.StreamEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.StreamEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.getEvent = function() {
  return /** @type{?proto.viam.component.inputcontroller.v1.Event} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.inputcontroller.v1.Event, 1));
};


/**
 * @param {?proto.viam.component.inputcontroller.v1.Event|undefined} value
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsResponse} returns this
*/
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.inputcontroller.v1.StreamEventsResponse} returns this
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.inputcontroller.v1.StreamEventsResponse.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.inputcontroller.v1.Status.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.inputcontroller.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.inputcontroller.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.inputcontroller.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.viam.component.inputcontroller.v1.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.inputcontroller.v1.Status}
 */
proto.viam.component.inputcontroller.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.inputcontroller.v1.Status;
  return proto.viam.component.inputcontroller.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.inputcontroller.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.inputcontroller.v1.Status}
 */
proto.viam.component.inputcontroller.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.component.inputcontroller.v1.Event;
      reader.readMessage(value,proto.viam.component.inputcontroller.v1.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.inputcontroller.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.inputcontroller.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.inputcontroller.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.inputcontroller.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viam.component.inputcontroller.v1.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.viam.component.inputcontroller.v1.Event>}
 */
proto.viam.component.inputcontroller.v1.Status.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.viam.component.inputcontroller.v1.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.component.inputcontroller.v1.Event, 1));
};


/**
 * @param {!Array<!proto.viam.component.inputcontroller.v1.Event>} value
 * @return {!proto.viam.component.inputcontroller.v1.Status} returns this
*/
proto.viam.component.inputcontroller.v1.Status.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viam.component.inputcontroller.v1.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.component.inputcontroller.v1.Event}
 */
proto.viam.component.inputcontroller.v1.Status.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viam.component.inputcontroller.v1.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.inputcontroller.v1.Status} returns this
 */
proto.viam.component.inputcontroller.v1.Status.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


goog.object.extend(exports, proto.viam.component.inputcontroller.v1);
