syntax = "proto3";

package viam.component.audioin.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/component/audioin/v1";
option java_package = "com.viam.component.audioin.v1";

// An AudioInService services all audio inputss associated with a robot
service AudioInService {
  // GetAudio streams audio from the given audioin
  rpc GetAudio(GetAudioRequest) returns (stream GetAudioResponse) {
    option (google.api.http) = {get: "/viam/api/v1/component/audioin/{name}/get_audio"};
  }
  // GetProperties returns the properties of the audioin
  rpc GetProperties(common.v1.GetPropertiesRequest) returns (common.v1.GetPropertiesResponse) {
    option (google.api.http) = {get: "/viam/api/v1/component/audioin/{name}/properties"};
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {post: "/viam/api/v1/service/audioin/{name}/do_command"};
  }

  // GetGeometries returns the geometries of the component in their current configuration
  rpc GetGeometries(common.v1.GetGeometriesRequest) returns (common.v1.GetGeometriesResponse) {
    option (google.api.http) = {get: "/viam/api/v1/component/audioin/{name}/geometries"};
  }
}

message GetAudioRequest {
  string name = 1;
  // Desired duration of audio stream
  // If not set or set to 0, the stream is infinite
  float duration_seconds = 2;
  // Requested audio codec for the response (e.g., "mp3", "pcm16")
  string codec = 3;
  // To match a request to it's responses
  string request_id = 4;
  // Timestamp of the previous audio chunk, in nanoseconds, used for resuming and continuity.
  int64 previous_timestamp_nanoseconds = 5;
  google.protobuf.Struct extra = 99;
}

message GetAudioResponse {
  AudioChunk audio = 1;
  string request_id = 2;
}

message AudioChunk {
  // Audio data for this chunk, encoded according to the requested codec.
  bytes audio_data = 1;
  // Info about the audio stream for this chunk
  common.v1.AudioInfo audio_info = 2;
  int64 start_timestamp_nanoseconds = 3;
  int64 end_timestamp_nanoseconds = 4;
  // Sequential chunk number
  int32 sequence = 5;
}
