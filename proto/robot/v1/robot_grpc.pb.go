// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/robot/v1/robot.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotServiceClient is the client API for RobotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotServiceClient interface {
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
	LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error)
	// Get a specific robot by ID
	GetRobot(ctx context.Context, in *GetRobotRequest, opts ...grpc.CallOption) (*GetRobotResponse, error)
	GetRobotParts(ctx context.Context, in *GetRobotPartsRequest, opts ...grpc.CallOption) (*GetRobotPartsResponse, error)
	// Get a specific robot part by ID
	GetRobotPart(ctx context.Context, in *GetRobotPartRequest, opts ...grpc.CallOption) (*GetRobotPartResponse, error)
	GetRobotPartLogs(ctx context.Context, in *GetRobotPartLogsRequest, opts ...grpc.CallOption) (*GetRobotPartLogsResponse, error)
	TailRobotPartLogs(ctx context.Context, in *TailRobotPartLogsRequest, opts ...grpc.CallOption) (RobotService_TailRobotPartLogsClient, error)
	// Get a specific robot part histy by ID
	GetRobotPartHistory(ctx context.Context, in *GetRobotPartHistoryRequest, opts ...grpc.CallOption) (*GetRobotPartHistoryResponse, error)
	// Update a robot
	UpdateRobotPart(ctx context.Context, in *UpdateRobotPartRequest, opts ...grpc.CallOption) (*UpdateRobotPartResponse, error)
	// Create a new robot part
	NewRobotPart(ctx context.Context, in *NewRobotPartRequest, opts ...grpc.CallOption) (*NewRobotPartResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error)
	// Finds robots given a query
	FindRobots(ctx context.Context, in *FindRobotsRequest, opts ...grpc.CallOption) (*FindRobotsResponse, error)
	// NewRobot creates a new robot
	NewRobot(ctx context.Context, in *NewRobotRequest, opts ...grpc.CallOption) (*NewRobotResponse, error)
	// UpdateRobot updates a robot
	UpdateRobot(ctx context.Context, in *UpdateRobotRequest, opts ...grpc.CallOption) (*UpdateRobotResponse, error)
	// DelteRobot deletes a robot
	DeleteRobot(ctx context.Context, in *DeleteRobotRequest, opts ...grpc.CallOption) (*DeleteRobotResponse, error)
}

type robotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotServiceClient(cc grpc.ClientConnInterface) RobotServiceClient {
	return &robotServiceClient{cc}
}

func (c *robotServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/ListLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) LocationAuth(ctx context.Context, in *LocationAuthRequest, opts ...grpc.CallOption) (*LocationAuthResponse, error) {
	out := new(LocationAuthResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/LocationAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) GetRobot(ctx context.Context, in *GetRobotRequest, opts ...grpc.CallOption) (*GetRobotResponse, error) {
	out := new(GetRobotResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/GetRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) GetRobotParts(ctx context.Context, in *GetRobotPartsRequest, opts ...grpc.CallOption) (*GetRobotPartsResponse, error) {
	out := new(GetRobotPartsResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/GetRobotParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) GetRobotPart(ctx context.Context, in *GetRobotPartRequest, opts ...grpc.CallOption) (*GetRobotPartResponse, error) {
	out := new(GetRobotPartResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/GetRobotPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) GetRobotPartLogs(ctx context.Context, in *GetRobotPartLogsRequest, opts ...grpc.CallOption) (*GetRobotPartLogsResponse, error) {
	out := new(GetRobotPartLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/GetRobotPartLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) TailRobotPartLogs(ctx context.Context, in *TailRobotPartLogsRequest, opts ...grpc.CallOption) (RobotService_TailRobotPartLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RobotService_ServiceDesc.Streams[0], "/proto.robot.v1.RobotService/TailRobotPartLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &robotServiceTailRobotPartLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RobotService_TailRobotPartLogsClient interface {
	Recv() (*TailRobotPartLogsResponse, error)
	grpc.ClientStream
}

type robotServiceTailRobotPartLogsClient struct {
	grpc.ClientStream
}

func (x *robotServiceTailRobotPartLogsClient) Recv() (*TailRobotPartLogsResponse, error) {
	m := new(TailRobotPartLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *robotServiceClient) GetRobotPartHistory(ctx context.Context, in *GetRobotPartHistoryRequest, opts ...grpc.CallOption) (*GetRobotPartHistoryResponse, error) {
	out := new(GetRobotPartHistoryResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/GetRobotPartHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) UpdateRobotPart(ctx context.Context, in *UpdateRobotPartRequest, opts ...grpc.CallOption) (*UpdateRobotPartResponse, error) {
	out := new(UpdateRobotPartResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/UpdateRobotPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) NewRobotPart(ctx context.Context, in *NewRobotPartRequest, opts ...grpc.CallOption) (*NewRobotPartResponse, error) {
	out := new(NewRobotPartResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/NewRobotPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) MarkPartAsMain(ctx context.Context, in *MarkPartAsMainRequest, opts ...grpc.CallOption) (*MarkPartAsMainResponse, error) {
	out := new(MarkPartAsMainResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/MarkPartAsMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) FindRobots(ctx context.Context, in *FindRobotsRequest, opts ...grpc.CallOption) (*FindRobotsResponse, error) {
	out := new(FindRobotsResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/FindRobots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) NewRobot(ctx context.Context, in *NewRobotRequest, opts ...grpc.CallOption) (*NewRobotResponse, error) {
	out := new(NewRobotResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/NewRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) UpdateRobot(ctx context.Context, in *UpdateRobotRequest, opts ...grpc.CallOption) (*UpdateRobotResponse, error) {
	out := new(UpdateRobotResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/UpdateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) DeleteRobot(ctx context.Context, in *DeleteRobotRequest, opts ...grpc.CallOption) (*DeleteRobotResponse, error) {
	out := new(DeleteRobotResponse)
	err := c.cc.Invoke(ctx, "/proto.robot.v1.RobotService/DeleteRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotServiceServer is the server API for RobotService service.
// All implementations must embed UnimplementedRobotServiceServer
// for forward compatibility
type RobotServiceServer interface {
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
	LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error)
	// Get a specific robot by ID
	GetRobot(context.Context, *GetRobotRequest) (*GetRobotResponse, error)
	GetRobotParts(context.Context, *GetRobotPartsRequest) (*GetRobotPartsResponse, error)
	// Get a specific robot part by ID
	GetRobotPart(context.Context, *GetRobotPartRequest) (*GetRobotPartResponse, error)
	GetRobotPartLogs(context.Context, *GetRobotPartLogsRequest) (*GetRobotPartLogsResponse, error)
	TailRobotPartLogs(*TailRobotPartLogsRequest, RobotService_TailRobotPartLogsServer) error
	// Get a specific robot part histy by ID
	GetRobotPartHistory(context.Context, *GetRobotPartHistoryRequest) (*GetRobotPartHistoryResponse, error)
	// Update a robot
	UpdateRobotPart(context.Context, *UpdateRobotPartRequest) (*UpdateRobotPartResponse, error)
	// Create a new robot part
	NewRobotPart(context.Context, *NewRobotPartRequest) (*NewRobotPartResponse, error)
	// Marks the given part as the main part, and all the others as not
	MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error)
	// Finds robots given a query
	FindRobots(context.Context, *FindRobotsRequest) (*FindRobotsResponse, error)
	// NewRobot creates a new robot
	NewRobot(context.Context, *NewRobotRequest) (*NewRobotResponse, error)
	// UpdateRobot updates a robot
	UpdateRobot(context.Context, *UpdateRobotRequest) (*UpdateRobotResponse, error)
	// DelteRobot deletes a robot
	DeleteRobot(context.Context, *DeleteRobotRequest) (*DeleteRobotResponse, error)
	mustEmbedUnimplementedRobotServiceServer()
}

// UnimplementedRobotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRobotServiceServer struct {
}

func (UnimplementedRobotServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedRobotServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedRobotServiceServer) LocationAuth(context.Context, *LocationAuthRequest) (*LocationAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationAuth not implemented")
}
func (UnimplementedRobotServiceServer) GetRobot(context.Context, *GetRobotRequest) (*GetRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobot not implemented")
}
func (UnimplementedRobotServiceServer) GetRobotParts(context.Context, *GetRobotPartsRequest) (*GetRobotPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotParts not implemented")
}
func (UnimplementedRobotServiceServer) GetRobotPart(context.Context, *GetRobotPartRequest) (*GetRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPart not implemented")
}
func (UnimplementedRobotServiceServer) GetRobotPartLogs(context.Context, *GetRobotPartLogsRequest) (*GetRobotPartLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPartLogs not implemented")
}
func (UnimplementedRobotServiceServer) TailRobotPartLogs(*TailRobotPartLogsRequest, RobotService_TailRobotPartLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TailRobotPartLogs not implemented")
}
func (UnimplementedRobotServiceServer) GetRobotPartHistory(context.Context, *GetRobotPartHistoryRequest) (*GetRobotPartHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobotPartHistory not implemented")
}
func (UnimplementedRobotServiceServer) UpdateRobotPart(context.Context, *UpdateRobotPartRequest) (*UpdateRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRobotPart not implemented")
}
func (UnimplementedRobotServiceServer) NewRobotPart(context.Context, *NewRobotPartRequest) (*NewRobotPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRobotPart not implemented")
}
func (UnimplementedRobotServiceServer) MarkPartAsMain(context.Context, *MarkPartAsMainRequest) (*MarkPartAsMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPartAsMain not implemented")
}
func (UnimplementedRobotServiceServer) FindRobots(context.Context, *FindRobotsRequest) (*FindRobotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRobots not implemented")
}
func (UnimplementedRobotServiceServer) NewRobot(context.Context, *NewRobotRequest) (*NewRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRobot not implemented")
}
func (UnimplementedRobotServiceServer) UpdateRobot(context.Context, *UpdateRobotRequest) (*UpdateRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRobot not implemented")
}
func (UnimplementedRobotServiceServer) DeleteRobot(context.Context, *DeleteRobotRequest) (*DeleteRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobot not implemented")
}
func (UnimplementedRobotServiceServer) mustEmbedUnimplementedRobotServiceServer() {}

// UnsafeRobotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotServiceServer will
// result in compilation errors.
type UnsafeRobotServiceServer interface {
	mustEmbedUnimplementedRobotServiceServer()
}

func RegisterRobotServiceServer(s grpc.ServiceRegistrar, srv RobotServiceServer) {
	s.RegisterService(&RobotService_ServiceDesc, srv)
}

func _RobotService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_LocationAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).LocationAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/LocationAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).LocationAuth(ctx, req.(*LocationAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_GetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/GetRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobot(ctx, req.(*GetRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_GetRobotParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobotParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/GetRobotParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobotParts(ctx, req.(*GetRobotPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_GetRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/GetRobotPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobotPart(ctx, req.(*GetRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_GetRobotPartLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobotPartLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/GetRobotPartLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobotPartLogs(ctx, req.(*GetRobotPartLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_TailRobotPartLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRobotPartLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RobotServiceServer).TailRobotPartLogs(m, &robotServiceTailRobotPartLogsServer{stream})
}

type RobotService_TailRobotPartLogsServer interface {
	Send(*TailRobotPartLogsResponse) error
	grpc.ServerStream
}

type robotServiceTailRobotPartLogsServer struct {
	grpc.ServerStream
}

func (x *robotServiceTailRobotPartLogsServer) Send(m *TailRobotPartLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RobotService_GetRobotPartHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotPartHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).GetRobotPartHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/GetRobotPartHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).GetRobotPartHistory(ctx, req.(*GetRobotPartHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_UpdateRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).UpdateRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/UpdateRobotPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).UpdateRobotPart(ctx, req.(*UpdateRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_NewRobotPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRobotPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).NewRobotPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/NewRobotPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).NewRobotPart(ctx, req.(*NewRobotPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_MarkPartAsMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPartAsMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).MarkPartAsMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/MarkPartAsMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).MarkPartAsMain(ctx, req.(*MarkPartAsMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_FindRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRobotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).FindRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/FindRobots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).FindRobots(ctx, req.(*FindRobotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_NewRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).NewRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/NewRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).NewRobot(ctx, req.(*NewRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_UpdateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).UpdateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/UpdateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).UpdateRobot(ctx, req.(*UpdateRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_DeleteRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).DeleteRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.robot.v1.RobotService/DeleteRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).DeleteRobot(ctx, req.(*DeleteRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotService_ServiceDesc is the grpc.ServiceDesc for RobotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.robot.v1.RobotService",
	HandlerType: (*RobotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizations",
			Handler:    _RobotService_ListOrganizations_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _RobotService_ListLocations_Handler,
		},
		{
			MethodName: "LocationAuth",
			Handler:    _RobotService_LocationAuth_Handler,
		},
		{
			MethodName: "GetRobot",
			Handler:    _RobotService_GetRobot_Handler,
		},
		{
			MethodName: "GetRobotParts",
			Handler:    _RobotService_GetRobotParts_Handler,
		},
		{
			MethodName: "GetRobotPart",
			Handler:    _RobotService_GetRobotPart_Handler,
		},
		{
			MethodName: "GetRobotPartLogs",
			Handler:    _RobotService_GetRobotPartLogs_Handler,
		},
		{
			MethodName: "GetRobotPartHistory",
			Handler:    _RobotService_GetRobotPartHistory_Handler,
		},
		{
			MethodName: "UpdateRobotPart",
			Handler:    _RobotService_UpdateRobotPart_Handler,
		},
		{
			MethodName: "NewRobotPart",
			Handler:    _RobotService_NewRobotPart_Handler,
		},
		{
			MethodName: "MarkPartAsMain",
			Handler:    _RobotService_MarkPartAsMain_Handler,
		},
		{
			MethodName: "FindRobots",
			Handler:    _RobotService_FindRobots_Handler,
		},
		{
			MethodName: "NewRobot",
			Handler:    _RobotService_NewRobot_Handler,
		},
		{
			MethodName: "UpdateRobot",
			Handler:    _RobotService_UpdateRobot_Handler,
		},
		{
			MethodName: "DeleteRobot",
			Handler:    _RobotService_DeleteRobot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailRobotPartLogs",
			Handler:       _RobotService_TailRobotPartLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/robot/v1/robot.proto",
}
