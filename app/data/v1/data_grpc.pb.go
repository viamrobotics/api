// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// TabularDataByFilter queries tabular data and metadata based on given filters.
	TabularDataByFilter(ctx context.Context, in *TabularDataByFilterRequest, opts ...grpc.CallOption) (DataService_TabularDataByFilterClient, error)
	// BinaryData apis are used for both images and file data
	BinaryDataByFilter(ctx context.Context, in *BinaryDataByFilterRequest, opts ...grpc.CallOption) (DataService_BinaryDataByFilterClient, error)
	BinaryDataByIDs(ctx context.Context, in *BinaryDataByIDsRequest, opts ...grpc.CallOption) (DataService_BinaryDataByIDsClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) TabularDataByFilter(ctx context.Context, in *TabularDataByFilterRequest, opts ...grpc.CallOption) (DataService_TabularDataByFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], "/viam.app.data.v1.DataService/TabularDataByFilter", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceTabularDataByFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_TabularDataByFilterClient interface {
	Recv() (*TabularDataByFilterResponse, error)
	grpc.ClientStream
}

type dataServiceTabularDataByFilterClient struct {
	grpc.ClientStream
}

func (x *dataServiceTabularDataByFilterClient) Recv() (*TabularDataByFilterResponse, error) {
	m := new(TabularDataByFilterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) BinaryDataByFilter(ctx context.Context, in *BinaryDataByFilterRequest, opts ...grpc.CallOption) (DataService_BinaryDataByFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[1], "/viam.app.data.v1.DataService/BinaryDataByFilter", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceBinaryDataByFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_BinaryDataByFilterClient interface {
	Recv() (*BinaryDataByFilterResponse, error)
	grpc.ClientStream
}

type dataServiceBinaryDataByFilterClient struct {
	grpc.ClientStream
}

func (x *dataServiceBinaryDataByFilterClient) Recv() (*BinaryDataByFilterResponse, error) {
	m := new(BinaryDataByFilterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) BinaryDataByIDs(ctx context.Context, in *BinaryDataByIDsRequest, opts ...grpc.CallOption) (DataService_BinaryDataByIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[2], "/viam.app.data.v1.DataService/BinaryDataByIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceBinaryDataByIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_BinaryDataByIDsClient interface {
	Recv() (*BinaryDataByIDsResponse, error)
	grpc.ClientStream
}

type dataServiceBinaryDataByIDsClient struct {
	grpc.ClientStream
}

func (x *dataServiceBinaryDataByIDsClient) Recv() (*BinaryDataByIDsResponse, error) {
	m := new(BinaryDataByIDsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// TabularDataByFilter queries tabular data and metadata based on given filters.
	TabularDataByFilter(*TabularDataByFilterRequest, DataService_TabularDataByFilterServer) error
	// BinaryData apis are used for both images and file data
	BinaryDataByFilter(*BinaryDataByFilterRequest, DataService_BinaryDataByFilterServer) error
	BinaryDataByIDs(*BinaryDataByIDsRequest, DataService_BinaryDataByIDsServer) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) TabularDataByFilter(*TabularDataByFilterRequest, DataService_TabularDataByFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method TabularDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) BinaryDataByFilter(*BinaryDataByFilterRequest, DataService_BinaryDataByFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method BinaryDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) BinaryDataByIDs(*BinaryDataByIDsRequest, DataService_BinaryDataByIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method BinaryDataByIDs not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_TabularDataByFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TabularDataByFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).TabularDataByFilter(m, &dataServiceTabularDataByFilterServer{stream})
}

type DataService_TabularDataByFilterServer interface {
	Send(*TabularDataByFilterResponse) error
	grpc.ServerStream
}

type dataServiceTabularDataByFilterServer struct {
	grpc.ServerStream
}

func (x *dataServiceTabularDataByFilterServer) Send(m *TabularDataByFilterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_BinaryDataByFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BinaryDataByFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).BinaryDataByFilter(m, &dataServiceBinaryDataByFilterServer{stream})
}

type DataService_BinaryDataByFilterServer interface {
	Send(*BinaryDataByFilterResponse) error
	grpc.ServerStream
}

type dataServiceBinaryDataByFilterServer struct {
	grpc.ServerStream
}

func (x *dataServiceBinaryDataByFilterServer) Send(m *BinaryDataByFilterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_BinaryDataByIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BinaryDataByIDsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).BinaryDataByIDs(m, &dataServiceBinaryDataByIDsServer{stream})
}

type DataService_BinaryDataByIDsServer interface {
	Send(*BinaryDataByIDsResponse) error
	grpc.ServerStream
}

type dataServiceBinaryDataByIDsServer struct {
	grpc.ServerStream
}

func (x *dataServiceBinaryDataByIDsServer) Send(m *BinaryDataByIDsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TabularDataByFilter",
			Handler:       _DataService_TabularDataByFilter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BinaryDataByFilter",
			Handler:       _DataService_BinaryDataByFilter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BinaryDataByIDs",
			Handler:       _DataService_BinaryDataByIDs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/data/v1/data.proto",
}
