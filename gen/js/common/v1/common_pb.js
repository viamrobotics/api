// source: common/v1/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.viam.common.v1.ActuatorStatus', null, global);
goog.exportSymbol('proto.viam.common.v1.AnalogStatus', null, global);
goog.exportSymbol('proto.viam.common.v1.BoardStatus', null, global);
goog.exportSymbol('proto.viam.common.v1.DigitalInterruptStatus', null, global);
goog.exportSymbol('proto.viam.common.v1.GeoPoint', null, global);
goog.exportSymbol('proto.viam.common.v1.GeometriesInFrame', null, global);
goog.exportSymbol('proto.viam.common.v1.Geometry', null, global);
goog.exportSymbol('proto.viam.common.v1.Geometry.GeometryTypeCase', null, global);
goog.exportSymbol('proto.viam.common.v1.Orientation', null, global);
goog.exportSymbol('proto.viam.common.v1.PointCloudObject', null, global);
goog.exportSymbol('proto.viam.common.v1.Pose', null, global);
goog.exportSymbol('proto.viam.common.v1.PoseInFrame', null, global);
goog.exportSymbol('proto.viam.common.v1.RectangularPrism', null, global);
goog.exportSymbol('proto.viam.common.v1.ResourceName', null, global);
goog.exportSymbol('proto.viam.common.v1.Sphere', null, global);
goog.exportSymbol('proto.viam.common.v1.Transform', null, global);
goog.exportSymbol('proto.viam.common.v1.Vector3', null, global);
goog.exportSymbol('proto.viam.common.v1.WorldState', null, global);
goog.exportSymbol('proto.viam.common.v1.safetyHeartbeatMonitored', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.ResourceName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.ResourceName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.ResourceName.displayName = 'proto.viam.common.v1.ResourceName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.BoardStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.BoardStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.BoardStatus.displayName = 'proto.viam.common.v1.BoardStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.AnalogStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.AnalogStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.AnalogStatus.displayName = 'proto.viam.common.v1.AnalogStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.DigitalInterruptStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.DigitalInterruptStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.DigitalInterruptStatus.displayName = 'proto.viam.common.v1.DigitalInterruptStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Pose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.Pose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Pose.displayName = 'proto.viam.common.v1.Pose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Orientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.Orientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Orientation.displayName = 'proto.viam.common.v1.Orientation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.PoseInFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.PoseInFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.PoseInFrame.displayName = 'proto.viam.common.v1.PoseInFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Vector3.displayName = 'proto.viam.common.v1.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Sphere = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.Sphere, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Sphere.displayName = 'proto.viam.common.v1.Sphere';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.RectangularPrism = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.RectangularPrism, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.RectangularPrism.displayName = 'proto.viam.common.v1.RectangularPrism';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Geometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viam.common.v1.Geometry.oneofGroups_);
};
goog.inherits(proto.viam.common.v1.Geometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Geometry.displayName = 'proto.viam.common.v1.Geometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.GeometriesInFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.common.v1.GeometriesInFrame.repeatedFields_, null);
};
goog.inherits(proto.viam.common.v1.GeometriesInFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.GeometriesInFrame.displayName = 'proto.viam.common.v1.GeometriesInFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.PointCloudObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.PointCloudObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.PointCloudObject.displayName = 'proto.viam.common.v1.PointCloudObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.GeoPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.GeoPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.GeoPoint.displayName = 'proto.viam.common.v1.GeoPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.Transform.displayName = 'proto.viam.common.v1.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.WorldState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.common.v1.WorldState.repeatedFields_, null);
};
goog.inherits(proto.viam.common.v1.WorldState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.WorldState.displayName = 'proto.viam.common.v1.WorldState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.common.v1.ActuatorStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.common.v1.ActuatorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.common.v1.ActuatorStatus.displayName = 'proto.viam.common.v1.ActuatorStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.ResourceName.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.ResourceName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.ResourceName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.ResourceName.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subtype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.ResourceName}
 */
proto.viam.common.v1.ResourceName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.ResourceName;
  return proto.viam.common.v1.ResourceName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.ResourceName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.ResourceName}
 */
proto.viam.common.v1.ResourceName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.ResourceName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.ResourceName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.ResourceName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.ResourceName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubtype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.viam.common.v1.ResourceName.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.ResourceName} returns this
 */
proto.viam.common.v1.ResourceName.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.viam.common.v1.ResourceName.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.ResourceName} returns this
 */
proto.viam.common.v1.ResourceName.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string subtype = 3;
 * @return {string}
 */
proto.viam.common.v1.ResourceName.prototype.getSubtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.ResourceName} returns this
 */
proto.viam.common.v1.ResourceName.prototype.setSubtype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.viam.common.v1.ResourceName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.ResourceName} returns this
 */
proto.viam.common.v1.ResourceName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.BoardStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.BoardStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.BoardStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.BoardStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    analogsMap: (f = msg.getAnalogsMap()) ? f.toObject(includeInstance, proto.viam.common.v1.AnalogStatus.toObject) : [],
    digitalInterruptsMap: (f = msg.getDigitalInterruptsMap()) ? f.toObject(includeInstance, proto.viam.common.v1.DigitalInterruptStatus.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.BoardStatus}
 */
proto.viam.common.v1.BoardStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.BoardStatus;
  return proto.viam.common.v1.BoardStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.BoardStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.BoardStatus}
 */
proto.viam.common.v1.BoardStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAnalogsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.viam.common.v1.AnalogStatus.deserializeBinaryFromReader, "", new proto.viam.common.v1.AnalogStatus());
         });
      break;
    case 2:
      var value = msg.getDigitalInterruptsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.viam.common.v1.DigitalInterruptStatus.deserializeBinaryFromReader, "", new proto.viam.common.v1.DigitalInterruptStatus());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.BoardStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.BoardStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.BoardStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.BoardStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnalogsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.viam.common.v1.AnalogStatus.serializeBinaryToWriter);
  }
  f = message.getDigitalInterruptsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.viam.common.v1.DigitalInterruptStatus.serializeBinaryToWriter);
  }
};


/**
 * map<string, AnalogStatus> analogs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.viam.common.v1.AnalogStatus>}
 */
proto.viam.common.v1.BoardStatus.prototype.getAnalogsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.viam.common.v1.AnalogStatus>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.viam.common.v1.AnalogStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.viam.common.v1.BoardStatus} returns this
 */
proto.viam.common.v1.BoardStatus.prototype.clearAnalogsMap = function() {
  this.getAnalogsMap().clear();
  return this;};


/**
 * map<string, DigitalInterruptStatus> digital_interrupts = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.viam.common.v1.DigitalInterruptStatus>}
 */
proto.viam.common.v1.BoardStatus.prototype.getDigitalInterruptsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.viam.common.v1.DigitalInterruptStatus>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.viam.common.v1.DigitalInterruptStatus));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.viam.common.v1.BoardStatus} returns this
 */
proto.viam.common.v1.BoardStatus.prototype.clearDigitalInterruptsMap = function() {
  this.getDigitalInterruptsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.AnalogStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.AnalogStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.AnalogStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.AnalogStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.AnalogStatus}
 */
proto.viam.common.v1.AnalogStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.AnalogStatus;
  return proto.viam.common.v1.AnalogStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.AnalogStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.AnalogStatus}
 */
proto.viam.common.v1.AnalogStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.AnalogStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.AnalogStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.AnalogStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.AnalogStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.viam.common.v1.AnalogStatus.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.AnalogStatus} returns this
 */
proto.viam.common.v1.AnalogStatus.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.DigitalInterruptStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.DigitalInterruptStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.DigitalInterruptStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.DigitalInterruptStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.DigitalInterruptStatus}
 */
proto.viam.common.v1.DigitalInterruptStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.DigitalInterruptStatus;
  return proto.viam.common.v1.DigitalInterruptStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.DigitalInterruptStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.DigitalInterruptStatus}
 */
proto.viam.common.v1.DigitalInterruptStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.DigitalInterruptStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.DigitalInterruptStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.DigitalInterruptStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.DigitalInterruptStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.viam.common.v1.DigitalInterruptStatus.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.DigitalInterruptStatus} returns this
 */
proto.viam.common.v1.DigitalInterruptStatus.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Pose.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Pose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Pose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Pose.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    oX: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    oY: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    oZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    theta: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Pose}
 */
proto.viam.common.v1.Pose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Pose;
  return proto.viam.common.v1.Pose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Pose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Pose}
 */
proto.viam.common.v1.Pose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Pose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Pose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Pose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Pose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getOX();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getOY();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getOZ();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getTheta();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double o_x = 4;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getOX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setOX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double o_y = 5;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getOY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setOY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double o_z = 6;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getOZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setOZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double theta = 7;
 * @return {number}
 */
proto.viam.common.v1.Pose.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Pose} returns this
 */
proto.viam.common.v1.Pose.prototype.setTheta = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Orientation.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Orientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Orientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Orientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    oX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    oY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    oZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    theta: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Orientation}
 */
proto.viam.common.v1.Orientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Orientation;
  return proto.viam.common.v1.Orientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Orientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Orientation}
 */
proto.viam.common.v1.Orientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Orientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Orientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Orientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Orientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getOY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getOZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTheta();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double o_x = 1;
 * @return {number}
 */
proto.viam.common.v1.Orientation.prototype.getOX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Orientation} returns this
 */
proto.viam.common.v1.Orientation.prototype.setOX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double o_y = 2;
 * @return {number}
 */
proto.viam.common.v1.Orientation.prototype.getOY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Orientation} returns this
 */
proto.viam.common.v1.Orientation.prototype.setOY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double o_z = 3;
 * @return {number}
 */
proto.viam.common.v1.Orientation.prototype.getOZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Orientation} returns this
 */
proto.viam.common.v1.Orientation.prototype.setOZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double theta = 4;
 * @return {number}
 */
proto.viam.common.v1.Orientation.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Orientation} returns this
 */
proto.viam.common.v1.Orientation.prototype.setTheta = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.PoseInFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.PoseInFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.PoseInFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.PoseInFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    referenceFrame: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pose: (f = msg.getPose()) && proto.viam.common.v1.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.PoseInFrame}
 */
proto.viam.common.v1.PoseInFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.PoseInFrame;
  return proto.viam.common.v1.PoseInFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.PoseInFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.PoseInFrame}
 */
proto.viam.common.v1.PoseInFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceFrame(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.Pose;
      reader.readMessage(value,proto.viam.common.v1.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.PoseInFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.PoseInFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.PoseInFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.PoseInFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferenceFrame();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.common.v1.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional string reference_frame = 1;
 * @return {string}
 */
proto.viam.common.v1.PoseInFrame.prototype.getReferenceFrame = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.PoseInFrame} returns this
 */
proto.viam.common.v1.PoseInFrame.prototype.setReferenceFrame = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Pose pose = 2;
 * @return {?proto.viam.common.v1.Pose}
 */
proto.viam.common.v1.PoseInFrame.prototype.getPose = function() {
  return /** @type{?proto.viam.common.v1.Pose} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.Pose, 2));
};


/**
 * @param {?proto.viam.common.v1.Pose|undefined} value
 * @return {!proto.viam.common.v1.PoseInFrame} returns this
*/
proto.viam.common.v1.PoseInFrame.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.PoseInFrame} returns this
 */
proto.viam.common.v1.PoseInFrame.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.PoseInFrame.prototype.hasPose = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Vector3}
 */
proto.viam.common.v1.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Vector3;
  return proto.viam.common.v1.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Vector3}
 */
proto.viam.common.v1.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.viam.common.v1.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Vector3} returns this
 */
proto.viam.common.v1.Vector3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.viam.common.v1.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Vector3} returns this
 */
proto.viam.common.v1.Vector3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.viam.common.v1.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Vector3} returns this
 */
proto.viam.common.v1.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Sphere.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Sphere.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Sphere} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Sphere.toObject = function(includeInstance, msg) {
  var f, obj = {
    radiusMm: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Sphere}
 */
proto.viam.common.v1.Sphere.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Sphere;
  return proto.viam.common.v1.Sphere.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Sphere} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Sphere}
 */
proto.viam.common.v1.Sphere.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadiusMm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Sphere.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Sphere.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Sphere} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Sphere.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadiusMm();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double radius_mm = 1;
 * @return {number}
 */
proto.viam.common.v1.Sphere.prototype.getRadiusMm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.Sphere} returns this
 */
proto.viam.common.v1.Sphere.prototype.setRadiusMm = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.RectangularPrism.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.RectangularPrism.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.RectangularPrism} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.RectangularPrism.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimsMm: (f = msg.getDimsMm()) && proto.viam.common.v1.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.RectangularPrism}
 */
proto.viam.common.v1.RectangularPrism.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.RectangularPrism;
  return proto.viam.common.v1.RectangularPrism.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.RectangularPrism} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.RectangularPrism}
 */
proto.viam.common.v1.RectangularPrism.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.common.v1.Vector3;
      reader.readMessage(value,proto.viam.common.v1.Vector3.deserializeBinaryFromReader);
      msg.setDimsMm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.RectangularPrism.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.RectangularPrism.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.RectangularPrism} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.RectangularPrism.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimsMm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.common.v1.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3 dims_mm = 1;
 * @return {?proto.viam.common.v1.Vector3}
 */
proto.viam.common.v1.RectangularPrism.prototype.getDimsMm = function() {
  return /** @type{?proto.viam.common.v1.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.Vector3, 1));
};


/**
 * @param {?proto.viam.common.v1.Vector3|undefined} value
 * @return {!proto.viam.common.v1.RectangularPrism} returns this
*/
proto.viam.common.v1.RectangularPrism.prototype.setDimsMm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.RectangularPrism} returns this
 */
proto.viam.common.v1.RectangularPrism.prototype.clearDimsMm = function() {
  return this.setDimsMm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.RectangularPrism.prototype.hasDimsMm = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viam.common.v1.Geometry.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.viam.common.v1.Geometry.GeometryTypeCase = {
  GEOMETRY_TYPE_NOT_SET: 0,
  SPHERE: 2,
  BOX: 3
};

/**
 * @return {proto.viam.common.v1.Geometry.GeometryTypeCase}
 */
proto.viam.common.v1.Geometry.prototype.getGeometryTypeCase = function() {
  return /** @type {proto.viam.common.v1.Geometry.GeometryTypeCase} */(jspb.Message.computeOneofCase(this, proto.viam.common.v1.Geometry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Geometry.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Geometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Geometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Geometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    center: (f = msg.getCenter()) && proto.viam.common.v1.Pose.toObject(includeInstance, f),
    sphere: (f = msg.getSphere()) && proto.viam.common.v1.Sphere.toObject(includeInstance, f),
    box: (f = msg.getBox()) && proto.viam.common.v1.RectangularPrism.toObject(includeInstance, f),
    label: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Geometry}
 */
proto.viam.common.v1.Geometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Geometry;
  return proto.viam.common.v1.Geometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Geometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Geometry}
 */
proto.viam.common.v1.Geometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.common.v1.Pose;
      reader.readMessage(value,proto.viam.common.v1.Pose.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.Sphere;
      reader.readMessage(value,proto.viam.common.v1.Sphere.deserializeBinaryFromReader);
      msg.setSphere(value);
      break;
    case 3:
      var value = new proto.viam.common.v1.RectangularPrism;
      reader.readMessage(value,proto.viam.common.v1.RectangularPrism.deserializeBinaryFromReader);
      msg.setBox(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Geometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Geometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Geometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Geometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.common.v1.Pose.serializeBinaryToWriter
    );
  }
  f = message.getSphere();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.common.v1.Sphere.serializeBinaryToWriter
    );
  }
  f = message.getBox();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.viam.common.v1.RectangularPrism.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Pose center = 1;
 * @return {?proto.viam.common.v1.Pose}
 */
proto.viam.common.v1.Geometry.prototype.getCenter = function() {
  return /** @type{?proto.viam.common.v1.Pose} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.Pose, 1));
};


/**
 * @param {?proto.viam.common.v1.Pose|undefined} value
 * @return {!proto.viam.common.v1.Geometry} returns this
*/
proto.viam.common.v1.Geometry.prototype.setCenter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.Geometry} returns this
 */
proto.viam.common.v1.Geometry.prototype.clearCenter = function() {
  return this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.Geometry.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sphere sphere = 2;
 * @return {?proto.viam.common.v1.Sphere}
 */
proto.viam.common.v1.Geometry.prototype.getSphere = function() {
  return /** @type{?proto.viam.common.v1.Sphere} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.Sphere, 2));
};


/**
 * @param {?proto.viam.common.v1.Sphere|undefined} value
 * @return {!proto.viam.common.v1.Geometry} returns this
*/
proto.viam.common.v1.Geometry.prototype.setSphere = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.viam.common.v1.Geometry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.Geometry} returns this
 */
proto.viam.common.v1.Geometry.prototype.clearSphere = function() {
  return this.setSphere(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.Geometry.prototype.hasSphere = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RectangularPrism box = 3;
 * @return {?proto.viam.common.v1.RectangularPrism}
 */
proto.viam.common.v1.Geometry.prototype.getBox = function() {
  return /** @type{?proto.viam.common.v1.RectangularPrism} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.RectangularPrism, 3));
};


/**
 * @param {?proto.viam.common.v1.RectangularPrism|undefined} value
 * @return {!proto.viam.common.v1.Geometry} returns this
*/
proto.viam.common.v1.Geometry.prototype.setBox = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.viam.common.v1.Geometry.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.Geometry} returns this
 */
proto.viam.common.v1.Geometry.prototype.clearBox = function() {
  return this.setBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.Geometry.prototype.hasBox = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string label = 4;
 * @return {string}
 */
proto.viam.common.v1.Geometry.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.Geometry} returns this
 */
proto.viam.common.v1.Geometry.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.common.v1.GeometriesInFrame.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.GeometriesInFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.GeometriesInFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.GeometriesInFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.GeometriesInFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    referenceFrame: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geometriesList: jspb.Message.toObjectList(msg.getGeometriesList(),
    proto.viam.common.v1.Geometry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.GeometriesInFrame}
 */
proto.viam.common.v1.GeometriesInFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.GeometriesInFrame;
  return proto.viam.common.v1.GeometriesInFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.GeometriesInFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.GeometriesInFrame}
 */
proto.viam.common.v1.GeometriesInFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceFrame(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.Geometry;
      reader.readMessage(value,proto.viam.common.v1.Geometry.deserializeBinaryFromReader);
      msg.addGeometries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.GeometriesInFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.GeometriesInFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.GeometriesInFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.GeometriesInFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferenceFrame();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viam.common.v1.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string reference_frame = 1;
 * @return {string}
 */
proto.viam.common.v1.GeometriesInFrame.prototype.getReferenceFrame = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.GeometriesInFrame} returns this
 */
proto.viam.common.v1.GeometriesInFrame.prototype.setReferenceFrame = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Geometry geometries = 2;
 * @return {!Array<!proto.viam.common.v1.Geometry>}
 */
proto.viam.common.v1.GeometriesInFrame.prototype.getGeometriesList = function() {
  return /** @type{!Array<!proto.viam.common.v1.Geometry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.common.v1.Geometry, 2));
};


/**
 * @param {!Array<!proto.viam.common.v1.Geometry>} value
 * @return {!proto.viam.common.v1.GeometriesInFrame} returns this
*/
proto.viam.common.v1.GeometriesInFrame.prototype.setGeometriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viam.common.v1.Geometry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.common.v1.Geometry}
 */
proto.viam.common.v1.GeometriesInFrame.prototype.addGeometries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viam.common.v1.Geometry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.common.v1.GeometriesInFrame} returns this
 */
proto.viam.common.v1.GeometriesInFrame.prototype.clearGeometriesList = function() {
  return this.setGeometriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.PointCloudObject.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.PointCloudObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.PointCloudObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.PointCloudObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointCloud: msg.getPointCloud_asB64(),
    geometries: (f = msg.getGeometries()) && proto.viam.common.v1.GeometriesInFrame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.PointCloudObject}
 */
proto.viam.common.v1.PointCloudObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.PointCloudObject;
  return proto.viam.common.v1.PointCloudObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.PointCloudObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.PointCloudObject}
 */
proto.viam.common.v1.PointCloudObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPointCloud(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.GeometriesInFrame;
      reader.readMessage(value,proto.viam.common.v1.GeometriesInFrame.deserializeBinaryFromReader);
      msg.setGeometries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.PointCloudObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.PointCloudObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.PointCloudObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.PointCloudObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointCloud_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGeometries();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.common.v1.GeometriesInFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes point_cloud = 1;
 * @return {string}
 */
proto.viam.common.v1.PointCloudObject.prototype.getPointCloud = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes point_cloud = 1;
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {string}
 */
proto.viam.common.v1.PointCloudObject.prototype.getPointCloud_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPointCloud()));
};


/**
 * optional bytes point_cloud = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {!Uint8Array}
 */
proto.viam.common.v1.PointCloudObject.prototype.getPointCloud_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPointCloud()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.common.v1.PointCloudObject} returns this
 */
proto.viam.common.v1.PointCloudObject.prototype.setPointCloud = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional GeometriesInFrame geometries = 2;
 * @return {?proto.viam.common.v1.GeometriesInFrame}
 */
proto.viam.common.v1.PointCloudObject.prototype.getGeometries = function() {
  return /** @type{?proto.viam.common.v1.GeometriesInFrame} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.GeometriesInFrame, 2));
};


/**
 * @param {?proto.viam.common.v1.GeometriesInFrame|undefined} value
 * @return {!proto.viam.common.v1.PointCloudObject} returns this
*/
proto.viam.common.v1.PointCloudObject.prototype.setGeometries = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.PointCloudObject} returns this
 */
proto.viam.common.v1.PointCloudObject.prototype.clearGeometries = function() {
  return this.setGeometries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.PointCloudObject.prototype.hasGeometries = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.GeoPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.GeoPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.GeoPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.GeoPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.GeoPoint}
 */
proto.viam.common.v1.GeoPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.GeoPoint;
  return proto.viam.common.v1.GeoPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.GeoPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.GeoPoint}
 */
proto.viam.common.v1.GeoPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.GeoPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.GeoPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.GeoPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.GeoPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.viam.common.v1.GeoPoint.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.GeoPoint} returns this
 */
proto.viam.common.v1.GeoPoint.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.viam.common.v1.GeoPoint.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.common.v1.GeoPoint} returns this
 */
proto.viam.common.v1.GeoPoint.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    referenceFrame: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poseInObserverFrame: (f = msg.getPoseInObserverFrame()) && proto.viam.common.v1.PoseInFrame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.Transform}
 */
proto.viam.common.v1.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.Transform;
  return proto.viam.common.v1.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.Transform}
 */
proto.viam.common.v1.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceFrame(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.PoseInFrame;
      reader.readMessage(value,proto.viam.common.v1.PoseInFrame.deserializeBinaryFromReader);
      msg.setPoseInObserverFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferenceFrame();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoseInObserverFrame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.common.v1.PoseInFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional string reference_frame = 1;
 * @return {string}
 */
proto.viam.common.v1.Transform.prototype.getReferenceFrame = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.common.v1.Transform} returns this
 */
proto.viam.common.v1.Transform.prototype.setReferenceFrame = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PoseInFrame pose_in_observer_frame = 2;
 * @return {?proto.viam.common.v1.PoseInFrame}
 */
proto.viam.common.v1.Transform.prototype.getPoseInObserverFrame = function() {
  return /** @type{?proto.viam.common.v1.PoseInFrame} */ (
    jspb.Message.getWrapperField(this, proto.viam.common.v1.PoseInFrame, 2));
};


/**
 * @param {?proto.viam.common.v1.PoseInFrame|undefined} value
 * @return {!proto.viam.common.v1.Transform} returns this
*/
proto.viam.common.v1.Transform.prototype.setPoseInObserverFrame = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.common.v1.Transform} returns this
 */
proto.viam.common.v1.Transform.prototype.clearPoseInObserverFrame = function() {
  return this.setPoseInObserverFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.common.v1.Transform.prototype.hasPoseInObserverFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.common.v1.WorldState.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.WorldState.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.WorldState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.WorldState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.WorldState.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstaclesList: jspb.Message.toObjectList(msg.getObstaclesList(),
    proto.viam.common.v1.GeometriesInFrame.toObject, includeInstance),
    interactionSpacesList: jspb.Message.toObjectList(msg.getInteractionSpacesList(),
    proto.viam.common.v1.GeometriesInFrame.toObject, includeInstance),
    transformsList: jspb.Message.toObjectList(msg.getTransformsList(),
    proto.viam.common.v1.Transform.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.WorldState}
 */
proto.viam.common.v1.WorldState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.WorldState;
  return proto.viam.common.v1.WorldState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.WorldState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.WorldState}
 */
proto.viam.common.v1.WorldState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.common.v1.GeometriesInFrame;
      reader.readMessage(value,proto.viam.common.v1.GeometriesInFrame.deserializeBinaryFromReader);
      msg.addObstacles(value);
      break;
    case 2:
      var value = new proto.viam.common.v1.GeometriesInFrame;
      reader.readMessage(value,proto.viam.common.v1.GeometriesInFrame.deserializeBinaryFromReader);
      msg.addInteractionSpaces(value);
      break;
    case 3:
      var value = new proto.viam.common.v1.Transform;
      reader.readMessage(value,proto.viam.common.v1.Transform.deserializeBinaryFromReader);
      msg.addTransforms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.WorldState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.WorldState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.WorldState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.WorldState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObstaclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viam.common.v1.GeometriesInFrame.serializeBinaryToWriter
    );
  }
  f = message.getInteractionSpacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viam.common.v1.GeometriesInFrame.serializeBinaryToWriter
    );
  }
  f = message.getTransformsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.viam.common.v1.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GeometriesInFrame obstacles = 1;
 * @return {!Array<!proto.viam.common.v1.GeometriesInFrame>}
 */
proto.viam.common.v1.WorldState.prototype.getObstaclesList = function() {
  return /** @type{!Array<!proto.viam.common.v1.GeometriesInFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.common.v1.GeometriesInFrame, 1));
};


/**
 * @param {!Array<!proto.viam.common.v1.GeometriesInFrame>} value
 * @return {!proto.viam.common.v1.WorldState} returns this
*/
proto.viam.common.v1.WorldState.prototype.setObstaclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viam.common.v1.GeometriesInFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.common.v1.GeometriesInFrame}
 */
proto.viam.common.v1.WorldState.prototype.addObstacles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viam.common.v1.GeometriesInFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.common.v1.WorldState} returns this
 */
proto.viam.common.v1.WorldState.prototype.clearObstaclesList = function() {
  return this.setObstaclesList([]);
};


/**
 * repeated GeometriesInFrame interaction_spaces = 2;
 * @return {!Array<!proto.viam.common.v1.GeometriesInFrame>}
 */
proto.viam.common.v1.WorldState.prototype.getInteractionSpacesList = function() {
  return /** @type{!Array<!proto.viam.common.v1.GeometriesInFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.common.v1.GeometriesInFrame, 2));
};


/**
 * @param {!Array<!proto.viam.common.v1.GeometriesInFrame>} value
 * @return {!proto.viam.common.v1.WorldState} returns this
*/
proto.viam.common.v1.WorldState.prototype.setInteractionSpacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viam.common.v1.GeometriesInFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.common.v1.GeometriesInFrame}
 */
proto.viam.common.v1.WorldState.prototype.addInteractionSpaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viam.common.v1.GeometriesInFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.common.v1.WorldState} returns this
 */
proto.viam.common.v1.WorldState.prototype.clearInteractionSpacesList = function() {
  return this.setInteractionSpacesList([]);
};


/**
 * repeated Transform transforms = 3;
 * @return {!Array<!proto.viam.common.v1.Transform>}
 */
proto.viam.common.v1.WorldState.prototype.getTransformsList = function() {
  return /** @type{!Array<!proto.viam.common.v1.Transform>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.common.v1.Transform, 3));
};


/**
 * @param {!Array<!proto.viam.common.v1.Transform>} value
 * @return {!proto.viam.common.v1.WorldState} returns this
*/
proto.viam.common.v1.WorldState.prototype.setTransformsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.viam.common.v1.Transform=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.common.v1.Transform}
 */
proto.viam.common.v1.WorldState.prototype.addTransforms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.viam.common.v1.Transform, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.common.v1.WorldState} returns this
 */
proto.viam.common.v1.WorldState.prototype.clearTransformsList = function() {
  return this.setTransformsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.common.v1.ActuatorStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.common.v1.ActuatorStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.common.v1.ActuatorStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.ActuatorStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    isMoving: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.common.v1.ActuatorStatus}
 */
proto.viam.common.v1.ActuatorStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.common.v1.ActuatorStatus;
  return proto.viam.common.v1.ActuatorStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.common.v1.ActuatorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.common.v1.ActuatorStatus}
 */
proto.viam.common.v1.ActuatorStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMoving(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.common.v1.ActuatorStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.common.v1.ActuatorStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.common.v1.ActuatorStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.common.v1.ActuatorStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsMoving();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_moving = 1;
 * @return {boolean}
 */
proto.viam.common.v1.ActuatorStatus.prototype.getIsMoving = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.common.v1.ActuatorStatus} returns this
 */
proto.viam.common.v1.ActuatorStatus.prototype.setIsMoving = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `safetyHeartbeatMonitored`.
 * @type {!jspb.ExtensionFieldInfo<boolean>}
 */
proto.viam.common.v1.safetyHeartbeatMonitored = new jspb.ExtensionFieldInfo(
    84260,
    {safetyHeartbeatMonitored: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.MethodOptions.extensionsBinary[84260] = new jspb.ExtensionFieldBinaryInfo(
    proto.viam.common.v1.safetyHeartbeatMonitored,
    jspb.BinaryReader.prototype.readBool,
    jspb.BinaryWriter.prototype.writeBool,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MethodOptions.extensions[84260] = proto.viam.common.v1.safetyHeartbeatMonitored;

goog.object.extend(exports, proto.viam.common.v1);
