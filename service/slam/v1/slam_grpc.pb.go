// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/slam/v1/slam.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLAMServiceClient is the client API for SLAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLAMServiceClient interface {
	// GetPositionNew returns the current estimated position of the robot with
	// respect to a returned component reference. Note: this function will be
	// renamed to GetPosition and replace the existing one in the near future
	GetPositionNew(ctx context.Context, in *GetPositionNewRequest, opts ...grpc.CallOption) (*GetPositionNewResponse, error)
	// TODO (RSDK-1066): This will soon be renamed to GetPointCloudMap
	// GetPointCloudMapStream returns the latest point cloud map available
	GetPointCloudMapStream(ctx context.Context, in *GetPointCloudMapStreamRequest, opts ...grpc.CallOption) (SLAMService_GetPointCloudMapStreamClient, error)
	// TODO (RSDK-1066): This will be renamed to GetInternalState
	// GetInternalStateStream returns the internal map as defined by the specified slam
	// algorithm required to continue mapping/localizing.
	// This endpoint is not intended for end users.
	GetInternalStateStream(ctx context.Context, in *GetInternalStateStreamRequest, opts ...grpc.CallOption) (SLAMService_GetInternalStateStreamClient, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type sLAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSLAMServiceClient(cc grpc.ClientConnInterface) SLAMServiceClient {
	return &sLAMServiceClient{cc}
}

func (c *sLAMServiceClient) GetPositionNew(ctx context.Context, in *GetPositionNewRequest, opts ...grpc.CallOption) (*GetPositionNewResponse, error) {
	out := new(GetPositionNewResponse)
	err := c.cc.Invoke(ctx, "/viam.service.slam.v1.SLAMService/GetPositionNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAMServiceClient) GetPointCloudMapStream(ctx context.Context, in *GetPointCloudMapStreamRequest, opts ...grpc.CallOption) (SLAMService_GetPointCloudMapStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLAMService_ServiceDesc.Streams[0], "/viam.service.slam.v1.SLAMService/GetPointCloudMapStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLAMServiceGetPointCloudMapStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLAMService_GetPointCloudMapStreamClient interface {
	Recv() (*GetPointCloudMapStreamResponse, error)
	grpc.ClientStream
}

type sLAMServiceGetPointCloudMapStreamClient struct {
	grpc.ClientStream
}

func (x *sLAMServiceGetPointCloudMapStreamClient) Recv() (*GetPointCloudMapStreamResponse, error) {
	m := new(GetPointCloudMapStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLAMServiceClient) GetInternalStateStream(ctx context.Context, in *GetInternalStateStreamRequest, opts ...grpc.CallOption) (SLAMService_GetInternalStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLAMService_ServiceDesc.Streams[1], "/viam.service.slam.v1.SLAMService/GetInternalStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLAMServiceGetInternalStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLAMService_GetInternalStateStreamClient interface {
	Recv() (*GetInternalStateStreamResponse, error)
	grpc.ClientStream
}

type sLAMServiceGetInternalStateStreamClient struct {
	grpc.ClientStream
}

func (x *sLAMServiceGetInternalStateStreamClient) Recv() (*GetInternalStateStreamResponse, error) {
	m := new(GetInternalStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLAMServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.service.slam.v1.SLAMService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLAMServiceServer is the server API for SLAMService service.
// All implementations must embed UnimplementedSLAMServiceServer
// for forward compatibility
type SLAMServiceServer interface {
	// GetPositionNew returns the current estimated position of the robot with
	// respect to a returned component reference. Note: this function will be
	// renamed to GetPosition and replace the existing one in the near future
	GetPositionNew(context.Context, *GetPositionNewRequest) (*GetPositionNewResponse, error)
	// TODO (RSDK-1066): This will soon be renamed to GetPointCloudMap
	// GetPointCloudMapStream returns the latest point cloud map available
	GetPointCloudMapStream(*GetPointCloudMapStreamRequest, SLAMService_GetPointCloudMapStreamServer) error
	// TODO (RSDK-1066): This will be renamed to GetInternalState
	// GetInternalStateStream returns the internal map as defined by the specified slam
	// algorithm required to continue mapping/localizing.
	// This endpoint is not intended for end users.
	GetInternalStateStream(*GetInternalStateStreamRequest, SLAMService_GetInternalStateStreamServer) error
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedSLAMServiceServer()
}

// UnimplementedSLAMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSLAMServiceServer struct {
}

func (UnimplementedSLAMServiceServer) GetPositionNew(context.Context, *GetPositionNewRequest) (*GetPositionNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionNew not implemented")
}
func (UnimplementedSLAMServiceServer) GetPointCloudMapStream(*GetPointCloudMapStreamRequest, SLAMService_GetPointCloudMapStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPointCloudMapStream not implemented")
}
func (UnimplementedSLAMServiceServer) GetInternalStateStream(*GetInternalStateStreamRequest, SLAMService_GetInternalStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInternalStateStream not implemented")
}
func (UnimplementedSLAMServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedSLAMServiceServer) mustEmbedUnimplementedSLAMServiceServer() {}

// UnsafeSLAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLAMServiceServer will
// result in compilation errors.
type UnsafeSLAMServiceServer interface {
	mustEmbedUnimplementedSLAMServiceServer()
}

func RegisterSLAMServiceServer(s grpc.ServiceRegistrar, srv SLAMServiceServer) {
	s.RegisterService(&SLAMService_ServiceDesc, srv)
}

func _SLAMService_GetPositionNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAMServiceServer).GetPositionNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.slam.v1.SLAMService/GetPositionNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAMServiceServer).GetPositionNew(ctx, req.(*GetPositionNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAMService_GetPointCloudMapStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPointCloudMapStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLAMServiceServer).GetPointCloudMapStream(m, &sLAMServiceGetPointCloudMapStreamServer{stream})
}

type SLAMService_GetPointCloudMapStreamServer interface {
	Send(*GetPointCloudMapStreamResponse) error
	grpc.ServerStream
}

type sLAMServiceGetPointCloudMapStreamServer struct {
	grpc.ServerStream
}

func (x *sLAMServiceGetPointCloudMapStreamServer) Send(m *GetPointCloudMapStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SLAMService_GetInternalStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInternalStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLAMServiceServer).GetInternalStateStream(m, &sLAMServiceGetInternalStateStreamServer{stream})
}

type SLAMService_GetInternalStateStreamServer interface {
	Send(*GetInternalStateStreamResponse) error
	grpc.ServerStream
}

type sLAMServiceGetInternalStateStreamServer struct {
	grpc.ServerStream
}

func (x *sLAMServiceGetInternalStateStreamServer) Send(m *GetInternalStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SLAMService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAMServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.slam.v1.SLAMService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAMServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SLAMService_ServiceDesc is the grpc.ServiceDesc for SLAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.slam.v1.SLAMService",
	HandlerType: (*SLAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPositionNew",
			Handler:    _SLAMService_GetPositionNew_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _SLAMService_DoCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPointCloudMapStream",
			Handler:       _SLAMService_GetPointCloudMapStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInternalStateStream",
			Handler:       _SLAMService_GetInternalStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/slam/v1/slam.proto",
}
