syntax = "proto3";

package viam.app.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "tagger/v1/tagger.proto";

option go_package = "go.viam.com/api/app/v1";

service AppService {
  // Organizations

  // Create a new organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  // List organizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse);

  // Get an organization
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);

  // Update an organization
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);

  // Delete an organization
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse);

  // List all members of an organization and all invited members to the organization.
  rpc ListOrganizationMembers(ListOrganizationMembersRequest) returns (ListOrganizationMembersResponse);

  // Create an organization invite to an organization
  rpc CreateOrganizationInvite(CreateOrganizationInviteRequest) returns (CreateOrganizationInviteResponse);

  // Delete an organization member from an organization
  rpc DeleteOrganizationMember(DeleteOrganizationMemberRequest) returns (DeleteOrganizationMemberResponse);

  // Delete an organization invite
  rpc DeleteOrganizationInvite(DeleteOrganizationInviteRequest) returns (DeleteOrganizationInviteResponse);

  // Resend an organization invite
  rpc ResendOrganizationInvite(ResendOrganizationInviteRequest) returns (ResendOrganizationInviteResponse);

  // Location

  // Create a location
  rpc CreateLocation(CreateLocationRequest) returns (CreateLocationResponse);

  // Get a location
  rpc GetLocation(GetLocationRequest) returns (GetLocationResponse);

  // Update a location
  rpc UpdateLocation(UpdateLocationRequest) returns (UpdateLocationResponse);

  // Delete a location
  rpc DeleteLocation(DeleteLocationRequest) returns (DeleteLocationResponse);

  // Get a list of locations
  rpc ListLocations(ListLocationsRequest) returns (ListLocationsResponse);

  // Share a location with an organization
  rpc ShareLocation(ShareLocationRequest) returns (ShareLocationResponse);

  // Stop sharing a location with an organization
  rpc UnshareLocation(UnshareLocationRequest) returns (UnshareLocationResponse);

  // Get a location's authorization secrets
  rpc LocationAuth(LocationAuthRequest) returns (LocationAuthResponse);

  // Create a new generated Secret in the Location.
  //  - Succeeds if there are no more than 2 active secrets after creation.
  rpc CreateLocationSecret(CreateLocationSecretRequest) returns (CreateLocationSecretResponse);

  // Delete a Secret from the Location.
  rpc DeleteLocationSecret(DeleteLocationSecretRequest) returns (DeleteLocationSecretResponse);

  // Get a specific robot by ID
  rpc GetRobot(GetRobotRequest) returns (GetRobotResponse);

  rpc GetRobotParts(GetRobotPartsRequest) returns (GetRobotPartsResponse);

  // Get a specific robot part by ID
  rpc GetRobotPart(GetRobotPartRequest) returns (GetRobotPartResponse);

  rpc GetRobotPartLogs(GetRobotPartLogsRequest) returns (GetRobotPartLogsResponse);

  rpc TailRobotPartLogs(TailRobotPartLogsRequest) returns (stream TailRobotPartLogsResponse);

  // Get a specific robot part histy by ID
  rpc GetRobotPartHistory(GetRobotPartHistoryRequest) returns (GetRobotPartHistoryResponse);

  // Update a robot
  rpc UpdateRobotPart(UpdateRobotPartRequest) returns (UpdateRobotPartResponse);

  // Create a new robot part
  rpc NewRobotPart(NewRobotPartRequest) returns (NewRobotPartResponse);

  // Delete a robot part
  rpc DeleteRobotPart(DeleteRobotPartRequest) returns (DeleteRobotPartResponse);

  // Marks the given part as the main part, and all the others as not
  rpc MarkPartAsMain(MarkPartAsMainRequest) returns (MarkPartAsMainResponse);

  // Marks part for restart. Once the robot part checks-in with the app the flag
  // is reset on the robot part. Calling this multiple times before a robot part
  // checks-in has no affect.
  // Note: This API may be removed in the near future.
  // TODO(APP-388): Remove
  rpc MarkPartForRestart(MarkPartForRestartRequest) returns (MarkPartForRestartResponse);

  // Create a new generated Secret in the Robot Part.
  //  - Succeeds if there are no more than 2 active secrets after creation.
  rpc CreateRobotPartSecret(CreateRobotPartSecretRequest) returns (CreateRobotPartSecretResponse);

  // Delete a Secret from the RobotPart.
  rpc DeleteRobotPartSecret(DeleteRobotPartSecretRequest) returns (DeleteRobotPartSecretResponse);

  // Get a list of robots
  rpc ListRobots(ListRobotsRequest) returns (ListRobotsResponse);

  // NewRobot creates a new robot
  rpc NewRobot(NewRobotRequest) returns (NewRobotResponse);

  // UpdateRobot updates a robot
  rpc UpdateRobot(UpdateRobotRequest) returns (UpdateRobotResponse);

  // DeleteRobot deletes a robot
  rpc DeleteRobot(DeleteRobotRequest) returns (DeleteRobotResponse);

  // Fragments

  // Gets a list of fragments
  rpc ListFragments(ListFragmentsRequest) returns (ListFragmentsResponse);

  // Gets a single fragment
  rpc GetFragment(GetFragmentRequest) returns (GetFragmentResponse);

  // Creates a fragment
  rpc CreateFragment(CreateFragmentRequest) returns (CreateFragmentResponse);

  // Updates a fragment
  rpc UpdateFragment(UpdateFragmentRequest) returns (UpdateFragmentResponse);

  // Deletes a fragment
  rpc DeleteFragment(DeleteFragmentRequest) returns (DeleteFragmentResponse);
}

message Robot {
  string id = 1 [(tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  string name = 2 [(tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  string location = 3 [(tagger.v1.tags) = "bson:\"location\" json:\"location\""];
  google.protobuf.Timestamp last_access = 4 [(tagger.v1.tags) = "bson:\"last_access\" json:\"last_access\""];
  google.protobuf.Timestamp created_on = 5 [(tagger.v1.tags) = "bson:\"created_on\""];
}

message RobotPart {
  string id = 1 [(tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  string name = 2 [(tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  // dns_name part name used for fqdn and local fqdn. Anytime the Name is updated this should be sanitized and updated as well.
  string dns_name = 10 [(tagger.v1.tags) = "bson:\"dns_name\" json:\"dns_name\""];
  string secret = 3 [(tagger.v1.tags) = "bson:\"secret\" json:\"secret,omitempty\""];
  string robot = 4 [(tagger.v1.tags) = "bson:\"robot\" json:\"robot\""];
  // Store the location_id to allow for unique indexes across parts and locations. This filed MUST be updated each time the robots location
  // changes.
  string location_id = 12 [(tagger.v1.tags) = "bson:\"location_id\" json:\"-\""];
  google.protobuf.Struct robot_config = 5 [(tagger.v1.tags) = "bson:\"config\" json:\"robot_config\""];
  google.protobuf.Timestamp last_access = 6 [(tagger.v1.tags) = "bson:\"last_access\" json:\"last_access\""];
  google.protobuf.Struct user_supplied_info = 7 [(tagger.v1.tags) = "bson:\"user_supplied_info\" json:\"user_supplied_info\""];
  bool main_part = 8 [(tagger.v1.tags) = "bson:\"main_part\" json:\"main_part\""];
  string fqdn = 9;
  string local_fqdn = 11;
  google.protobuf.Timestamp created_on = 13 [(tagger.v1.tags) = "bson:\"created_on\""];

  // List of secrets allowed for authentication.
  repeated SharedSecret secrets = 14 [(tagger.v1.tags) = "bson:\"secrets\""];
}

message RobotPartHistoryEntry {
  string part = 1 [(tagger.v1.tags) = "bson:\"part\" json:\"part\""];
  string robot = 2 [(tagger.v1.tags) = "bson:\"robot\" json:\"robot\""];
  google.protobuf.Timestamp when = 3 [(tagger.v1.tags) = "bson:\"when\" json:\"when\""];
  RobotPart old = 4 [(tagger.v1.tags) = "bson:\"old\" json:\"old\""];
}

message ListOrganizationsRequest {}

message Organization {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_on = 3;
}

message OrganizationMember {
  string user_id = 1;
  repeated string emails = 2;
  google.protobuf.Timestamp date_added = 3;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message OrganizationInvite {
  string organization_id = 1;
  string email = 2;
  google.protobuf.Timestamp created_on = 3;
  int64 robot_count = 4;
}

message CreateOrganizationRequest {
  string name = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationRequest {
  string organization_id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationRequest {
  string organization_id = 1;
  string name = 2;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string organization_id = 1;
}

message DeleteOrganizationResponse {}

message ListOrganizationMembersRequest {
  string organization_id = 1;
}

message ListOrganizationMembersResponse {
  string organization_id = 1;
  repeated OrganizationMember members = 2;
  repeated OrganizationInvite invites = 3;
}

message CreateOrganizationInviteRequest {
  string organization_id = 1;
  string email = 2;
}

message CreateOrganizationInviteResponse {
  OrganizationInvite invite = 1;
}

message DeleteOrganizationInviteRequest {
  string organization_id = 1;
  string email = 2;
}

message DeleteOrganizationInviteResponse {}

message ResendOrganizationInviteRequest {
  string organization_id = 1;
  string email = 2;
}

message ResendOrganizationInviteResponse {
  OrganizationInvite invite = 1;
}

message DeleteOrganizationMemberRequest {
  string organization_id = 1;
  string user_id = 2;
}

message DeleteOrganizationMemberResponse {}

// Location
//

message LocationOrganization {
  // Organization ID the location is shared with.
  string organization_id = 1;
  // Whether the organization is the primary owner or not.
  bool primary = 2;
}

message LocationAuth {
  // Deprecated: use secrets field.
  string secret = 1 [deprecated = true];

  // Location ID containing this LocationAuth.
  string location_id = 2;

  // List of secrets used to authenticate to the Location.
  repeated SharedSecret secrets = 3;
}

message Location {
  // Location ID.
  string id = 1;
  // Location name.
  string name = 2;
  // Location ID of the parent location.
  string parent_location_id = 4;
  // Location authentication secrets.
  LocationAuth auth = 5;
  // Organizations that the location is shared with.
  repeated LocationOrganization organizations = 6;
  // Location creation timestamp.
  google.protobuf.Timestamp created_on = 3;
  //
  int32 robot_count = 7;
}

// SharedSecret is a secret used for LocationAuth and RobotParts.
message SharedSecret {
  enum State {
    STATE_UNSPECIFIED = 0;
    // Secret is enabled and can be used in authentication.
    STATE_ENABLED = 1;
    // Secret is disabled and must not be used to authenticate to rpc.
    STATE_DISABLED = 2;
  }

  string id = 1 [(tagger.v1.tags) = "bson:\"id\""];

  // The payload of the secret. Used during authentication to the rpc framework.
  string secret = 2 [(tagger.v1.tags) = "bson:\"secret\""];

  // Date/time the secret was first created.
  google.protobuf.Timestamp created_on = 3 [(tagger.v1.tags) = "bson:\"created_on\" json:\"created_on\""];

  // State of the shared secret. In most cases it should be enabled. We may support
  // disabling a specific secret while keeping it in the database.
  State state = 4 [(tagger.v1.tags) = "bson:\"state\""];
}

message CreateLocationRequest {
  // Organization ID to create the location under.
  string organization_id = 1;
  // Name of the location.
  string name = 2;
  // The new parent location to move the location under.
  optional string parent_location_id = 3;
}

message CreateLocationResponse {
  // Location object is returned.
  Location location = 1;
}

message GetLocationRequest {
  // Location ID of location to get.
  string location_id = 1;
}

message GetLocationResponse {
  // Location object is returned.
  Location location = 1;
}

message UpdateLocationRequest {
  // Location ID of location to update.
  string location_id = 1;
  // The new to be updated on location.
  optional string name = 2;
  // The new parent location to move the location under.
  optional string parent_location_id = 3;
}

message UpdateLocationResponse {
  // Location object is returned.
  Location location = 1;
}

message DeleteLocationRequest {
  // Location ID of location to delete.
  string location_id = 1;
}

message DeleteLocationResponse {}

message ListLocationsRequest {
  // Organization ID under which to list all locations.
  string organization_id = 1;
}

message ShareLocationRequest {
  // Location ID to be shared.
  string location_id = 1;
  // Organization ID to share the location with.
  string organization_id = 2;
}

message ShareLocationResponse {}

message UnshareLocationRequest {
  // Location ID to be unshared.
  string location_id = 1;
  // Organization ID to unshare the location with.
  string organization_id = 2;
}

message UnshareLocationResponse {}

message ListLocationsResponse {
  repeated Location locations = 1;
}

message CreateLocationSecretRequest {
  // Location ID to create the secret in.
  string location_id = 1;
}

message CreateLocationSecretResponse {
  // Location's auth after updates.
  LocationAuth auth = 1;
}

message DeleteLocationSecretRequest {
  string location_id = 1;
  string secret_id = 2;
}
message DeleteLocationSecretResponse {}

message LocationAuthRequest {
  string location_id = 1;
}

message LocationAuthResponse {
  LocationAuth auth = 1;
}

message GetRobotRequest {
  string id = 1;
}

message GetRobotResponse {
  Robot robot = 1;
}

message GetRobotPartsRequest {
  string robot_id = 1;
}

message GetRobotPartsResponse {
  repeated RobotPart parts = 1;
}

message GetRobotPartRequest {
  string id = 1;
}

message GetRobotPartResponse {
  RobotPart part = 1;
  string config_json = 2;
}

message GetRobotPartLogsRequest {
  string id = 1;
  bool errors_only = 2;
  optional string filter = 3;
  optional string page_token = 4;
}

message LogEntry {
  string host = 1;
  string level = 2;
  google.protobuf.Timestamp time = 3;
  string logger_name = 4;
  string message = 5;
  google.protobuf.Struct caller = 6;
  string stack = 7;
  repeated google.protobuf.Struct fields = 8;
}

message GetRobotPartLogsResponse {
  repeated LogEntry logs = 1;
  string next_page_token = 2;
}

message TailRobotPartLogsRequest {
  string id = 1;
  bool errors_only = 2;
  optional string filter = 3;
}

message TailRobotPartLogsResponse {
  repeated LogEntry logs = 1;
}

message GetRobotPartHistoryRequest {
  string id = 1;
}

message GetRobotPartHistoryResponse {
  repeated RobotPartHistoryEntry history = 1;
}

message UpdateRobotPartRequest {
  string id = 1;
  string name = 2;
  google.protobuf.Struct robot_config = 3;
}

message UpdateRobotPartResponse {
  RobotPart part = 1;
}

message NewRobotPartRequest {
  string robot_id = 1;
  string part_name = 2;
}

message NewRobotPartResponse {
  string part_id = 1;
}

message DeleteRobotPartRequest {
  string part_id = 1;
}

message DeleteRobotPartResponse {}

message Fragment {
  string id = 1 [(tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  string name = 2 [(tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  google.protobuf.Struct fragment = 3 [(tagger.v1.tags) = "bson:\"fragment\" json:\"fragment\""];
  string organization_owner = 4 [(tagger.v1.tags) = "bson:\"organization_owner\" json:\"owner\""];
  bool public = 5 [(tagger.v1.tags) = "bson:\"public\" json:\"public\""];
  google.protobuf.Timestamp created_on = 6 [(tagger.v1.tags) = "bson:\"created_on\""];
  string organization_name = 7;
  bool readonly = 8;
  // number of robot parts using this fragment
  int32 robot_part_count = 9;
  // number of organizations using this fragment
  int32 organization_count = 10;
  // whether the organization(s) using this fragment is the same as the fragment org
  bool only_used_by_owner = 11;
}

message ListFragmentsRequest {
  string organization_id = 1;
  bool show_public = 2;
}

message ListFragmentsResponse {
  repeated Fragment fragments = 1;
}

message GetFragmentRequest {
  string id = 1;
}

message GetFragmentResponse {
  Fragment fragment = 1;
}

message CreateFragmentRequest {
  string name = 1;
  google.protobuf.Struct config = 2;
}

message CreateFragmentResponse {
  Fragment fragment = 1;
}

message UpdateFragmentRequest {
  string id = 1;
  string name = 2;
  google.protobuf.Struct config = 3;
  optional bool public = 4;
}

message UpdateFragmentResponse {
  Fragment fragment = 1;
}

message DeleteFragmentRequest {
  string id = 1;
}

message DeleteFragmentResponse {}

message ListRobotsRequest {
  string location_id = 1;
}

message ListRobotsResponse {
  repeated Robot robots = 1;
}

message NewRobotRequest {
  string name = 1;
  string location = 2;
}

message NewRobotResponse {
  string id = 1;
}

message UpdateRobotRequest {
  string id = 1;
  string name = 2;
  string location = 3;
}

message UpdateRobotResponse {
  Robot robot = 1;
}

message DeleteRobotRequest {
  string id = 1;
}

message DeleteRobotResponse {}

message MarkPartAsMainRequest {
  string part_id = 1;
}

message MarkPartAsMainResponse {}

message MarkPartForRestartRequest {
  string part_id = 1;
}
message MarkPartForRestartResponse {}

message CreateRobotPartSecretRequest {
  // Robot Part ID to create the secret in.
  string part_id = 1;
}

message CreateRobotPartSecretResponse {
  // Location's auth after updates.
  RobotPart part = 1;
}

message DeleteRobotPartSecretRequest {
  string part_id = 1;
  string secret_id = 2;
}

message DeleteRobotPartSecretResponse {}
