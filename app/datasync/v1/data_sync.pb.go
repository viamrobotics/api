// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: app/datasync/v1/data_sync.proto

package v1

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED    DataType = 0
	DataType_DATA_TYPE_BINARY_SENSOR  DataType = 1
	DataType_DATA_TYPE_TABULAR_SENSOR DataType = 2
	DataType_DATA_TYPE_FILE           DataType = 3
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_UNSPECIFIED",
		1: "DATA_TYPE_BINARY_SENSOR",
		2: "DATA_TYPE_TABULAR_SENSOR",
		3: "DATA_TYPE_FILE",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED":    0,
		"DATA_TYPE_BINARY_SENSOR":  1,
		"DATA_TYPE_TABULAR_SENSOR": 2,
		"DATA_TYPE_FILE":           3,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_datasync_v1_data_sync_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_app_datasync_v1_data_sync_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{0}
}

type SensorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRequested *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_requested,json=timeRequested,proto3" json:"time_requested,omitempty"`
	TimeReceived  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
}

func (x *SensorMetadata) Reset() {
	*x = SensorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMetadata) ProtoMessage() {}

func (x *SensorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMetadata.ProtoReflect.Descriptor instead.
func (*SensorMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{0}
}

func (x *SensorMetadata) GetTimeRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRequested
	}
	return nil
}

func (x *SensorMetadata) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

type SensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SensorMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SensorData_Struct
	//	*SensorData_Binary
	Data isSensorData_Data `protobuf_oneof:"data"`
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{1}
}

func (x *SensorData) GetMetadata() *SensorMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *SensorData) GetData() isSensorData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SensorData) GetStruct() *structpb.Struct {
	if x, ok := x.GetData().(*SensorData_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *SensorData) GetBinary() []byte {
	if x, ok := x.GetData().(*SensorData_Binary); ok {
		return x.Binary
	}
	return nil
}

type isSensorData_Data interface {
	isSensorData_Data()
}

type SensorData_Struct struct {
	Struct *structpb.Struct `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

type SensorData_Binary struct {
	Binary []byte `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}

func (*SensorData_Struct) isSensorData_Data() {}

func (*SensorData_Binary) isSensorData_Data() {}

type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{2}
}

func (x *FileData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId           string                `protobuf:"bytes,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ComponentType    string                `protobuf:"bytes,2,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentName    string                `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentModel   string                `protobuf:"bytes,4,opt,name=component_model,json=componentModel,proto3" json:"component_model,omitempty"`
	MethodName       string                `protobuf:"bytes,5,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Type             DataType              `protobuf:"varint,6,opt,name=type,proto3,enum=viam.app.datasync.v1.DataType" json:"type,omitempty"`
	FileName         string                `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,8,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileExtension    string                `protobuf:"bytes,9,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	Tags             []string              `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	SessionId        string                `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *UploadMetadata) Reset() {
	*x = UploadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMetadata) ProtoMessage() {}

func (x *UploadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMetadata.ProtoReflect.Descriptor instead.
func (*UploadMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{3}
}

func (x *UploadMetadata) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *UploadMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *UploadMetadata) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *UploadMetadata) GetComponentModel() string {
	if x != nil {
		return x.ComponentModel
	}
	return ""
}

func (x *UploadMetadata) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *UploadMetadata) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *UploadMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadMetadata) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *UploadMetadata) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *UploadMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UploadMetadata) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadPacket:
	//
	//	*UploadRequest_Metadata
	//	*UploadRequest_SensorContents
	//	*UploadRequest_FileContents
	UploadPacket isUploadRequest_UploadPacket `protobuf_oneof:"upload_packet"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{4}
}

func (m *UploadRequest) GetUploadPacket() isUploadRequest_UploadPacket {
	if m != nil {
		return m.UploadPacket
	}
	return nil
}

func (x *UploadRequest) GetMetadata() *UploadMetadata {
	if x, ok := x.GetUploadPacket().(*UploadRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadRequest) GetSensorContents() *SensorData {
	if x, ok := x.GetUploadPacket().(*UploadRequest_SensorContents); ok {
		return x.SensorContents
	}
	return nil
}

func (x *UploadRequest) GetFileContents() *FileData {
	if x, ok := x.GetUploadPacket().(*UploadRequest_FileContents); ok {
		return x.FileContents
	}
	return nil
}

type isUploadRequest_UploadPacket interface {
	isUploadRequest_UploadPacket()
}

type UploadRequest_Metadata struct {
	Metadata *UploadMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadRequest_SensorContents struct {
	SensorContents *SensorData `protobuf:"bytes,2,opt,name=sensor_contents,json=sensorContents,proto3,oneof"`
}

type UploadRequest_FileContents struct {
	FileContents *FileData `protobuf:"bytes,3,opt,name=file_contents,json=fileContents,proto3,oneof"`
}

func (*UploadRequest_Metadata) isUploadRequest_UploadPacket() {}

func (*UploadRequest_SensorContents) isUploadRequest_UploadPacket() {}

func (*UploadRequest_FileContents) isUploadRequest_UploadPacket() {}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestsWritten int32 `protobuf:"varint,1,opt,name=requests_written,json=requestsWritten,proto3" json:"requests_written,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{5}
}

func (x *UploadResponse) GetRequestsWritten() int32 {
	if x != nil {
		return x.RequestsWritten
	}
	return 0
}

type CaptureInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CaptureInterval) Reset() {
	*x = CaptureInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInterval) ProtoMessage() {}

func (x *CaptureInterval) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInterval.ProtoReflect.Descriptor instead.
func (*CaptureInterval) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{6}
}

func (x *CaptureInterval) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CaptureInterval) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type DataCaptureMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType    string                `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentName    string                `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentModel   string                `protobuf:"bytes,3,opt,name=component_model,json=componentModel,proto3" json:"component_model,omitempty"`
	MethodName       string                `protobuf:"bytes,4,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Type             DataType              `protobuf:"varint,5,opt,name=type,proto3,enum=viam.app.datasync.v1.DataType" json:"type,omitempty"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,6,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileExtension    string                `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	Tags             []string              `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	SessionId        string                `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DataCaptureMetadata) Reset() {
	*x = DataCaptureMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCaptureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCaptureMetadata) ProtoMessage() {}

func (x *DataCaptureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCaptureMetadata.ProtoReflect.Descriptor instead.
func (*DataCaptureMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{7}
}

func (x *DataCaptureMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *DataCaptureMetadata) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *DataCaptureMetadata) GetComponentModel() string {
	if x != nil {
		return x.ComponentModel
	}
	return ""
}

func (x *DataCaptureMetadata) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *DataCaptureMetadata) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *DataCaptureMetadata) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *DataCaptureMetadata) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *DataCaptureMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DataCaptureMetadata) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TabularCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval         *CaptureInterval      `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval" bson:"interval"`
	OrgId            string                `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id" bson:"org_id"`
	RobotId          string                `protobuf:"bytes,3,opt,name=robot_id,json=robotId,proto3" json:"robot_id" bson:"robot_id"`
	PartId           string                `protobuf:"bytes,4,opt,name=part_id,json=partId,proto3" json:"part_id" bson:"part_id"`
	LocationId       string                `protobuf:"bytes,5,opt,name=location_id,json=locationId,proto3" json:"location_id" bson:"location_id"`
	ComponentName    string                `protobuf:"bytes,6,opt,name=component_name,json=componentName,proto3" json:"component_name" bson:"component_name"`
	ComponentType    string                `protobuf:"bytes,7,opt,name=component_type,json=componentType,proto3" json:"component_type" bson:"component_type"`
	ComponentModel   string                `protobuf:"bytes,8,opt,name=component_model,json=componentModel,proto3" json:"component_model" bson:"component_model"`
	MethodName       string                `protobuf:"bytes,9,opt,name=method_name,json=methodName,proto3" json:"method_name" bson:"method_name"`
	BlobPath         string                `protobuf:"bytes,10,opt,name=blob_path,json=blobPath,proto3" json:"blob_path" bson:"blob_path"`
	ColumnNames      []string              `protobuf:"bytes,11,rep,name=column_names,json=columnNames,proto3" json:"column_names" bson:"column_names"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,12,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"method_parameters"`
	FileId           string                `protobuf:"bytes,13,opt,name=file_id,json=fileId,proto3" json:"file_id" bson:"file_id"`
	Tags             []string              `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags" bson:"tags"`
	MessageCount     int32                 `protobuf:"varint,15,opt,name=message_count,json=messageCount,proto3" json:"message_count" bson:"message_count"`
	FileSizeBytes    int64                 `protobuf:"varint,16,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes" bson:"file_size_bytes"`
	SessionId        string                `protobuf:"bytes,17,opt,name=session_id,json=sessionId,proto3" json:"session_id" bson:"session_id"`
	MimeType         string                `protobuf:"bytes,18,opt,name=mime_type,json=mimeType,proto3" json:"mime_type" bson:"mime_type"`
	Id               string                `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *TabularCapture) Reset() {
	*x = TabularCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabularCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularCapture) ProtoMessage() {}

func (x *TabularCapture) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularCapture.ProtoReflect.Descriptor instead.
func (*TabularCapture) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{8}
}

func (x *TabularCapture) GetInterval() *CaptureInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TabularCapture) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TabularCapture) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *TabularCapture) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *TabularCapture) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *TabularCapture) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *TabularCapture) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *TabularCapture) GetComponentModel() string {
	if x != nil {
		return x.ComponentModel
	}
	return ""
}

func (x *TabularCapture) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *TabularCapture) GetBlobPath() string {
	if x != nil {
		return x.BlobPath
	}
	return ""
}

func (x *TabularCapture) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *TabularCapture) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *TabularCapture) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TabularCapture) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TabularCapture) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *TabularCapture) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

func (x *TabularCapture) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TabularCapture) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TabularCapture) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BinaryCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval         *CaptureInterval      `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval" bson:"interval"`
	OrgId            string                `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id" bson:"org_id"`
	RobotId          string                `protobuf:"bytes,3,opt,name=robot_id,json=robotId,proto3" json:"robot_id" bson:"robot_id"`
	PartId           string                `protobuf:"bytes,4,opt,name=part_id,json=partId,proto3" json:"part_id" bson:"part_id"`
	LocationId       string                `protobuf:"bytes,5,opt,name=location_id,json=locationId,proto3" json:"location_id" bson:"location_id"`
	ComponentName    string                `protobuf:"bytes,6,opt,name=component_name,json=componentName,proto3" json:"component_name" bson:"component_name"`
	ComponentType    string                `protobuf:"bytes,7,opt,name=component_type,json=componentType,proto3" json:"component_type" bson:"component_type"`
	ComponentModel   string                `protobuf:"bytes,8,opt,name=component_model,json=componentModel,proto3" json:"component_model" bson:"component_model"`
	MethodName       string                `protobuf:"bytes,9,opt,name=method_name,json=methodName,proto3" json:"method_name" bson:"method_name"`
	BlobPath         string                `protobuf:"bytes,10,opt,name=blob_path,json=blobPath,proto3" json:"blob_path" bson:"blob_path"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,11,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"method_parameters"`
	FileId           string                `protobuf:"bytes,12,opt,name=file_id,json=fileId,proto3" json:"file_id" bson:"file_id"`
	Tags             []string              `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags" bson:"tags"`
	FileSizeBytes    int64                 `protobuf:"varint,14,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes" bson:"file_size_bytes"`
	SessionId        string                `protobuf:"bytes,15,opt,name=session_id,json=sessionId,proto3" json:"session_id" bson:"session_id"`
	MimeType         string                `protobuf:"bytes,16,opt,name=mime_type,json=mimeType,proto3" json:"mime_type" bson:"mime_type"`
	FileName         string                `protobuf:"bytes,17,opt,name=file_name,json=fileName,proto3" json:"file_name" bson:"file_name"`
	FileExt          string                `protobuf:"bytes,18,opt,name=file_ext,json=fileExt,proto3" json:"file_ext" bson:"file_ext"`
	Id               string                `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *BinaryCapture) Reset() {
	*x = BinaryCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_datasync_v1_data_sync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryCapture) ProtoMessage() {}

func (x *BinaryCapture) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryCapture.ProtoReflect.Descriptor instead.
func (*BinaryCapture) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{9}
}

func (x *BinaryCapture) GetInterval() *CaptureInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *BinaryCapture) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *BinaryCapture) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *BinaryCapture) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *BinaryCapture) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *BinaryCapture) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *BinaryCapture) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *BinaryCapture) GetComponentModel() string {
	if x != nil {
		return x.ComponentModel
	}
	return ""
}

func (x *BinaryCapture) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *BinaryCapture) GetBlobPath() string {
	if x != nil {
		return x.BlobPath
	}
	return ""
}

func (x *BinaryCapture) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *BinaryCapture) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *BinaryCapture) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BinaryCapture) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

func (x *BinaryCapture) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BinaryCapture) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *BinaryCapture) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BinaryCapture) GetFileExt() string {
	if x != nil {
		return x.FileExt
	}
	return ""
}

func (x *BinaryCapture) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_app_datasync_v1_data_sync_proto protoreflect.FileDescriptor

var file_app_datasync_v1_data_sync_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x59,
	0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x22, 0x71, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x0c, 0x0a, 0x0e,
	0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x67,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84,
	0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84, 0x9e, 0x03,
	0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x2c, 0x9a, 0x84, 0x9e, 0x03, 0x27, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x9f, 0x01,
	0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x9a, 0x84, 0x9e, 0x03, 0x31, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x52, 0x10, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03,
	0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x53,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2e, 0x9a, 0x84, 0x9e, 0x03, 0x29, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x42, 0x32, 0x9a, 0x84,
	0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x9a, 0x84, 0x9e, 0x03, 0x23, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84, 0x9e,
	0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x0c,
	0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x67, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x4b, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a,
	0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84, 0x9e,
	0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x9e, 0x01,
	0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x9a, 0x84, 0x9e, 0x03, 0x31, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x52, 0x10, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x5a, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x9a,
	0x84, 0x9e, 0x03, 0x23, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84, 0x9e, 0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84, 0x9e, 0x03,
	0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x22, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x12, 0x33, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x74, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x03, 0x32, 0x6a, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_datasync_v1_data_sync_proto_rawDescOnce sync.Once
	file_app_datasync_v1_data_sync_proto_rawDescData = file_app_datasync_v1_data_sync_proto_rawDesc
)

func file_app_datasync_v1_data_sync_proto_rawDescGZIP() []byte {
	file_app_datasync_v1_data_sync_proto_rawDescOnce.Do(func() {
		file_app_datasync_v1_data_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_datasync_v1_data_sync_proto_rawDescData)
	})
	return file_app_datasync_v1_data_sync_proto_rawDescData
}

var file_app_datasync_v1_data_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_datasync_v1_data_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_app_datasync_v1_data_sync_proto_goTypes = []interface{}{
	(DataType)(0),                 // 0: viam.app.datasync.v1.DataType
	(*SensorMetadata)(nil),        // 1: viam.app.datasync.v1.SensorMetadata
	(*SensorData)(nil),            // 2: viam.app.datasync.v1.SensorData
	(*FileData)(nil),              // 3: viam.app.datasync.v1.FileData
	(*UploadMetadata)(nil),        // 4: viam.app.datasync.v1.UploadMetadata
	(*UploadRequest)(nil),         // 5: viam.app.datasync.v1.UploadRequest
	(*UploadResponse)(nil),        // 6: viam.app.datasync.v1.UploadResponse
	(*CaptureInterval)(nil),       // 7: viam.app.datasync.v1.CaptureInterval
	(*DataCaptureMetadata)(nil),   // 8: viam.app.datasync.v1.DataCaptureMetadata
	(*TabularCapture)(nil),        // 9: viam.app.datasync.v1.TabularCapture
	(*BinaryCapture)(nil),         // 10: viam.app.datasync.v1.BinaryCapture
	nil,                           // 11: viam.app.datasync.v1.UploadMetadata.MethodParametersEntry
	nil,                           // 12: viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry
	nil,                           // 13: viam.app.datasync.v1.TabularCapture.MethodParametersEntry
	nil,                           // 14: viam.app.datasync.v1.BinaryCapture.MethodParametersEntry
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 16: google.protobuf.Struct
	(*anypb.Any)(nil),             // 17: google.protobuf.Any
}
var file_app_datasync_v1_data_sync_proto_depIdxs = []int32{
	15, // 0: viam.app.datasync.v1.SensorMetadata.time_requested:type_name -> google.protobuf.Timestamp
	15, // 1: viam.app.datasync.v1.SensorMetadata.time_received:type_name -> google.protobuf.Timestamp
	1,  // 2: viam.app.datasync.v1.SensorData.metadata:type_name -> viam.app.datasync.v1.SensorMetadata
	16, // 3: viam.app.datasync.v1.SensorData.struct:type_name -> google.protobuf.Struct
	0,  // 4: viam.app.datasync.v1.UploadMetadata.type:type_name -> viam.app.datasync.v1.DataType
	11, // 5: viam.app.datasync.v1.UploadMetadata.method_parameters:type_name -> viam.app.datasync.v1.UploadMetadata.MethodParametersEntry
	4,  // 6: viam.app.datasync.v1.UploadRequest.metadata:type_name -> viam.app.datasync.v1.UploadMetadata
	2,  // 7: viam.app.datasync.v1.UploadRequest.sensor_contents:type_name -> viam.app.datasync.v1.SensorData
	3,  // 8: viam.app.datasync.v1.UploadRequest.file_contents:type_name -> viam.app.datasync.v1.FileData
	15, // 9: viam.app.datasync.v1.CaptureInterval.start:type_name -> google.protobuf.Timestamp
	15, // 10: viam.app.datasync.v1.CaptureInterval.end:type_name -> google.protobuf.Timestamp
	0,  // 11: viam.app.datasync.v1.DataCaptureMetadata.type:type_name -> viam.app.datasync.v1.DataType
	12, // 12: viam.app.datasync.v1.DataCaptureMetadata.method_parameters:type_name -> viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry
	7,  // 13: viam.app.datasync.v1.TabularCapture.interval:type_name -> viam.app.datasync.v1.CaptureInterval
	13, // 14: viam.app.datasync.v1.TabularCapture.method_parameters:type_name -> viam.app.datasync.v1.TabularCapture.MethodParametersEntry
	7,  // 15: viam.app.datasync.v1.BinaryCapture.interval:type_name -> viam.app.datasync.v1.CaptureInterval
	14, // 16: viam.app.datasync.v1.BinaryCapture.method_parameters:type_name -> viam.app.datasync.v1.BinaryCapture.MethodParametersEntry
	17, // 17: viam.app.datasync.v1.UploadMetadata.MethodParametersEntry.value:type_name -> google.protobuf.Any
	17, // 18: viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry.value:type_name -> google.protobuf.Any
	17, // 19: viam.app.datasync.v1.TabularCapture.MethodParametersEntry.value:type_name -> google.protobuf.Any
	17, // 20: viam.app.datasync.v1.BinaryCapture.MethodParametersEntry.value:type_name -> google.protobuf.Any
	5,  // 21: viam.app.datasync.v1.DataSyncService.Upload:input_type -> viam.app.datasync.v1.UploadRequest
	6,  // 22: viam.app.datasync.v1.DataSyncService.Upload:output_type -> viam.app.datasync.v1.UploadResponse
	22, // [22:23] is the sub-list for method output_type
	21, // [21:22] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_app_datasync_v1_data_sync_proto_init() }
func file_app_datasync_v1_data_sync_proto_init() {
	if File_app_datasync_v1_data_sync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_datasync_v1_data_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCaptureMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabularCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_datasync_v1_data_sync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_app_datasync_v1_data_sync_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SensorData_Struct)(nil),
		(*SensorData_Binary)(nil),
	}
	file_app_datasync_v1_data_sync_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UploadRequest_Metadata)(nil),
		(*UploadRequest_SensorContents)(nil),
		(*UploadRequest_FileContents)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_datasync_v1_data_sync_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_datasync_v1_data_sync_proto_goTypes,
		DependencyIndexes: file_app_datasync_v1_data_sync_proto_depIdxs,
		EnumInfos:         file_app_datasync_v1_data_sync_proto_enumTypes,
		MessageInfos:      file_app_datasync_v1_data_sync_proto_msgTypes,
	}.Build()
	File_app_datasync_v1_data_sync_proto = out.File
	file_app_datasync_v1_data_sync_proto_rawDesc = nil
	file_app_datasync_v1_data_sync_proto_goTypes = nil
	file_app_datasync_v1_data_sync_proto_depIdxs = nil
}
