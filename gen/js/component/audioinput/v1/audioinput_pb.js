// source: component/audioinput/v1/audioinput.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_api_httpbody_pb = require('../../../google/api/httpbody_pb.js');
goog.object.extend(proto, google_api_httpbody_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.viam.component.audioinput.v1.AudioChunk', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.AudioChunkInfo', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.ChunksRequest', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.ChunksResponse', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.ChunksResponse.TypeCase', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.PropertiesRequest', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.PropertiesResponse', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.RecordRequest', null, global);
goog.exportSymbol('proto.viam.component.audioinput.v1.SampleFormat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.RecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.RecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.RecordRequest.displayName = 'proto.viam.component.audioinput.v1.RecordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.AudioChunkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.AudioChunkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.AudioChunkInfo.displayName = 'proto.viam.component.audioinput.v1.AudioChunkInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.AudioChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.AudioChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.AudioChunk.displayName = 'proto.viam.component.audioinput.v1.AudioChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.ChunksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.ChunksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.ChunksRequest.displayName = 'proto.viam.component.audioinput.v1.ChunksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.ChunksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viam.component.audioinput.v1.ChunksResponse.oneofGroups_);
};
goog.inherits(proto.viam.component.audioinput.v1.ChunksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.ChunksResponse.displayName = 'proto.viam.component.audioinput.v1.ChunksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.PropertiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.PropertiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.PropertiesRequest.displayName = 'proto.viam.component.audioinput.v1.PropertiesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.audioinput.v1.PropertiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.audioinput.v1.PropertiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.audioinput.v1.PropertiesResponse.displayName = 'proto.viam.component.audioinput.v1.PropertiesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.RecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.RecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.RecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.RecordRequest}
 */
proto.viam.component.audioinput.v1.RecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.RecordRequest;
  return proto.viam.component.audioinput.v1.RecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.RecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.RecordRequest}
 */
proto.viam.component.audioinput.v1.RecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.RecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.RecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.RecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.audioinput.v1.RecordRequest} returns this
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Duration duration = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.viam.component.audioinput.v1.RecordRequest} returns this
*/
proto.viam.component.audioinput.v1.RecordRequest.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.audioinput.v1.RecordRequest} returns this
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.RecordRequest.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.AudioChunkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.AudioChunkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleFormat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    samplingRate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.AudioChunkInfo}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.AudioChunkInfo;
  return proto.viam.component.audioinput.v1.AudioChunkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.AudioChunkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.AudioChunkInfo}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.viam.component.audioinput.v1.SampleFormat} */ (reader.readEnum());
      msg.setSampleFormat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSamplingRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.AudioChunkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.AudioChunkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChannels();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSamplingRate();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional SampleFormat sample_format = 1;
 * @return {!proto.viam.component.audioinput.v1.SampleFormat}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.getSampleFormat = function() {
  return /** @type {!proto.viam.component.audioinput.v1.SampleFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.viam.component.audioinput.v1.SampleFormat} value
 * @return {!proto.viam.component.audioinput.v1.AudioChunkInfo} returns this
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.setSampleFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 channels = 2;
 * @return {number}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.AudioChunkInfo} returns this
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.setChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 sampling_rate = 3;
 * @return {number}
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.getSamplingRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.AudioChunkInfo} returns this
 */
proto.viam.component.audioinput.v1.AudioChunkInfo.prototype.setSamplingRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.AudioChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.AudioChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.AudioChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.AudioChunk}
 */
proto.viam.component.audioinput.v1.AudioChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.AudioChunk;
  return proto.viam.component.audioinput.v1.AudioChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.AudioChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.AudioChunk}
 */
proto.viam.component.audioinput.v1.AudioChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.AudioChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.AudioChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.AudioChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.component.audioinput.v1.AudioChunk} returns this
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 length = 2;
 * @return {number}
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.AudioChunk} returns this
 */
proto.viam.component.audioinput.v1.AudioChunk.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.ChunksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.ChunksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.ChunksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sampleFormat: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.ChunksRequest}
 */
proto.viam.component.audioinput.v1.ChunksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.ChunksRequest;
  return proto.viam.component.audioinput.v1.ChunksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.ChunksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.ChunksRequest}
 */
proto.viam.component.audioinput.v1.ChunksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.viam.component.audioinput.v1.SampleFormat} */ (reader.readEnum());
      msg.setSampleFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.ChunksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.ChunksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.ChunksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSampleFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.audioinput.v1.ChunksRequest} returns this
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SampleFormat sample_format = 2;
 * @return {!proto.viam.component.audioinput.v1.SampleFormat}
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.getSampleFormat = function() {
  return /** @type {!proto.viam.component.audioinput.v1.SampleFormat} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.viam.component.audioinput.v1.SampleFormat} value
 * @return {!proto.viam.component.audioinput.v1.ChunksRequest} returns this
 */
proto.viam.component.audioinput.v1.ChunksRequest.prototype.setSampleFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viam.component.audioinput.v1.ChunksResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.viam.component.audioinput.v1.ChunksResponse.TypeCase = {
  TYPE_NOT_SET: 0,
  INFO: 1,
  CHUNK: 2
};

/**
 * @return {proto.viam.component.audioinput.v1.ChunksResponse.TypeCase}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.getTypeCase = function() {
  return /** @type {proto.viam.component.audioinput.v1.ChunksResponse.TypeCase} */(jspb.Message.computeOneofCase(this, proto.viam.component.audioinput.v1.ChunksResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.ChunksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.ChunksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.ChunksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.viam.component.audioinput.v1.AudioChunkInfo.toObject(includeInstance, f),
    chunk: (f = msg.getChunk()) && proto.viam.component.audioinput.v1.AudioChunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse}
 */
proto.viam.component.audioinput.v1.ChunksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.ChunksResponse;
  return proto.viam.component.audioinput.v1.ChunksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.ChunksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse}
 */
proto.viam.component.audioinput.v1.ChunksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.component.audioinput.v1.AudioChunkInfo;
      reader.readMessage(value,proto.viam.component.audioinput.v1.AudioChunkInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.viam.component.audioinput.v1.AudioChunk;
      reader.readMessage(value,proto.viam.component.audioinput.v1.AudioChunk.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.ChunksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.ChunksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.ChunksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.component.audioinput.v1.AudioChunkInfo.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.component.audioinput.v1.AudioChunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional AudioChunkInfo info = 1;
 * @return {?proto.viam.component.audioinput.v1.AudioChunkInfo}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.getInfo = function() {
  return /** @type{?proto.viam.component.audioinput.v1.AudioChunkInfo} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.audioinput.v1.AudioChunkInfo, 1));
};


/**
 * @param {?proto.viam.component.audioinput.v1.AudioChunkInfo|undefined} value
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse} returns this
*/
proto.viam.component.audioinput.v1.ChunksResponse.prototype.setInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.viam.component.audioinput.v1.ChunksResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse} returns this
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioChunk chunk = 2;
 * @return {?proto.viam.component.audioinput.v1.AudioChunk}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.getChunk = function() {
  return /** @type{?proto.viam.component.audioinput.v1.AudioChunk} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.audioinput.v1.AudioChunk, 2));
};


/**
 * @param {?proto.viam.component.audioinput.v1.AudioChunk|undefined} value
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse} returns this
*/
proto.viam.component.audioinput.v1.ChunksResponse.prototype.setChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.viam.component.audioinput.v1.ChunksResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.audioinput.v1.ChunksResponse} returns this
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.clearChunk = function() {
  return this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.ChunksResponse.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.PropertiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.PropertiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.PropertiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.PropertiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.PropertiesRequest}
 */
proto.viam.component.audioinput.v1.PropertiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.PropertiesRequest;
  return proto.viam.component.audioinput.v1.PropertiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.PropertiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.PropertiesRequest}
 */
proto.viam.component.audioinput.v1.PropertiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.PropertiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.PropertiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.PropertiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.PropertiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.audioinput.v1.PropertiesRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesRequest} returns this
 */
proto.viam.component.audioinput.v1.PropertiesRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.audioinput.v1.PropertiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.audioinput.v1.PropertiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.PropertiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latency: (f = msg.getLatency()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    sampleRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sampleSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isBigEndian: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isFloat: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isInterleaved: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.audioinput.v1.PropertiesResponse;
  return proto.viam.component.audioinput.v1.PropertiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.audioinput.v1.PropertiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelCount(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setLatency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleSize(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBigEndian(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFloat(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInterleaved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.audioinput.v1.PropertiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.audioinput.v1.PropertiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.audioinput.v1.PropertiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLatency();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSampleSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getIsBigEndian();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsFloat();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsInterleaved();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional uint32 channel_count = 1;
 * @return {number}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Duration latency = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getLatency = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
*/
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setLatency = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.clearLatency = function() {
  return this.setLatency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.hasLatency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sample_rate = 3;
 * @return {number}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 sample_size = 4;
 * @return {number}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getSampleSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setSampleSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_big_endian = 5;
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getIsBigEndian = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setIsBigEndian = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_float = 6;
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getIsFloat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setIsFloat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_interleaved = 7;
 * @return {boolean}
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.getIsInterleaved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.component.audioinput.v1.PropertiesResponse} returns this
 */
proto.viam.component.audioinput.v1.PropertiesResponse.prototype.setIsInterleaved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.viam.component.audioinput.v1.SampleFormat = {
  SAMPLE_FORMAT_UNSPECIFIED: 0,
  SAMPLE_FORMAT_INT16_INTERLEAVED: 1,
  SAMPLE_FORMAT_FLOAT32_INTERLEAVED: 2
};

goog.object.extend(exports, proto.viam.component.audioinput.v1);
