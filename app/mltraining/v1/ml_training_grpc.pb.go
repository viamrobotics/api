// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: app/mltraining/v1/ml_training.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MLTrainingService_SubmitTrainingJob_FullMethodName          = "/viam.app.mltraining.v1.MLTrainingService/SubmitTrainingJob"
	MLTrainingService_SubmitCustomTrainingJob_FullMethodName    = "/viam.app.mltraining.v1.MLTrainingService/SubmitCustomTrainingJob"
	MLTrainingService_GetTrainingJob_FullMethodName             = "/viam.app.mltraining.v1.MLTrainingService/GetTrainingJob"
	MLTrainingService_ListTrainingJobs_FullMethodName           = "/viam.app.mltraining.v1.MLTrainingService/ListTrainingJobs"
	MLTrainingService_CancelTrainingJob_FullMethodName          = "/viam.app.mltraining.v1.MLTrainingService/CancelTrainingJob"
	MLTrainingService_DeleteCompletedTrainingJob_FullMethodName = "/viam.app.mltraining.v1.MLTrainingService/DeleteCompletedTrainingJob"
	MLTrainingService_GetTrainingJobLogs_FullMethodName         = "/viam.app.mltraining.v1.MLTrainingService/GetTrainingJobLogs"
)

// MLTrainingServiceClient is the client API for MLTrainingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MLTrainingServiceClient interface {
	// SubmitTrainingJob submits a training job request.
	SubmitTrainingJob(ctx context.Context, in *SubmitTrainingJobRequest, opts ...grpc.CallOption) (*SubmitTrainingJobResponse, error)
	// SubmitCustomTrainingJob submits a custom training job request.
	SubmitCustomTrainingJob(ctx context.Context, in *SubmitCustomTrainingJobRequest, opts ...grpc.CallOption) (*SubmitCustomTrainingJobResponse, error)
	// GetTrainingJob retrieves a training job by its ID.
	GetTrainingJob(ctx context.Context, in *GetTrainingJobRequest, opts ...grpc.CallOption) (*GetTrainingJobResponse, error)
	// ListTrainingJobs lists training jobs for a given organization ID and training status.
	ListTrainingJobs(ctx context.Context, in *ListTrainingJobsRequest, opts ...grpc.CallOption) (*ListTrainingJobsResponse, error)
	// CancelTrainingJob cancels a training job that has not yet completed.
	CancelTrainingJob(ctx context.Context, in *CancelTrainingJobRequest, opts ...grpc.CallOption) (*CancelTrainingJobResponse, error)
	// DeleteCompletedTrainingJob removes a completed training job from the database, whether the job succeeded or failed.
	DeleteCompletedTrainingJob(ctx context.Context, in *DeleteCompletedTrainingJobRequest, opts ...grpc.CallOption) (*DeleteCompletedTrainingJobResponse, error)
	// GetTrainingJobLogs gets the logs for a given custom training job.
	GetTrainingJobLogs(ctx context.Context, in *GetTrainingJobLogsRequest, opts ...grpc.CallOption) (*GetTrainingJobLogsResponse, error)
}

type mLTrainingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLTrainingServiceClient(cc grpc.ClientConnInterface) MLTrainingServiceClient {
	return &mLTrainingServiceClient{cc}
}

func (c *mLTrainingServiceClient) SubmitTrainingJob(ctx context.Context, in *SubmitTrainingJobRequest, opts ...grpc.CallOption) (*SubmitTrainingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTrainingJobResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_SubmitTrainingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) SubmitCustomTrainingJob(ctx context.Context, in *SubmitCustomTrainingJobRequest, opts ...grpc.CallOption) (*SubmitCustomTrainingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitCustomTrainingJobResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_SubmitCustomTrainingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) GetTrainingJob(ctx context.Context, in *GetTrainingJobRequest, opts ...grpc.CallOption) (*GetTrainingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainingJobResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_GetTrainingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) ListTrainingJobs(ctx context.Context, in *ListTrainingJobsRequest, opts ...grpc.CallOption) (*ListTrainingJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrainingJobsResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_ListTrainingJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) CancelTrainingJob(ctx context.Context, in *CancelTrainingJobRequest, opts ...grpc.CallOption) (*CancelTrainingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTrainingJobResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_CancelTrainingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) DeleteCompletedTrainingJob(ctx context.Context, in *DeleteCompletedTrainingJobRequest, opts ...grpc.CallOption) (*DeleteCompletedTrainingJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCompletedTrainingJobResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_DeleteCompletedTrainingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLTrainingServiceClient) GetTrainingJobLogs(ctx context.Context, in *GetTrainingJobLogsRequest, opts ...grpc.CallOption) (*GetTrainingJobLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainingJobLogsResponse)
	err := c.cc.Invoke(ctx, MLTrainingService_GetTrainingJobLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLTrainingServiceServer is the server API for MLTrainingService service.
// All implementations must embed UnimplementedMLTrainingServiceServer
// for forward compatibility.
type MLTrainingServiceServer interface {
	// SubmitTrainingJob submits a training job request.
	SubmitTrainingJob(context.Context, *SubmitTrainingJobRequest) (*SubmitTrainingJobResponse, error)
	// SubmitCustomTrainingJob submits a custom training job request.
	SubmitCustomTrainingJob(context.Context, *SubmitCustomTrainingJobRequest) (*SubmitCustomTrainingJobResponse, error)
	// GetTrainingJob retrieves a training job by its ID.
	GetTrainingJob(context.Context, *GetTrainingJobRequest) (*GetTrainingJobResponse, error)
	// ListTrainingJobs lists training jobs for a given organization ID and training status.
	ListTrainingJobs(context.Context, *ListTrainingJobsRequest) (*ListTrainingJobsResponse, error)
	// CancelTrainingJob cancels a training job that has not yet completed.
	CancelTrainingJob(context.Context, *CancelTrainingJobRequest) (*CancelTrainingJobResponse, error)
	// DeleteCompletedTrainingJob removes a completed training job from the database, whether the job succeeded or failed.
	DeleteCompletedTrainingJob(context.Context, *DeleteCompletedTrainingJobRequest) (*DeleteCompletedTrainingJobResponse, error)
	// GetTrainingJobLogs gets the logs for a given custom training job.
	GetTrainingJobLogs(context.Context, *GetTrainingJobLogsRequest) (*GetTrainingJobLogsResponse, error)
	mustEmbedUnimplementedMLTrainingServiceServer()
}

// UnimplementedMLTrainingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMLTrainingServiceServer struct{}

func (UnimplementedMLTrainingServiceServer) SubmitTrainingJob(context.Context, *SubmitTrainingJobRequest) (*SubmitTrainingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTrainingJob not implemented")
}
func (UnimplementedMLTrainingServiceServer) SubmitCustomTrainingJob(context.Context, *SubmitCustomTrainingJobRequest) (*SubmitCustomTrainingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCustomTrainingJob not implemented")
}
func (UnimplementedMLTrainingServiceServer) GetTrainingJob(context.Context, *GetTrainingJobRequest) (*GetTrainingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingJob not implemented")
}
func (UnimplementedMLTrainingServiceServer) ListTrainingJobs(context.Context, *ListTrainingJobsRequest) (*ListTrainingJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrainingJobs not implemented")
}
func (UnimplementedMLTrainingServiceServer) CancelTrainingJob(context.Context, *CancelTrainingJobRequest) (*CancelTrainingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrainingJob not implemented")
}
func (UnimplementedMLTrainingServiceServer) DeleteCompletedTrainingJob(context.Context, *DeleteCompletedTrainingJobRequest) (*DeleteCompletedTrainingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompletedTrainingJob not implemented")
}
func (UnimplementedMLTrainingServiceServer) GetTrainingJobLogs(context.Context, *GetTrainingJobLogsRequest) (*GetTrainingJobLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingJobLogs not implemented")
}
func (UnimplementedMLTrainingServiceServer) mustEmbedUnimplementedMLTrainingServiceServer() {}
func (UnimplementedMLTrainingServiceServer) testEmbeddedByValue()                           {}

// UnsafeMLTrainingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLTrainingServiceServer will
// result in compilation errors.
type UnsafeMLTrainingServiceServer interface {
	mustEmbedUnimplementedMLTrainingServiceServer()
}

func RegisterMLTrainingServiceServer(s grpc.ServiceRegistrar, srv MLTrainingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMLTrainingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MLTrainingService_ServiceDesc, srv)
}

func _MLTrainingService_SubmitTrainingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTrainingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).SubmitTrainingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_SubmitTrainingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).SubmitTrainingJob(ctx, req.(*SubmitTrainingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_SubmitCustomTrainingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCustomTrainingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).SubmitCustomTrainingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_SubmitCustomTrainingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).SubmitCustomTrainingJob(ctx, req.(*SubmitCustomTrainingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_GetTrainingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).GetTrainingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_GetTrainingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).GetTrainingJob(ctx, req.(*GetTrainingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_ListTrainingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrainingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).ListTrainingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_ListTrainingJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).ListTrainingJobs(ctx, req.(*ListTrainingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_CancelTrainingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTrainingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).CancelTrainingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_CancelTrainingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).CancelTrainingJob(ctx, req.(*CancelTrainingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_DeleteCompletedTrainingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompletedTrainingJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).DeleteCompletedTrainingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_DeleteCompletedTrainingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).DeleteCompletedTrainingJob(ctx, req.(*DeleteCompletedTrainingJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLTrainingService_GetTrainingJobLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainingJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLTrainingServiceServer).GetTrainingJobLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLTrainingService_GetTrainingJobLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLTrainingServiceServer).GetTrainingJobLogs(ctx, req.(*GetTrainingJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MLTrainingService_ServiceDesc is the grpc.ServiceDesc for MLTrainingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLTrainingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.mltraining.v1.MLTrainingService",
	HandlerType: (*MLTrainingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTrainingJob",
			Handler:    _MLTrainingService_SubmitTrainingJob_Handler,
		},
		{
			MethodName: "SubmitCustomTrainingJob",
			Handler:    _MLTrainingService_SubmitCustomTrainingJob_Handler,
		},
		{
			MethodName: "GetTrainingJob",
			Handler:    _MLTrainingService_GetTrainingJob_Handler,
		},
		{
			MethodName: "ListTrainingJobs",
			Handler:    _MLTrainingService_ListTrainingJobs_Handler,
		},
		{
			MethodName: "CancelTrainingJob",
			Handler:    _MLTrainingService_CancelTrainingJob_Handler,
		},
		{
			MethodName: "DeleteCompletedTrainingJob",
			Handler:    _MLTrainingService_DeleteCompletedTrainingJob_Handler,
		},
		{
			MethodName: "GetTrainingJobLogs",
			Handler:    _MLTrainingService_GetTrainingJobLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/mltraining/v1/ml_training.proto",
}
