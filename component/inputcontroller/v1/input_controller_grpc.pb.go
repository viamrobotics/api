// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: component/inputcontroller/v1/input_controller.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InputControllerService_GetControls_FullMethodName   = "/viam.component.inputcontroller.v1.InputControllerService/GetControls"
	InputControllerService_GetEvents_FullMethodName     = "/viam.component.inputcontroller.v1.InputControllerService/GetEvents"
	InputControllerService_StreamEvents_FullMethodName  = "/viam.component.inputcontroller.v1.InputControllerService/StreamEvents"
	InputControllerService_TriggerEvent_FullMethodName  = "/viam.component.inputcontroller.v1.InputControllerService/TriggerEvent"
	InputControllerService_DoCommand_FullMethodName     = "/viam.component.inputcontroller.v1.InputControllerService/DoCommand"
	InputControllerService_GetGeometries_FullMethodName = "/viam.component.inputcontroller.v1.InputControllerService/GetGeometries"
)

// InputControllerServiceClient is the client API for InputControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InputControllerService servicestains all input controller associated with a robot
type InputControllerServiceClient interface {
	// GetControls returns a list of GetControls provided by the Controller
	GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error)
	// GetEvents returns a list of events representing the last event on each control of a give Input Controller
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	// StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error)
	// TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
	// like button presses or axis movements
	TriggerEvent(ctx context.Context, in *TriggerEventRequest, opts ...grpc.CallOption) (*TriggerEventResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error)
}

type inputControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInputControllerServiceClient(cc grpc.ClientConnInterface) InputControllerServiceClient {
	return &inputControllerServiceClient{cc}
}

func (c *inputControllerServiceClient) GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetControlsResponse)
	err := c.cc.Invoke(ctx, InputControllerService_GetControls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputControllerServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, InputControllerService_GetEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputControllerServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InputControllerService_ServiceDesc.Streams[0], InputControllerService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, StreamEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InputControllerService_StreamEventsClient = grpc.ServerStreamingClient[StreamEventsResponse]

func (c *inputControllerServiceClient) TriggerEvent(ctx context.Context, in *TriggerEventRequest, opts ...grpc.CallOption) (*TriggerEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerEventResponse)
	err := c.cc.Invoke(ctx, InputControllerService_TriggerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputControllerServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, InputControllerService_DoCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputControllerServiceClient) GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetGeometriesResponse)
	err := c.cc.Invoke(ctx, InputControllerService_GetGeometries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InputControllerServiceServer is the server API for InputControllerService service.
// All implementations must embed UnimplementedInputControllerServiceServer
// for forward compatibility.
//
// InputControllerService servicestains all input controller associated with a robot
type InputControllerServiceServer interface {
	// GetControls returns a list of GetControls provided by the Controller
	GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error)
	// GetEvents returns a list of events representing the last event on each control of a give Input Controller
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	// StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error
	// TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
	// like button presses or axis movements
	TriggerEvent(context.Context, *TriggerEventRequest) (*TriggerEventResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error)
	mustEmbedUnimplementedInputControllerServiceServer()
}

// UnimplementedInputControllerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInputControllerServiceServer struct{}

func (UnimplementedInputControllerServiceServer) GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControls not implemented")
}
func (UnimplementedInputControllerServiceServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedInputControllerServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedInputControllerServiceServer) TriggerEvent(context.Context, *TriggerEventRequest) (*TriggerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEvent not implemented")
}
func (UnimplementedInputControllerServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedInputControllerServiceServer) GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeometries not implemented")
}
func (UnimplementedInputControllerServiceServer) mustEmbedUnimplementedInputControllerServiceServer() {
}
func (UnimplementedInputControllerServiceServer) testEmbeddedByValue() {}

// UnsafeInputControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputControllerServiceServer will
// result in compilation errors.
type UnsafeInputControllerServiceServer interface {
	mustEmbedUnimplementedInputControllerServiceServer()
}

func RegisterInputControllerServiceServer(s grpc.ServiceRegistrar, srv InputControllerServiceServer) {
	// If the following call pancis, it indicates UnimplementedInputControllerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InputControllerService_ServiceDesc, srv)
}

func _InputControllerService_GetControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputControllerServiceServer).GetControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputControllerService_GetControls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputControllerServiceServer).GetControls(ctx, req.(*GetControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputControllerService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputControllerServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputControllerService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputControllerServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputControllerService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InputControllerServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, StreamEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InputControllerService_StreamEventsServer = grpc.ServerStreamingServer[StreamEventsResponse]

func _InputControllerService_TriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputControllerServiceServer).TriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputControllerService_TriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputControllerServiceServer).TriggerEvent(ctx, req.(*TriggerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputControllerService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputControllerServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputControllerService_DoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputControllerServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputControllerService_GetGeometries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGeometriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputControllerServiceServer).GetGeometries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputControllerService_GetGeometries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputControllerServiceServer).GetGeometries(ctx, req.(*v1.GetGeometriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InputControllerService_ServiceDesc is the grpc.ServiceDesc for InputControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InputControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.component.inputcontroller.v1.InputControllerService",
	HandlerType: (*InputControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetControls",
			Handler:    _InputControllerService_GetControls_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _InputControllerService_GetEvents_Handler,
		},
		{
			MethodName: "TriggerEvent",
			Handler:    _InputControllerService_TriggerEvent_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _InputControllerService_DoCommand_Handler,
		},
		{
			MethodName: "GetGeometries",
			Handler:    _InputControllerService_GetGeometries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _InputControllerService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "component/inputcontroller/v1/input_controller.proto",
}
