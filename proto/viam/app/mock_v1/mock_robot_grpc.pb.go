// Code generated by MockGen. DO NOT EDIT.
// Source: proto/viam/app/v1/robot_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "go.viam.com/api/proto/viam/app/v1"
	grpc "google.golang.org/grpc"
)

// MockRobotServiceClient is a mock of RobotServiceClient interface.
type MockRobotServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRobotServiceClientMockRecorder
}

// MockRobotServiceClientMockRecorder is the mock recorder for MockRobotServiceClient.
type MockRobotServiceClientMockRecorder struct {
	mock *MockRobotServiceClient
}

// NewMockRobotServiceClient creates a new mock instance.
func NewMockRobotServiceClient(ctrl *gomock.Controller) *MockRobotServiceClient {
	mock := &MockRobotServiceClient{ctrl: ctrl}
	mock.recorder = &MockRobotServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRobotServiceClient) EXPECT() *MockRobotServiceClientMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockRobotServiceClient) Certificate(ctx context.Context, in *v1.CertificateRequest, opts ...grpc.CallOption) (*v1.CertificateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Certificate", varargs...)
	ret0, _ := ret[0].(*v1.CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certificate indicates an expected call of Certificate.
func (mr *MockRobotServiceClientMockRecorder) Certificate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockRobotServiceClient)(nil).Certificate), varargs...)
}

// Config mocks base method.
func (m *MockRobotServiceClient) Config(ctx context.Context, in *v1.ConfigRequest, opts ...grpc.CallOption) (*v1.ConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Config", varargs...)
	ret0, _ := ret[0].(*v1.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockRobotServiceClientMockRecorder) Config(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockRobotServiceClient)(nil).Config), varargs...)
}

// MockRobotServiceServer is a mock of RobotServiceServer interface.
type MockRobotServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRobotServiceServerMockRecorder
}

// MockRobotServiceServerMockRecorder is the mock recorder for MockRobotServiceServer.
type MockRobotServiceServerMockRecorder struct {
	mock *MockRobotServiceServer
}

// NewMockRobotServiceServer creates a new mock instance.
func NewMockRobotServiceServer(ctrl *gomock.Controller) *MockRobotServiceServer {
	mock := &MockRobotServiceServer{ctrl: ctrl}
	mock.recorder = &MockRobotServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRobotServiceServer) EXPECT() *MockRobotServiceServerMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockRobotServiceServer) Certificate(arg0 context.Context, arg1 *v1.CertificateRequest) (*v1.CertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certificate", arg0, arg1)
	ret0, _ := ret[0].(*v1.CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certificate indicates an expected call of Certificate.
func (mr *MockRobotServiceServerMockRecorder) Certificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockRobotServiceServer)(nil).Certificate), arg0, arg1)
}

// Config mocks base method.
func (m *MockRobotServiceServer) Config(arg0 context.Context, arg1 *v1.ConfigRequest) (*v1.ConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", arg0, arg1)
	ret0, _ := ret[0].(*v1.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockRobotServiceServerMockRecorder) Config(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockRobotServiceServer)(nil).Config), arg0, arg1)
}

// mustEmbedUnimplementedRobotServiceServer mocks base method.
func (m *MockRobotServiceServer) mustEmbedUnimplementedRobotServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRobotServiceServer")
}

// mustEmbedUnimplementedRobotServiceServer indicates an expected call of mustEmbedUnimplementedRobotServiceServer.
func (mr *MockRobotServiceServerMockRecorder) mustEmbedUnimplementedRobotServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRobotServiceServer", reflect.TypeOf((*MockRobotServiceServer)(nil).mustEmbedUnimplementedRobotServiceServer))
}

// MockUnsafeRobotServiceServer is a mock of UnsafeRobotServiceServer interface.
type MockUnsafeRobotServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRobotServiceServerMockRecorder
}

// MockUnsafeRobotServiceServerMockRecorder is the mock recorder for MockUnsafeRobotServiceServer.
type MockUnsafeRobotServiceServerMockRecorder struct {
	mock *MockUnsafeRobotServiceServer
}

// NewMockUnsafeRobotServiceServer creates a new mock instance.
func NewMockUnsafeRobotServiceServer(ctrl *gomock.Controller) *MockUnsafeRobotServiceServer {
	mock := &MockUnsafeRobotServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRobotServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRobotServiceServer) EXPECT() *MockUnsafeRobotServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRobotServiceServer mocks base method.
func (m *MockUnsafeRobotServiceServer) mustEmbedUnimplementedRobotServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRobotServiceServer")
}

// mustEmbedUnimplementedRobotServiceServer indicates an expected call of mustEmbedUnimplementedRobotServiceServer.
func (mr *MockUnsafeRobotServiceServerMockRecorder) mustEmbedUnimplementedRobotServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRobotServiceServer", reflect.TypeOf((*MockUnsafeRobotServiceServer)(nil).mustEmbedUnimplementedRobotServiceServer))
}
