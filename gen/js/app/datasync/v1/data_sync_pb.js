// source: app/datasync/v1/data_sync.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.viam.app.datasync.v1.CaptureInterval', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.DataCaptureMetadata', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.DataCaptureUploadMetadata', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.DataCaptureUploadRequest', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.DataCaptureUploadResponse', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.DataType', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.FileData', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.FileUploadRequest', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.FileUploadRequest.UploadPacketCase', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.FileUploadResponse', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.SensorData', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.SensorData.DataCase', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.SensorMetadata', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.UploadPacketCase', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse', null, global);
goog.exportSymbol('proto.viam.app.datasync.v1.UploadMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.app.datasync.v1.DataCaptureUploadRequest.repeatedFields_, null);
};
goog.inherits(proto.viam.app.datasync.v1.DataCaptureUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.DataCaptureUploadRequest.displayName = 'proto.viam.app.datasync.v1.DataCaptureUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.DataCaptureUploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.DataCaptureUploadResponse.displayName = 'proto.viam.app.datasync.v1.DataCaptureUploadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.FileUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viam.app.datasync.v1.FileUploadRequest.oneofGroups_);
};
goog.inherits(proto.viam.app.datasync.v1.FileUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.FileUploadRequest.displayName = 'proto.viam.app.datasync.v1.FileUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.FileUploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.FileUploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.FileUploadResponse.displayName = 'proto.viam.app.datasync.v1.FileUploadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_);
};
goog.inherits(proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.displayName = 'proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.displayName = 'proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.SensorMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.SensorMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.SensorMetadata.displayName = 'proto.viam.app.datasync.v1.SensorMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.SensorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viam.app.datasync.v1.SensorData.oneofGroups_);
};
goog.inherits(proto.viam.app.datasync.v1.SensorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.SensorData.displayName = 'proto.viam.app.datasync.v1.SensorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.FileData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.FileData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.FileData.displayName = 'proto.viam.app.datasync.v1.FileData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.UploadMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.app.datasync.v1.UploadMetadata.repeatedFields_, null);
};
goog.inherits(proto.viam.app.datasync.v1.UploadMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.UploadMetadata.displayName = 'proto.viam.app.datasync.v1.UploadMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.CaptureInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.CaptureInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.CaptureInterval.displayName = 'proto.viam.app.datasync.v1.CaptureInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.DataCaptureMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.app.datasync.v1.DataCaptureMetadata.repeatedFields_, null);
};
goog.inherits(proto.viam.app.datasync.v1.DataCaptureMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.DataCaptureMetadata.displayName = 'proto.viam.app.datasync.v1.DataCaptureMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.app.datasync.v1.DataCaptureUploadMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.app.datasync.v1.DataCaptureUploadMetadata.displayName = 'proto.viam.app.datasync.v1.DataCaptureUploadMetadata';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.DataCaptureUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.viam.app.datasync.v1.UploadMetadata.toObject(includeInstance, f),
    sensorContentsList: jspb.Message.toObjectList(msg.getSensorContentsList(),
    proto.viam.app.datasync.v1.SensorData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.DataCaptureUploadRequest;
  return proto.viam.app.datasync.v1.DataCaptureUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.app.datasync.v1.UploadMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.UploadMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.viam.app.datasync.v1.SensorData;
      reader.readMessage(value,proto.viam.app.datasync.v1.SensorData.deserializeBinaryFromReader);
      msg.addSensorContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.DataCaptureUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.app.datasync.v1.UploadMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSensorContentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viam.app.datasync.v1.SensorData.serializeBinaryToWriter
    );
  }
};


/**
 * optional UploadMetadata metadata = 1;
 * @return {?proto.viam.app.datasync.v1.UploadMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.getMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.UploadMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.UploadMetadata, 1));
};


/**
 * @param {?proto.viam.app.datasync.v1.UploadMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} returns this
*/
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} returns this
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SensorData sensor_contents = 2;
 * @return {!Array<!proto.viam.app.datasync.v1.SensorData>}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.getSensorContentsList = function() {
  return /** @type{!Array<!proto.viam.app.datasync.v1.SensorData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.app.datasync.v1.SensorData, 2));
};


/**
 * @param {!Array<!proto.viam.app.datasync.v1.SensorData>} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} returns this
*/
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.setSensorContentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viam.app.datasync.v1.SensorData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.app.datasync.v1.SensorData}
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.addSensorContents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viam.app.datasync.v1.SensorData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadRequest} returns this
 */
proto.viam.app.datasync.v1.DataCaptureUploadRequest.prototype.clearSensorContentsList = function() {
  return this.setSensorContentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.DataCaptureUploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadResponse}
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.DataCaptureUploadResponse;
  return proto.viam.app.datasync.v1.DataCaptureUploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadResponse}
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.DataCaptureUploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_id = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadResponse} returns this
 */
proto.viam.app.datasync.v1.DataCaptureUploadResponse.prototype.setFileId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viam.app.datasync.v1.FileUploadRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.viam.app.datasync.v1.FileUploadRequest.UploadPacketCase = {
  UPLOAD_PACKET_NOT_SET: 0,
  METADATA: 1,
  FILE_CONTENTS: 2
};

/**
 * @return {proto.viam.app.datasync.v1.FileUploadRequest.UploadPacketCase}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.getUploadPacketCase = function() {
  return /** @type {proto.viam.app.datasync.v1.FileUploadRequest.UploadPacketCase} */(jspb.Message.computeOneofCase(this, proto.viam.app.datasync.v1.FileUploadRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.FileUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.FileUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.viam.app.datasync.v1.UploadMetadata.toObject(includeInstance, f),
    fileContents: (f = msg.getFileContents()) && proto.viam.app.datasync.v1.FileData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest}
 */
proto.viam.app.datasync.v1.FileUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.FileUploadRequest;
  return proto.viam.app.datasync.v1.FileUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.FileUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest}
 */
proto.viam.app.datasync.v1.FileUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.app.datasync.v1.UploadMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.UploadMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.viam.app.datasync.v1.FileData;
      reader.readMessage(value,proto.viam.app.datasync.v1.FileData.deserializeBinaryFromReader);
      msg.setFileContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.FileUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.FileUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.app.datasync.v1.UploadMetadata.serializeBinaryToWriter
    );
  }
  f = message.getFileContents();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.app.datasync.v1.FileData.serializeBinaryToWriter
    );
  }
};


/**
 * optional UploadMetadata metadata = 1;
 * @return {?proto.viam.app.datasync.v1.UploadMetadata}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.getMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.UploadMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.UploadMetadata, 1));
};


/**
 * @param {?proto.viam.app.datasync.v1.UploadMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest} returns this
*/
proto.viam.app.datasync.v1.FileUploadRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.viam.app.datasync.v1.FileUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest} returns this
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FileData file_contents = 2;
 * @return {?proto.viam.app.datasync.v1.FileData}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.getFileContents = function() {
  return /** @type{?proto.viam.app.datasync.v1.FileData} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.FileData, 2));
};


/**
 * @param {?proto.viam.app.datasync.v1.FileData|undefined} value
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest} returns this
*/
proto.viam.app.datasync.v1.FileUploadRequest.prototype.setFileContents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.viam.app.datasync.v1.FileUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.FileUploadRequest} returns this
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.clearFileContents = function() {
  return this.setFileContents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.FileUploadRequest.prototype.hasFileContents = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.FileUploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.FileUploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.FileUploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileUploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.FileUploadResponse}
 */
proto.viam.app.datasync.v1.FileUploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.FileUploadResponse;
  return proto.viam.app.datasync.v1.FileUploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.FileUploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.FileUploadResponse}
 */
proto.viam.app.datasync.v1.FileUploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.FileUploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.FileUploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.FileUploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileUploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_id = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.FileUploadResponse.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.FileUploadResponse} returns this
 */
proto.viam.app.datasync.v1.FileUploadResponse.prototype.setFileId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.UploadPacketCase = {
  UPLOAD_PACKET_NOT_SET: 0,
  METADATA: 1,
  DATA: 2
};

/**
 * @return {proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.UploadPacketCase}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.getUploadPacketCase = function() {
  return /** @type {proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.UploadPacketCase} */(jspb.Message.computeOneofCase(this, proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.viam.app.datasync.v1.DataCaptureUploadMetadata.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest;
  return proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.app.datasync.v1.DataCaptureUploadMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.DataCaptureUploadMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.app.datasync.v1.DataCaptureUploadMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional DataCaptureUploadMetadata metadata = 1;
 * @return {?proto.viam.app.datasync.v1.DataCaptureUploadMetadata}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.getMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.DataCaptureUploadMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.DataCaptureUploadMetadata, 1));
};


/**
 * @param {?proto.viam.app.datasync.v1.DataCaptureUploadMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} returns this
*/
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} returns this
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} returns this
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest} returns this
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 2, proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse;
  return proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_id = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse} returns this
 */
proto.viam.app.datasync.v1.StreamingDataCaptureUploadResponse.prototype.setFileId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.SensorMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.SensorMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.SensorMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeRequested: (f = msg.getTimeRequested()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    timeReceived: (f = msg.getTimeReceived()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.SensorMetadata}
 */
proto.viam.app.datasync.v1.SensorMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.SensorMetadata;
  return proto.viam.app.datasync.v1.SensorMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.SensorMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.SensorMetadata}
 */
proto.viam.app.datasync.v1.SensorMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeRequested(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeReceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.SensorMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.SensorMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.SensorMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeRequested();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimeReceived();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp time_requested = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.getTimeRequested = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.viam.app.datasync.v1.SensorMetadata} returns this
*/
proto.viam.app.datasync.v1.SensorMetadata.prototype.setTimeRequested = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.SensorMetadata} returns this
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.clearTimeRequested = function() {
  return this.setTimeRequested(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.hasTimeRequested = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp time_received = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.getTimeReceived = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.viam.app.datasync.v1.SensorMetadata} returns this
*/
proto.viam.app.datasync.v1.SensorMetadata.prototype.setTimeReceived = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.SensorMetadata} returns this
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.clearTimeReceived = function() {
  return this.setTimeReceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.SensorMetadata.prototype.hasTimeReceived = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viam.app.datasync.v1.SensorData.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.viam.app.datasync.v1.SensorData.DataCase = {
  DATA_NOT_SET: 0,
  STRUCT: 2,
  BINARY: 3
};

/**
 * @return {proto.viam.app.datasync.v1.SensorData.DataCase}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getDataCase = function() {
  return /** @type {proto.viam.app.datasync.v1.SensorData.DataCase} */(jspb.Message.computeOneofCase(this, proto.viam.app.datasync.v1.SensorData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.SensorData.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.SensorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.SensorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.SensorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.viam.app.datasync.v1.SensorMetadata.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    binary: msg.getBinary_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.SensorData}
 */
proto.viam.app.datasync.v1.SensorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.SensorData;
  return proto.viam.app.datasync.v1.SensorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.SensorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.SensorData}
 */
proto.viam.app.datasync.v1.SensorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.app.datasync.v1.SensorMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.SensorMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.SensorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.SensorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.SensorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.SensorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.app.datasync.v1.SensorMetadata.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional SensorMetadata metadata = 1;
 * @return {?proto.viam.app.datasync.v1.SensorMetadata}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.SensorMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.SensorMetadata, 1));
};


/**
 * @param {?proto.viam.app.datasync.v1.SensorMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
*/
proto.viam.app.datasync.v1.SensorData.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
 */
proto.viam.app.datasync.v1.SensorData.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.SensorData.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct struct = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getStruct = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
*/
proto.viam.app.datasync.v1.SensorData.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.viam.app.datasync.v1.SensorData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
 */
proto.viam.app.datasync.v1.SensorData.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.SensorData.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes binary = 3;
 * @return {string}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getBinary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes binary = 3;
 * This is a type-conversion wrapper around `getBinary()`
 * @return {string}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinary()));
};


/**
 * optional bytes binary = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinary()`
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.SensorData.prototype.getBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
 */
proto.viam.app.datasync.v1.SensorData.prototype.setBinary = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.viam.app.datasync.v1.SensorData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viam.app.datasync.v1.SensorData} returns this
 */
proto.viam.app.datasync.v1.SensorData.prototype.clearBinary = function() {
  return jspb.Message.setOneofField(this, 3, proto.viam.app.datasync.v1.SensorData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.SensorData.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.FileData.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.FileData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.FileData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.FileData}
 */
proto.viam.app.datasync.v1.FileData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.FileData;
  return proto.viam.app.datasync.v1.FileData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.FileData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.FileData}
 */
proto.viam.app.datasync.v1.FileData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.FileData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.FileData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.FileData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.FileData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.FileData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.viam.app.datasync.v1.FileData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.FileData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.app.datasync.v1.FileData} returns this
 */
proto.viam.app.datasync.v1.FileData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.app.datasync.v1.UploadMetadata.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.UploadMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.UploadMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.UploadMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    partId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    componentType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    componentName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fileName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    methodParametersMap: (f = msg.getMethodParametersMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    fileExtension: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.UploadMetadata}
 */
proto.viam.app.datasync.v1.UploadMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.UploadMetadata;
  return proto.viam.app.datasync.v1.UploadMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.UploadMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.UploadMetadata}
 */
proto.viam.app.datasync.v1.UploadMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 6:
      var value = /** @type {!proto.viam.app.datasync.v1.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 8:
      var value = msg.getMethodParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileExtension(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.UploadMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.UploadMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.UploadMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponentType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComponentName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMethodParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getFileExtension();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional string part_id = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getPartId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setPartId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string component_type = 2;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getComponentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setComponentType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string component_name = 3;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getComponentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setComponentName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method_name = 5;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional DataType type = 6;
 * @return {!proto.viam.app.datasync.v1.DataType}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getType = function() {
  return /** @type {!proto.viam.app.datasync.v1.DataType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.viam.app.datasync.v1.DataType} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string file_name = 7;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * map<string, google.protobuf.Any> method_parameters = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getMethodParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.clearMethodParametersMap = function() {
  this.getMethodParametersMap().clear();
  return this;};


/**
 * optional string file_extension = 9;
 * @return {string}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getFileExtension = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setFileExtension = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string tags = 10;
 * @return {!Array<string>}
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.app.datasync.v1.UploadMetadata} returns this
 */
proto.viam.app.datasync.v1.UploadMetadata.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.CaptureInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.CaptureInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.CaptureInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.CaptureInterval}
 */
proto.viam.app.datasync.v1.CaptureInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.CaptureInterval;
  return proto.viam.app.datasync.v1.CaptureInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.CaptureInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.CaptureInterval}
 */
proto.viam.app.datasync.v1.CaptureInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.CaptureInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.CaptureInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.CaptureInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp start = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.viam.app.datasync.v1.CaptureInterval} returns this
*/
proto.viam.app.datasync.v1.CaptureInterval.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.CaptureInterval} returns this
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp end = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.viam.app.datasync.v1.CaptureInterval} returns this
*/
proto.viam.app.datasync.v1.CaptureInterval.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.CaptureInterval} returns this
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.CaptureInterval.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.DataCaptureMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.DataCaptureMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    componentName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    methodParametersMap: (f = msg.getMethodParametersMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    fileExtension: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.DataCaptureMetadata;
  return proto.viam.app.datasync.v1.DataCaptureMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.DataCaptureMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 5:
      var value = /** @type {!proto.viam.app.datasync.v1.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = msg.getMethodParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileExtension(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.DataCaptureMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.DataCaptureMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponentType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponentName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMethodParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getFileExtension();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string component_type = 1;
 * @return {string}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getComponentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setComponentType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string component_name = 2;
 * @return {string}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getComponentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setComponentName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method_name = 4;
 * @return {string}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional DataType type = 5;
 * @return {!proto.viam.app.datasync.v1.DataType}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getType = function() {
  return /** @type {!proto.viam.app.datasync.v1.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.viam.app.datasync.v1.DataType} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * map<string, google.protobuf.Any> method_parameters = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getMethodParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.clearMethodParametersMap = function() {
  this.getMethodParametersMap().clear();
  return this;};


/**
 * optional string file_extension = 7;
 * @return {string}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getFileExtension = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setFileExtension = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string tags = 8;
 * @return {!Array<string>}
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.app.datasync.v1.DataCaptureMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureMetadata.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.app.datasync.v1.DataCaptureUploadMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadMetadata: (f = msg.getUploadMetadata()) && proto.viam.app.datasync.v1.UploadMetadata.toObject(includeInstance, f),
    sensorMetadata: (f = msg.getSensorMetadata()) && proto.viam.app.datasync.v1.SensorMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.app.datasync.v1.DataCaptureUploadMetadata;
  return proto.viam.app.datasync.v1.DataCaptureUploadMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.app.datasync.v1.UploadMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.UploadMetadata.deserializeBinaryFromReader);
      msg.setUploadMetadata(value);
      break;
    case 2:
      var value = new proto.viam.app.datasync.v1.SensorMetadata;
      reader.readMessage(value,proto.viam.app.datasync.v1.SensorMetadata.deserializeBinaryFromReader);
      msg.setSensorMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.app.datasync.v1.DataCaptureUploadMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.app.datasync.v1.UploadMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSensorMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.app.datasync.v1.SensorMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional UploadMetadata upload_metadata = 1;
 * @return {?proto.viam.app.datasync.v1.UploadMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.getUploadMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.UploadMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.UploadMetadata, 1));
};


/**
 * @param {?proto.viam.app.datasync.v1.UploadMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} returns this
*/
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.setUploadMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.clearUploadMetadata = function() {
  return this.setUploadMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.hasUploadMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SensorMetadata sensor_metadata = 2;
 * @return {?proto.viam.app.datasync.v1.SensorMetadata}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.getSensorMetadata = function() {
  return /** @type{?proto.viam.app.datasync.v1.SensorMetadata} */ (
    jspb.Message.getWrapperField(this, proto.viam.app.datasync.v1.SensorMetadata, 2));
};


/**
 * @param {?proto.viam.app.datasync.v1.SensorMetadata|undefined} value
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} returns this
*/
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.setSensorMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.app.datasync.v1.DataCaptureUploadMetadata} returns this
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.clearSensorMetadata = function() {
  return this.setSensorMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.app.datasync.v1.DataCaptureUploadMetadata.prototype.hasSensorMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.viam.app.datasync.v1.DataType = {
  DATA_TYPE_UNSPECIFIED: 0,
  DATA_TYPE_BINARY_SENSOR: 1,
  DATA_TYPE_TABULAR_SENSOR: 2,
  DATA_TYPE_FILE: 3
};

goog.object.extend(exports, proto.viam.app.datasync.v1);
