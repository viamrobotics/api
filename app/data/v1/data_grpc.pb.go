// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/data/v1/data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// TabularDataByFilter queries tabular data and metadata based on given filters.
	TabularDataByFilter(ctx context.Context, in *TabularDataByFilterRequest, opts ...grpc.CallOption) (*TabularDataByFilterResponse, error)
	// BinaryDataByFilter queries binary data and metadata based on given filters.
	BinaryDataByFilter(ctx context.Context, in *BinaryDataByFilterRequest, opts ...grpc.CallOption) (*BinaryDataByFilterResponse, error)
	// BinaryDataByIDs queries binary data and metadata based on given IDs.
	BinaryDataByIDs(ctx context.Context, in *BinaryDataByIDsRequest, opts ...grpc.CallOption) (*BinaryDataByIDsResponse, error)
	// DeleteTabularDataByFilter deletes tabular data based on given filters.
	DeleteTabularDataByFilter(ctx context.Context, in *DeleteTabularDataByFilterRequest, opts ...grpc.CallOption) (*DeleteTabularDataByFilterResponse, error)
	// DeleteTabularData deletes tabular data older than a number of days, based on the given organization ID.
	DeleteTabularData(ctx context.Context, in *DeleteTabularDataRequest, opts ...grpc.CallOption) (*DeleteTabularDataResponse, error)
	// DeleteBinaryDataByFilter deletes binary data based on given filters.
	DeleteBinaryDataByFilter(ctx context.Context, in *DeleteBinaryDataByFilterRequest, opts ...grpc.CallOption) (*DeleteBinaryDataByFilterResponse, error)
	// DeleteBinaryDataByIDs deletes binary data based on given IDs.
	DeleteBinaryDataByIDs(ctx context.Context, in *DeleteBinaryDataByIDsRequest, opts ...grpc.CallOption) (*DeleteBinaryDataByIDsResponse, error)
	// AddTagsToBinaryDataByIDs adds string tags, unless the tags are already present, to binary data based on given IDs.
	AddTagsToBinaryDataByIDs(ctx context.Context, in *AddTagsToBinaryDataByIDsRequest, opts ...grpc.CallOption) (*AddTagsToBinaryDataByIDsResponse, error)
	// AddTagsToBinaryDataByFilter adds string tags, unless the tags are already present, to binary data based on the given filter.
	AddTagsToBinaryDataByFilter(ctx context.Context, in *AddTagsToBinaryDataByFilterRequest, opts ...grpc.CallOption) (*AddTagsToBinaryDataByFilterResponse, error)
	// RemoveTagsToBinaryDataByIDs removes string tags from binary data based on given IDs.
	RemoveTagsFromBinaryDataByIDs(ctx context.Context, in *RemoveTagsFromBinaryDataByIDsRequest, opts ...grpc.CallOption) (*RemoveTagsFromBinaryDataByIDsResponse, error)
	// RemoveTagsToBinaryDataByFilter removes string tags from binary data based on the given filter.
	RemoveTagsFromBinaryDataByFilter(ctx context.Context, in *RemoveTagsFromBinaryDataByFilterRequest, opts ...grpc.CallOption) (*RemoveTagsFromBinaryDataByFilterResponse, error)
	// TagsByFilter gets all unique tags from data based on given filter.
	TagsByFilter(ctx context.Context, in *TagsByFilterRequest, opts ...grpc.CallOption) (*TagsByFilterResponse, error)
	// AddBoundingBoxToImageByID adds a bounding box to an image with the given ID.
	AddBoundingBoxToImageByID(ctx context.Context, in *AddBoundingBoxToImageByIDRequest, opts ...grpc.CallOption) (*AddBoundingBoxToImageByIDResponse, error)
	// RemoveBoundingBoxFromImageByID removes a bounding box from an image with the given ID.
	RemoveBoundingBoxFromImageByID(ctx context.Context, in *RemoveBoundingBoxFromImageByIDRequest, opts ...grpc.CallOption) (*RemoveBoundingBoxFromImageByIDResponse, error)
	// BoundingBoxLabelsByFilter gets all string labels for bounding boxes from data based on given filter.
	BoundingBoxLabelsByFilter(ctx context.Context, in *BoundingBoxLabelsByFilterRequest, opts ...grpc.CallOption) (*BoundingBoxLabelsByFilterResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) TabularDataByFilter(ctx context.Context, in *TabularDataByFilterRequest, opts ...grpc.CallOption) (*TabularDataByFilterResponse, error) {
	out := new(TabularDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/TabularDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) BinaryDataByFilter(ctx context.Context, in *BinaryDataByFilterRequest, opts ...grpc.CallOption) (*BinaryDataByFilterResponse, error) {
	out := new(BinaryDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/BinaryDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) BinaryDataByIDs(ctx context.Context, in *BinaryDataByIDsRequest, opts ...grpc.CallOption) (*BinaryDataByIDsResponse, error) {
	out := new(BinaryDataByIDsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/BinaryDataByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteTabularDataByFilter(ctx context.Context, in *DeleteTabularDataByFilterRequest, opts ...grpc.CallOption) (*DeleteTabularDataByFilterResponse, error) {
	out := new(DeleteTabularDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/DeleteTabularDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteTabularData(ctx context.Context, in *DeleteTabularDataRequest, opts ...grpc.CallOption) (*DeleteTabularDataResponse, error) {
	out := new(DeleteTabularDataResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/DeleteTabularData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteBinaryDataByFilter(ctx context.Context, in *DeleteBinaryDataByFilterRequest, opts ...grpc.CallOption) (*DeleteBinaryDataByFilterResponse, error) {
	out := new(DeleteBinaryDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/DeleteBinaryDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteBinaryDataByIDs(ctx context.Context, in *DeleteBinaryDataByIDsRequest, opts ...grpc.CallOption) (*DeleteBinaryDataByIDsResponse, error) {
	out := new(DeleteBinaryDataByIDsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/DeleteBinaryDataByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddTagsToBinaryDataByIDs(ctx context.Context, in *AddTagsToBinaryDataByIDsRequest, opts ...grpc.CallOption) (*AddTagsToBinaryDataByIDsResponse, error) {
	out := new(AddTagsToBinaryDataByIDsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/AddTagsToBinaryDataByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddTagsToBinaryDataByFilter(ctx context.Context, in *AddTagsToBinaryDataByFilterRequest, opts ...grpc.CallOption) (*AddTagsToBinaryDataByFilterResponse, error) {
	out := new(AddTagsToBinaryDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/AddTagsToBinaryDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RemoveTagsFromBinaryDataByIDs(ctx context.Context, in *RemoveTagsFromBinaryDataByIDsRequest, opts ...grpc.CallOption) (*RemoveTagsFromBinaryDataByIDsResponse, error) {
	out := new(RemoveTagsFromBinaryDataByIDsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/RemoveTagsFromBinaryDataByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RemoveTagsFromBinaryDataByFilter(ctx context.Context, in *RemoveTagsFromBinaryDataByFilterRequest, opts ...grpc.CallOption) (*RemoveTagsFromBinaryDataByFilterResponse, error) {
	out := new(RemoveTagsFromBinaryDataByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/RemoveTagsFromBinaryDataByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) TagsByFilter(ctx context.Context, in *TagsByFilterRequest, opts ...grpc.CallOption) (*TagsByFilterResponse, error) {
	out := new(TagsByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/TagsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AddBoundingBoxToImageByID(ctx context.Context, in *AddBoundingBoxToImageByIDRequest, opts ...grpc.CallOption) (*AddBoundingBoxToImageByIDResponse, error) {
	out := new(AddBoundingBoxToImageByIDResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/AddBoundingBoxToImageByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) RemoveBoundingBoxFromImageByID(ctx context.Context, in *RemoveBoundingBoxFromImageByIDRequest, opts ...grpc.CallOption) (*RemoveBoundingBoxFromImageByIDResponse, error) {
	out := new(RemoveBoundingBoxFromImageByIDResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/RemoveBoundingBoxFromImageByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) BoundingBoxLabelsByFilter(ctx context.Context, in *BoundingBoxLabelsByFilterRequest, opts ...grpc.CallOption) (*BoundingBoxLabelsByFilterResponse, error) {
	out := new(BoundingBoxLabelsByFilterResponse)
	err := c.cc.Invoke(ctx, "/viam.app.data.v1.DataService/BoundingBoxLabelsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// TabularDataByFilter queries tabular data and metadata based on given filters.
	TabularDataByFilter(context.Context, *TabularDataByFilterRequest) (*TabularDataByFilterResponse, error)
	// BinaryDataByFilter queries binary data and metadata based on given filters.
	BinaryDataByFilter(context.Context, *BinaryDataByFilterRequest) (*BinaryDataByFilterResponse, error)
	// BinaryDataByIDs queries binary data and metadata based on given IDs.
	BinaryDataByIDs(context.Context, *BinaryDataByIDsRequest) (*BinaryDataByIDsResponse, error)
	// DeleteTabularDataByFilter deletes tabular data based on given filters.
	DeleteTabularDataByFilter(context.Context, *DeleteTabularDataByFilterRequest) (*DeleteTabularDataByFilterResponse, error)
	// DeleteTabularData deletes tabular data older than a number of days, based on the given organization ID.
	DeleteTabularData(context.Context, *DeleteTabularDataRequest) (*DeleteTabularDataResponse, error)
	// DeleteBinaryDataByFilter deletes binary data based on given filters.
	DeleteBinaryDataByFilter(context.Context, *DeleteBinaryDataByFilterRequest) (*DeleteBinaryDataByFilterResponse, error)
	// DeleteBinaryDataByIDs deletes binary data based on given IDs.
	DeleteBinaryDataByIDs(context.Context, *DeleteBinaryDataByIDsRequest) (*DeleteBinaryDataByIDsResponse, error)
	// AddTagsToBinaryDataByIDs adds string tags, unless the tags are already present, to binary data based on given IDs.
	AddTagsToBinaryDataByIDs(context.Context, *AddTagsToBinaryDataByIDsRequest) (*AddTagsToBinaryDataByIDsResponse, error)
	// AddTagsToBinaryDataByFilter adds string tags, unless the tags are already present, to binary data based on the given filter.
	AddTagsToBinaryDataByFilter(context.Context, *AddTagsToBinaryDataByFilterRequest) (*AddTagsToBinaryDataByFilterResponse, error)
	// RemoveTagsToBinaryDataByIDs removes string tags from binary data based on given IDs.
	RemoveTagsFromBinaryDataByIDs(context.Context, *RemoveTagsFromBinaryDataByIDsRequest) (*RemoveTagsFromBinaryDataByIDsResponse, error)
	// RemoveTagsToBinaryDataByFilter removes string tags from binary data based on the given filter.
	RemoveTagsFromBinaryDataByFilter(context.Context, *RemoveTagsFromBinaryDataByFilterRequest) (*RemoveTagsFromBinaryDataByFilterResponse, error)
	// TagsByFilter gets all unique tags from data based on given filter.
	TagsByFilter(context.Context, *TagsByFilterRequest) (*TagsByFilterResponse, error)
	// AddBoundingBoxToImageByID adds a bounding box to an image with the given ID.
	AddBoundingBoxToImageByID(context.Context, *AddBoundingBoxToImageByIDRequest) (*AddBoundingBoxToImageByIDResponse, error)
	// RemoveBoundingBoxFromImageByID removes a bounding box from an image with the given ID.
	RemoveBoundingBoxFromImageByID(context.Context, *RemoveBoundingBoxFromImageByIDRequest) (*RemoveBoundingBoxFromImageByIDResponse, error)
	// BoundingBoxLabelsByFilter gets all string labels for bounding boxes from data based on given filter.
	BoundingBoxLabelsByFilter(context.Context, *BoundingBoxLabelsByFilterRequest) (*BoundingBoxLabelsByFilterResponse, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) TabularDataByFilter(context.Context, *TabularDataByFilterRequest) (*TabularDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TabularDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) BinaryDataByFilter(context.Context, *BinaryDataByFilterRequest) (*BinaryDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) BinaryDataByIDs(context.Context, *BinaryDataByIDsRequest) (*BinaryDataByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryDataByIDs not implemented")
}
func (UnimplementedDataServiceServer) DeleteTabularDataByFilter(context.Context, *DeleteTabularDataByFilterRequest) (*DeleteTabularDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTabularDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) DeleteTabularData(context.Context, *DeleteTabularDataRequest) (*DeleteTabularDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTabularData not implemented")
}
func (UnimplementedDataServiceServer) DeleteBinaryDataByFilter(context.Context, *DeleteBinaryDataByFilterRequest) (*DeleteBinaryDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) DeleteBinaryDataByIDs(context.Context, *DeleteBinaryDataByIDsRequest) (*DeleteBinaryDataByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryDataByIDs not implemented")
}
func (UnimplementedDataServiceServer) AddTagsToBinaryDataByIDs(context.Context, *AddTagsToBinaryDataByIDsRequest) (*AddTagsToBinaryDataByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTagsToBinaryDataByIDs not implemented")
}
func (UnimplementedDataServiceServer) AddTagsToBinaryDataByFilter(context.Context, *AddTagsToBinaryDataByFilterRequest) (*AddTagsToBinaryDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTagsToBinaryDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) RemoveTagsFromBinaryDataByIDs(context.Context, *RemoveTagsFromBinaryDataByIDsRequest) (*RemoveTagsFromBinaryDataByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTagsFromBinaryDataByIDs not implemented")
}
func (UnimplementedDataServiceServer) RemoveTagsFromBinaryDataByFilter(context.Context, *RemoveTagsFromBinaryDataByFilterRequest) (*RemoveTagsFromBinaryDataByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTagsFromBinaryDataByFilter not implemented")
}
func (UnimplementedDataServiceServer) TagsByFilter(context.Context, *TagsByFilterRequest) (*TagsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagsByFilter not implemented")
}
func (UnimplementedDataServiceServer) AddBoundingBoxToImageByID(context.Context, *AddBoundingBoxToImageByIDRequest) (*AddBoundingBoxToImageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoundingBoxToImageByID not implemented")
}
func (UnimplementedDataServiceServer) RemoveBoundingBoxFromImageByID(context.Context, *RemoveBoundingBoxFromImageByIDRequest) (*RemoveBoundingBoxFromImageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBoundingBoxFromImageByID not implemented")
}
func (UnimplementedDataServiceServer) BoundingBoxLabelsByFilter(context.Context, *BoundingBoxLabelsByFilterRequest) (*BoundingBoxLabelsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoundingBoxLabelsByFilter not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_TabularDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabularDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).TabularDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/TabularDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).TabularDataByFilter(ctx, req.(*TabularDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_BinaryDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).BinaryDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/BinaryDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).BinaryDataByFilter(ctx, req.(*BinaryDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_BinaryDataByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDataByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).BinaryDataByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/BinaryDataByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).BinaryDataByIDs(ctx, req.(*BinaryDataByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteTabularDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTabularDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteTabularDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/DeleteTabularDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteTabularDataByFilter(ctx, req.(*DeleteTabularDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteTabularData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTabularDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteTabularData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/DeleteTabularData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteTabularData(ctx, req.(*DeleteTabularDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteBinaryDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteBinaryDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/DeleteBinaryDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteBinaryDataByFilter(ctx, req.(*DeleteBinaryDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteBinaryDataByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryDataByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteBinaryDataByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/DeleteBinaryDataByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteBinaryDataByIDs(ctx, req.(*DeleteBinaryDataByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddTagsToBinaryDataByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsToBinaryDataByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddTagsToBinaryDataByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/AddTagsToBinaryDataByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddTagsToBinaryDataByIDs(ctx, req.(*AddTagsToBinaryDataByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddTagsToBinaryDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsToBinaryDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddTagsToBinaryDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/AddTagsToBinaryDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddTagsToBinaryDataByFilter(ctx, req.(*AddTagsToBinaryDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RemoveTagsFromBinaryDataByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagsFromBinaryDataByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RemoveTagsFromBinaryDataByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/RemoveTagsFromBinaryDataByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RemoveTagsFromBinaryDataByIDs(ctx, req.(*RemoveTagsFromBinaryDataByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RemoveTagsFromBinaryDataByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagsFromBinaryDataByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RemoveTagsFromBinaryDataByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/RemoveTagsFromBinaryDataByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RemoveTagsFromBinaryDataByFilter(ctx, req.(*RemoveTagsFromBinaryDataByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_TagsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).TagsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/TagsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).TagsByFilter(ctx, req.(*TagsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AddBoundingBoxToImageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBoundingBoxToImageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AddBoundingBoxToImageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/AddBoundingBoxToImageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AddBoundingBoxToImageByID(ctx, req.(*AddBoundingBoxToImageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_RemoveBoundingBoxFromImageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBoundingBoxFromImageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).RemoveBoundingBoxFromImageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/RemoveBoundingBoxFromImageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).RemoveBoundingBoxFromImageByID(ctx, req.(*RemoveBoundingBoxFromImageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_BoundingBoxLabelsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundingBoxLabelsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).BoundingBoxLabelsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.data.v1.DataService/BoundingBoxLabelsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).BoundingBoxLabelsByFilter(ctx, req.(*BoundingBoxLabelsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.data.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TabularDataByFilter",
			Handler:    _DataService_TabularDataByFilter_Handler,
		},
		{
			MethodName: "BinaryDataByFilter",
			Handler:    _DataService_BinaryDataByFilter_Handler,
		},
		{
			MethodName: "BinaryDataByIDs",
			Handler:    _DataService_BinaryDataByIDs_Handler,
		},
		{
			MethodName: "DeleteTabularDataByFilter",
			Handler:    _DataService_DeleteTabularDataByFilter_Handler,
		},
		{
			MethodName: "DeleteTabularData",
			Handler:    _DataService_DeleteTabularData_Handler,
		},
		{
			MethodName: "DeleteBinaryDataByFilter",
			Handler:    _DataService_DeleteBinaryDataByFilter_Handler,
		},
		{
			MethodName: "DeleteBinaryDataByIDs",
			Handler:    _DataService_DeleteBinaryDataByIDs_Handler,
		},
		{
			MethodName: "AddTagsToBinaryDataByIDs",
			Handler:    _DataService_AddTagsToBinaryDataByIDs_Handler,
		},
		{
			MethodName: "AddTagsToBinaryDataByFilter",
			Handler:    _DataService_AddTagsToBinaryDataByFilter_Handler,
		},
		{
			MethodName: "RemoveTagsFromBinaryDataByIDs",
			Handler:    _DataService_RemoveTagsFromBinaryDataByIDs_Handler,
		},
		{
			MethodName: "RemoveTagsFromBinaryDataByFilter",
			Handler:    _DataService_RemoveTagsFromBinaryDataByFilter_Handler,
		},
		{
			MethodName: "TagsByFilter",
			Handler:    _DataService_TagsByFilter_Handler,
		},
		{
			MethodName: "AddBoundingBoxToImageByID",
			Handler:    _DataService_AddBoundingBoxToImageByID_Handler,
		},
		{
			MethodName: "RemoveBoundingBoxFromImageByID",
			Handler:    _DataService_RemoveBoundingBoxFromImageByID_Handler,
		},
		{
			MethodName: "BoundingBoxLabelsByFilter",
			Handler:    _DataService_BoundingBoxLabelsByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/data/v1/data.proto",
}
