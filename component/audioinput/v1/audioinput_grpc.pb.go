// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: component/audioinput/v1/audioinput.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AudioInputService_Chunks_FullMethodName        = "/viam.component.audioinput.v1.AudioInputService/Chunks"
	AudioInputService_Properties_FullMethodName    = "/viam.component.audioinput.v1.AudioInputService/Properties"
	AudioInputService_Record_FullMethodName        = "/viam.component.audioinput.v1.AudioInputService/Record"
	AudioInputService_DoCommand_FullMethodName     = "/viam.component.audioinput.v1.AudioInputService/DoCommand"
	AudioInputService_GetGeometries_FullMethodName = "/viam.component.audioinput.v1.AudioInputService/GetGeometries"
)

// AudioInputServiceClient is the client API for AudioInputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An AudioInputService services all audio inputs associated with a robot
type AudioInputServiceClient interface {
	// Chunks returns audio chunks forever from an audio input of the underlying robot.
	Chunks(ctx context.Context, in *ChunksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunksResponse], error)
	// Properties returns properties of an audio input of the underlying robot.
	Properties(ctx context.Context, in *PropertiesRequest, opts ...grpc.CallOption) (*PropertiesResponse, error)
	// Record records audio from an audio input of the underlying robot
	// to an HTTP response. A specific MIME type cannot be requested and may not necessarily
	// be the same one returned each time.
	Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error)
}

type audioInputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioInputServiceClient(cc grpc.ClientConnInterface) AudioInputServiceClient {
	return &audioInputServiceClient{cc}
}

func (c *audioInputServiceClient) Chunks(ctx context.Context, in *ChunksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AudioInputService_ServiceDesc.Streams[0], AudioInputService_Chunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunksRequest, ChunksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioInputService_ChunksClient = grpc.ServerStreamingClient[ChunksResponse]

func (c *audioInputServiceClient) Properties(ctx context.Context, in *PropertiesRequest, opts ...grpc.CallOption) (*PropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PropertiesResponse)
	err := c.cc.Invoke(ctx, AudioInputService_Properties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioInputServiceClient) Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, AudioInputService_Record_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioInputServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, AudioInputService_DoCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioInputServiceClient) GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetGeometriesResponse)
	err := c.cc.Invoke(ctx, AudioInputService_GetGeometries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioInputServiceServer is the server API for AudioInputService service.
// All implementations must embed UnimplementedAudioInputServiceServer
// for forward compatibility.
//
// An AudioInputService services all audio inputs associated with a robot
type AudioInputServiceServer interface {
	// Chunks returns audio chunks forever from an audio input of the underlying robot.
	Chunks(*ChunksRequest, grpc.ServerStreamingServer[ChunksResponse]) error
	// Properties returns properties of an audio input of the underlying robot.
	Properties(context.Context, *PropertiesRequest) (*PropertiesResponse, error)
	// Record records audio from an audio input of the underlying robot
	// to an HTTP response. A specific MIME type cannot be requested and may not necessarily
	// be the same one returned each time.
	Record(context.Context, *RecordRequest) (*httpbody.HttpBody, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error)
	mustEmbedUnimplementedAudioInputServiceServer()
}

// UnimplementedAudioInputServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAudioInputServiceServer struct{}

func (UnimplementedAudioInputServiceServer) Chunks(*ChunksRequest, grpc.ServerStreamingServer[ChunksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Chunks not implemented")
}
func (UnimplementedAudioInputServiceServer) Properties(context.Context, *PropertiesRequest) (*PropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Properties not implemented")
}
func (UnimplementedAudioInputServiceServer) Record(context.Context, *RecordRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (UnimplementedAudioInputServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedAudioInputServiceServer) GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeometries not implemented")
}
func (UnimplementedAudioInputServiceServer) mustEmbedUnimplementedAudioInputServiceServer() {}
func (UnimplementedAudioInputServiceServer) testEmbeddedByValue()                           {}

// UnsafeAudioInputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioInputServiceServer will
// result in compilation errors.
type UnsafeAudioInputServiceServer interface {
	mustEmbedUnimplementedAudioInputServiceServer()
}

func RegisterAudioInputServiceServer(s grpc.ServiceRegistrar, srv AudioInputServiceServer) {
	// If the following call pancis, it indicates UnimplementedAudioInputServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AudioInputService_ServiceDesc, srv)
}

func _AudioInputService_Chunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChunksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioInputServiceServer).Chunks(m, &grpc.GenericServerStream[ChunksRequest, ChunksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioInputService_ChunksServer = grpc.ServerStreamingServer[ChunksResponse]

func _AudioInputService_Properties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInputServiceServer).Properties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioInputService_Properties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInputServiceServer).Properties(ctx, req.(*PropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioInputService_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInputServiceServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioInputService_Record_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInputServiceServer).Record(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioInputService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInputServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioInputService_DoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInputServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioInputService_GetGeometries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGeometriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInputServiceServer).GetGeometries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioInputService_GetGeometries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInputServiceServer).GetGeometries(ctx, req.(*v1.GetGeometriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioInputService_ServiceDesc is the grpc.ServiceDesc for AudioInputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioInputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.component.audioinput.v1.AudioInputService",
	HandlerType: (*AudioInputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Properties",
			Handler:    _AudioInputService_Properties_Handler,
		},
		{
			MethodName: "Record",
			Handler:    _AudioInputService_Record_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _AudioInputService_DoCommand_Handler,
		},
		{
			MethodName: "GetGeometries",
			Handler:    _AudioInputService_GetGeometries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chunks",
			Handler:       _AudioInputService_Chunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "component/audioinput/v1/audioinput.proto",
}
