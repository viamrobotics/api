// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/worldstatestore/v1/world_state_store.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorldStateStoreServiceClient is the client API for WorldStateStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldStateStoreServiceClient interface {
	// ListUUIDs returns all world state transform UUIDs
	ListUUIDs(ctx context.Context, in *ListUUIDsRequest, opts ...grpc.CallOption) (*ListUUIDsResponse, error)
	// GetTransform returns a world state transform by uuid
	GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error)
	// StreamTransformChanges streams changes to world state transforms
	StreamTransformChanges(ctx context.Context, in *StreamTransformChangesRequest, opts ...grpc.CallOption) (WorldStateStoreService_StreamTransformChangesClient, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type worldStateStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldStateStoreServiceClient(cc grpc.ClientConnInterface) WorldStateStoreServiceClient {
	return &worldStateStoreServiceClient{cc}
}

func (c *worldStateStoreServiceClient) ListUUIDs(ctx context.Context, in *ListUUIDsRequest, opts ...grpc.CallOption) (*ListUUIDsResponse, error) {
	out := new(ListUUIDsResponse)
	err := c.cc.Invoke(ctx, "/viam.service.worldstatestore.v1.WorldStateStoreService/ListUUIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldStateStoreServiceClient) GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error) {
	out := new(GetTransformResponse)
	err := c.cc.Invoke(ctx, "/viam.service.worldstatestore.v1.WorldStateStoreService/GetTransform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldStateStoreServiceClient) StreamTransformChanges(ctx context.Context, in *StreamTransformChangesRequest, opts ...grpc.CallOption) (WorldStateStoreService_StreamTransformChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorldStateStoreService_ServiceDesc.Streams[0], "/viam.service.worldstatestore.v1.WorldStateStoreService/StreamTransformChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldStateStoreServiceStreamTransformChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldStateStoreService_StreamTransformChangesClient interface {
	Recv() (*StreamTransformChangesResponse, error)
	grpc.ClientStream
}

type worldStateStoreServiceStreamTransformChangesClient struct {
	grpc.ClientStream
}

func (x *worldStateStoreServiceStreamTransformChangesClient) Recv() (*StreamTransformChangesResponse, error) {
	m := new(StreamTransformChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldStateStoreServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.service.worldstatestore.v1.WorldStateStoreService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldStateStoreServiceServer is the server API for WorldStateStoreService service.
// All implementations must embed UnimplementedWorldStateStoreServiceServer
// for forward compatibility
type WorldStateStoreServiceServer interface {
	// ListUUIDs returns all world state transform UUIDs
	ListUUIDs(context.Context, *ListUUIDsRequest) (*ListUUIDsResponse, error)
	// GetTransform returns a world state transform by uuid
	GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error)
	// StreamTransformChanges streams changes to world state transforms
	StreamTransformChanges(*StreamTransformChangesRequest, WorldStateStoreService_StreamTransformChangesServer) error
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedWorldStateStoreServiceServer()
}

// UnimplementedWorldStateStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorldStateStoreServiceServer struct {
}

func (UnimplementedWorldStateStoreServiceServer) ListUUIDs(context.Context, *ListUUIDsRequest) (*ListUUIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUUIDs not implemented")
}
func (UnimplementedWorldStateStoreServiceServer) GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransform not implemented")
}
func (UnimplementedWorldStateStoreServiceServer) StreamTransformChanges(*StreamTransformChangesRequest, WorldStateStoreService_StreamTransformChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransformChanges not implemented")
}
func (UnimplementedWorldStateStoreServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedWorldStateStoreServiceServer) mustEmbedUnimplementedWorldStateStoreServiceServer() {
}

// UnsafeWorldStateStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldStateStoreServiceServer will
// result in compilation errors.
type UnsafeWorldStateStoreServiceServer interface {
	mustEmbedUnimplementedWorldStateStoreServiceServer()
}

func RegisterWorldStateStoreServiceServer(s grpc.ServiceRegistrar, srv WorldStateStoreServiceServer) {
	s.RegisterService(&WorldStateStoreService_ServiceDesc, srv)
}

func _WorldStateStoreService_ListUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUUIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldStateStoreServiceServer).ListUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.worldstatestore.v1.WorldStateStoreService/ListUUIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldStateStoreServiceServer).ListUUIDs(ctx, req.(*ListUUIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldStateStoreService_GetTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldStateStoreServiceServer).GetTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.worldstatestore.v1.WorldStateStoreService/GetTransform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldStateStoreServiceServer).GetTransform(ctx, req.(*GetTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldStateStoreService_StreamTransformChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTransformChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldStateStoreServiceServer).StreamTransformChanges(m, &worldStateStoreServiceStreamTransformChangesServer{stream})
}

type WorldStateStoreService_StreamTransformChangesServer interface {
	Send(*StreamTransformChangesResponse) error
	grpc.ServerStream
}

type worldStateStoreServiceStreamTransformChangesServer struct {
	grpc.ServerStream
}

func (x *worldStateStoreServiceStreamTransformChangesServer) Send(m *StreamTransformChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldStateStoreService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldStateStoreServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.worldstatestore.v1.WorldStateStoreService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldStateStoreServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldStateStoreService_ServiceDesc is the grpc.ServiceDesc for WorldStateStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldStateStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.worldstatestore.v1.WorldStateStoreService",
	HandlerType: (*WorldStateStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUUIDs",
			Handler:    _WorldStateStoreService_ListUUIDs_Handler,
		},
		{
			MethodName: "GetTransform",
			Handler:    _WorldStateStoreService_GetTransform_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _WorldStateStoreService_DoCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTransformChanges",
			Handler:       _WorldStateStoreService_StreamTransformChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/worldstatestore/v1/world_state_store.proto",
}
