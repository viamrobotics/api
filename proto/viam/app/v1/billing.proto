syntax = "proto3";

package viam.app.v1;

import "google/protobuf/timestamp.proto";

option go_package = "go.viam.com/api/app/v1";

service BillingService {
  // Detailed breakdown of current month's costs
  rpc GetCurrentMonthUsage(GetCurrentMonthUsageRequest) returns (GetCurrentMonthUsageResponse);
  // Org-level information (like billing email and payment details)
  rpc GetOrgBillingInformation(GetOrgBillingInformationRequest) returns (GetOrgBillingInformationResponse);
  // Total outstanding balance and previous invoices
  rpc GetInvoicesSummary(GetInvoicesSummaryRequest) returns (GetInvoicesSummaryResponse);
  // Download a PDF invoice
  rpc GetInvoicePdf(GetInvoicePdfRequest) returns (stream GetInvoicePdfResponse);
}

message InvoiceSummary {
  string id = 1;
  google.protobuf.Timestamp invoice_date = 2;
  double invoice_amount = 3;
  string status = 4;
  google.protobuf.Timestamp due_date = 5;
  google.protobuf.Timestamp paid_date = 6;
}

message BillableResourceEvent {
  string id = 1;
  string type = 2;
  double usage_quantity = 3;
  string usage_quantity_unit = 4;
  string usage_cost = 5;
  google.protobuf.Timestamp occurred_at = 6;
  string user_name = 7;
}

message Invoice {
  string id = 1;
  google.protobuf.Timestamp invoice_date = 2;
  double invoice_amount = 3;
  string status = 4;
  google.protobuf.Timestamp due_date = 5;
  repeated BillableResourceEvent items = 6;
  string emailed_to = 7;
}

enum PaymentMethodType {
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;
  PAYMENT_METHOD_TYPE_CARD = 1;
}

message PaymentMethodCard {
  string brand = 1;
  string last_four_digits = 2;
}

message GetCurrentMonthUsageRequest {
  string org_id = 1;
}

message GetCurrentMonthUsageResponse {
  google.protobuf.Timestamp start_date = 1;
  google.protobuf.Timestamp end_date = 2;
  double cloud_storage_usage_cost = 3;
  double data_upload_usage_cost = 4;
  double data_egres_usage_cost = 5;
  double remote_control_usage_cost = 6;
  double standard_compute_usage_cost = 7;
  double discount_amount = 8;
  double total_usage_with_discount = 9;
  double total_usage_without_discount = 10;
  double per_machine_usage_cost = 11;
  double binary_data_cloud_storage_usage_cost = 12;
  double other_cloud_storage_usage_cost = 13;
}

message GetOrgBillingInformationRequest {
  string org_id = 1;
}

message GetOrgBillingInformationResponse {
  PaymentMethodType type = 1;
  string billing_email = 2;

  // defined if type is PAYMENT_METHOD_TYPE_CARD
  optional PaymentMethodCard method = 3;
  // Only return billing_tier for billing dashboard admin users
  optional string billing_tier = 4;
}

message GetInvoicesSummaryRequest {
  string org_id = 1;
}

message GetInvoicesSummaryResponse {
  // all unpaid balances at the end of the last billing cycle
  double outstanding_balance = 1;
  // all previous invoices
  repeated InvoiceSummary invoices = 2;
}

message GetInvoicePdfRequest {
  string id = 1;
  string org_id = 2;
}

message GetInvoicePdfResponse {
  bytes chunk = 1;
}
