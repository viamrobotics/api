// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	// AddComponent tells a module about a new component to handle
	AddComponent(ctx context.Context, in *AddComponentRequest, opts ...grpc.CallOption) (*AddComponentResponse, error)
	// RemoveComponent tells a module to close/stop a component and remove it
	RemoveComponent(ctx context.Context, in *RemoveComponentRequest, opts ...grpc.CallOption) (*RemoveComponentResponse, error)
	// ReconfigureComponent tells a module to reconfigure an existing resource
	ReconfigureComponent(ctx context.Context, in *ReconfigureComponentRequest, opts ...grpc.CallOption) (*ReconfigureComponentResponse, error)
	// CloseModule tells a module to stop all activity and terminate
	CloseModule(ctx context.Context, in *CloseModuleRequest, opts ...grpc.CallOption) (*CloseModuleResponse, error)
	// Ready determines if the server is started and ready to recieve resource configurations.
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) AddComponent(ctx context.Context, in *AddComponentRequest, opts ...grpc.CallOption) (*AddComponentResponse, error) {
	out := new(AddComponentResponse)
	err := c.cc.Invoke(ctx, "/viam.module.v1.ModuleService/AddComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) RemoveComponent(ctx context.Context, in *RemoveComponentRequest, opts ...grpc.CallOption) (*RemoveComponentResponse, error) {
	out := new(RemoveComponentResponse)
	err := c.cc.Invoke(ctx, "/viam.module.v1.ModuleService/RemoveComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ReconfigureComponent(ctx context.Context, in *ReconfigureComponentRequest, opts ...grpc.CallOption) (*ReconfigureComponentResponse, error) {
	out := new(ReconfigureComponentResponse)
	err := c.cc.Invoke(ctx, "/viam.module.v1.ModuleService/ReconfigureComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) CloseModule(ctx context.Context, in *CloseModuleRequest, opts ...grpc.CallOption) (*CloseModuleResponse, error) {
	out := new(CloseModuleResponse)
	err := c.cc.Invoke(ctx, "/viam.module.v1.ModuleService/CloseModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/viam.module.v1.ModuleService/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility
type ModuleServiceServer interface {
	// AddComponent tells a module about a new component to handle
	AddComponent(context.Context, *AddComponentRequest) (*AddComponentResponse, error)
	// RemoveComponent tells a module to close/stop a component and remove it
	RemoveComponent(context.Context, *RemoveComponentRequest) (*RemoveComponentResponse, error)
	// ReconfigureComponent tells a module to reconfigure an existing resource
	ReconfigureComponent(context.Context, *ReconfigureComponentRequest) (*ReconfigureComponentResponse, error)
	// CloseModule tells a module to stop all activity and terminate
	CloseModule(context.Context, *CloseModuleRequest) (*CloseModuleResponse, error)
	// Ready determines if the server is started and ready to recieve resource configurations.
	Ready(context.Context, *ReadyRequest) (*ReadyResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServiceServer struct {
}

func (UnimplementedModuleServiceServer) AddComponent(context.Context, *AddComponentRequest) (*AddComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComponent not implemented")
}
func (UnimplementedModuleServiceServer) RemoveComponent(context.Context, *RemoveComponentRequest) (*RemoveComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComponent not implemented")
}
func (UnimplementedModuleServiceServer) ReconfigureComponent(context.Context, *ReconfigureComponentRequest) (*ReconfigureComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconfigureComponent not implemented")
}
func (UnimplementedModuleServiceServer) CloseModule(context.Context, *CloseModuleRequest) (*CloseModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseModule not implemented")
}
func (UnimplementedModuleServiceServer) Ready(context.Context, *ReadyRequest) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_AddComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).AddComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.module.v1.ModuleService/AddComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).AddComponent(ctx, req.(*AddComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_RemoveComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).RemoveComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.module.v1.ModuleService/RemoveComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).RemoveComponent(ctx, req.(*RemoveComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ReconfigureComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigureComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ReconfigureComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.module.v1.ModuleService/ReconfigureComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ReconfigureComponent(ctx, req.(*ReconfigureComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_CloseModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CloseModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.module.v1.ModuleService/CloseModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CloseModule(ctx, req.(*CloseModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.module.v1.ModuleService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.module.v1.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComponent",
			Handler:    _ModuleService_AddComponent_Handler,
		},
		{
			MethodName: "RemoveComponent",
			Handler:    _ModuleService_RemoveComponent_Handler,
		},
		{
			MethodName: "ReconfigureComponent",
			Handler:    _ModuleService_ReconfigureComponent_Handler,
		},
		{
			MethodName: "CloseModule",
			Handler:    _ModuleService_CloseModule_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _ModuleService_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/v1/module.proto",
}
