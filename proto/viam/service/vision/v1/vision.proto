syntax = "proto3";

package viam.service.vision.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/service/vision/v1";
option java_package = "com.viam.service.vision.v1";

// VisionService declares the gRPC contract for a vision service
service VisionService {
  // GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
  rpc GetDetectionsFromCamera(GetDetectionsFromCameraRequest) returns (GetDetectionsFromCameraResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/camera_detections"
    };
  }

  // GetDetections will return a list of detections in the next image given the image bytes and a detector
  rpc GetDetections(GetDetectionsRequest) returns (GetDetectionsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/detections"
    };
  }

  // GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
  rpc GetClassificationsFromCamera(GetClassificationsFromCameraRequest) returns (GetClassificationsFromCameraResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/camera_classifications"
    };
  }

  // GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
  rpc GetClassifications(GetClassificationsRequest) returns (GetClassificationsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/classifications"
    };
  }

  // GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
  // as well as the 3-vector center of each of the found objects.
  // A specific MIME type can be requested but may not necessarily be the same one returned.
  rpc GetObjectPointClouds(GetObjectPointCloudsRequest) returns (GetObjectPointCloudsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/object_point_clouds"
    };
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/do_command"
    };
  }
}
message GetDetectionsRequest {
  // name of the vision service
  string name = 1;
  // the image, encoded as bytes
  bytes image = 2;
  // the width of the image
  int64 width = 3;
  // the height of the image
  int64 height = 4;
  // the actual MIME type of image
  string mime_type = 5;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetDetectionsResponse {
  // the bounding boxes and labels
  repeated Detection detections = 1;
}

message GetDetectionsFromCameraRequest {
  // name of the vision service
  string name = 1;
  // name of camera source to use as input
  string camera_name = 2;
  google.protobuf.Struct extra = 99;
}

message GetDetectionsFromCameraResponse {
  // the bounding boxes and labels
  repeated Detection detections = 1;
}

message Detection {
  // the four corners of the box
  optional int64 x_min = 1;
  optional int64 y_min = 2;
  optional int64 x_max = 3;
  optional int64 y_max = 4;
  // the confidence of the detection
  double confidence = 5;
  // label associated with the detected object
  string class_name = 6;
}

message GetClassificationsRequest {
  // name of the vision service
  string name = 1;
  // the image encoded as bytes
  bytes image = 2;
  // the width of the image
  int32 width = 3;
  // the height of the image
  int32 height = 4;
  // the actual MIME type of image
  string mime_type = 5;
  // the number of classifications desired
  int32 n = 6;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetClassificationsResponse {
  repeated Classification classifications = 1;
}

message GetClassificationsFromCameraRequest {
  // name of the vision service
  string name = 1;
  // the image encoded as bytes
  string camera_name = 2;
  // the number of classifications desired
  int32 n = 3;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetClassificationsFromCameraResponse {
  repeated Classification classifications = 1;
}

// the general form of the output from a classifier
message Classification {
  // the class name
  string class_name = 1;
  // the confidence score of the classification
  double confidence = 2;
}

message GetObjectPointCloudsRequest {
  string name = 1;
  // Name of a camera
  string camera_name = 2;
  // Requested MIME type of response
  string mime_type = 3;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetObjectPointCloudsResponse {
  // Actual MIME type of response
  string mime_type = 1;
  // List of objects in the scene
  repeated common.v1.PointCloudObject objects = 2;
}
