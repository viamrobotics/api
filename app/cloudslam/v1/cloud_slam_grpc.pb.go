// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: app/cloudslam/v1/cloud_slam.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudSLAMService_StartMappingSession_FullMethodName              = "/viam.app.cloudslam.v1.CloudSLAMService/StartMappingSession"
	CloudSLAMService_GetActiveMappingSessionsForRobot_FullMethodName = "/viam.app.cloudslam.v1.CloudSLAMService/GetActiveMappingSessionsForRobot"
	CloudSLAMService_GetMappingSessionPointCloud_FullMethodName      = "/viam.app.cloudslam.v1.CloudSLAMService/GetMappingSessionPointCloud"
	CloudSLAMService_ListMappingSessions_FullMethodName              = "/viam.app.cloudslam.v1.CloudSLAMService/ListMappingSessions"
	CloudSLAMService_StopMappingSession_FullMethodName               = "/viam.app.cloudslam.v1.CloudSLAMService/StopMappingSession"
	CloudSLAMService_GetMappingSessionMetadataByID_FullMethodName    = "/viam.app.cloudslam.v1.CloudSLAMService/GetMappingSessionMetadataByID"
)

// CloudSLAMServiceClient is the client API for CloudSLAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudSLAMServiceClient interface {
	StartMappingSession(ctx context.Context, in *StartMappingSessionRequest, opts ...grpc.CallOption) (*StartMappingSessionResponse, error)
	GetActiveMappingSessionsForRobot(ctx context.Context, in *GetActiveMappingSessionsForRobotRequest, opts ...grpc.CallOption) (*GetActiveMappingSessionsForRobotResponse, error)
	GetMappingSessionPointCloud(ctx context.Context, in *GetMappingSessionPointCloudRequest, opts ...grpc.CallOption) (*GetMappingSessionPointCloudResponse, error)
	ListMappingSessions(ctx context.Context, in *ListMappingSessionsRequest, opts ...grpc.CallOption) (*ListMappingSessionsResponse, error)
	StopMappingSession(ctx context.Context, in *StopMappingSessionRequest, opts ...grpc.CallOption) (*StopMappingSessionResponse, error)
	GetMappingSessionMetadataByID(ctx context.Context, in *GetMappingSessionMetadataByIDRequest, opts ...grpc.CallOption) (*GetMappingSessionMetadataByIDResponse, error)
}

type cloudSLAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudSLAMServiceClient(cc grpc.ClientConnInterface) CloudSLAMServiceClient {
	return &cloudSLAMServiceClient{cc}
}

func (c *cloudSLAMServiceClient) StartMappingSession(ctx context.Context, in *StartMappingSessionRequest, opts ...grpc.CallOption) (*StartMappingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMappingSessionResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_StartMappingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSLAMServiceClient) GetActiveMappingSessionsForRobot(ctx context.Context, in *GetActiveMappingSessionsForRobotRequest, opts ...grpc.CallOption) (*GetActiveMappingSessionsForRobotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveMappingSessionsForRobotResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_GetActiveMappingSessionsForRobot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSLAMServiceClient) GetMappingSessionPointCloud(ctx context.Context, in *GetMappingSessionPointCloudRequest, opts ...grpc.CallOption) (*GetMappingSessionPointCloudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMappingSessionPointCloudResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_GetMappingSessionPointCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSLAMServiceClient) ListMappingSessions(ctx context.Context, in *ListMappingSessionsRequest, opts ...grpc.CallOption) (*ListMappingSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMappingSessionsResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_ListMappingSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSLAMServiceClient) StopMappingSession(ctx context.Context, in *StopMappingSessionRequest, opts ...grpc.CallOption) (*StopMappingSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopMappingSessionResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_StopMappingSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudSLAMServiceClient) GetMappingSessionMetadataByID(ctx context.Context, in *GetMappingSessionMetadataByIDRequest, opts ...grpc.CallOption) (*GetMappingSessionMetadataByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMappingSessionMetadataByIDResponse)
	err := c.cc.Invoke(ctx, CloudSLAMService_GetMappingSessionMetadataByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudSLAMServiceServer is the server API for CloudSLAMService service.
// All implementations must embed UnimplementedCloudSLAMServiceServer
// for forward compatibility.
type CloudSLAMServiceServer interface {
	StartMappingSession(context.Context, *StartMappingSessionRequest) (*StartMappingSessionResponse, error)
	GetActiveMappingSessionsForRobot(context.Context, *GetActiveMappingSessionsForRobotRequest) (*GetActiveMappingSessionsForRobotResponse, error)
	GetMappingSessionPointCloud(context.Context, *GetMappingSessionPointCloudRequest) (*GetMappingSessionPointCloudResponse, error)
	ListMappingSessions(context.Context, *ListMappingSessionsRequest) (*ListMappingSessionsResponse, error)
	StopMappingSession(context.Context, *StopMappingSessionRequest) (*StopMappingSessionResponse, error)
	GetMappingSessionMetadataByID(context.Context, *GetMappingSessionMetadataByIDRequest) (*GetMappingSessionMetadataByIDResponse, error)
	mustEmbedUnimplementedCloudSLAMServiceServer()
}

// UnimplementedCloudSLAMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudSLAMServiceServer struct{}

func (UnimplementedCloudSLAMServiceServer) StartMappingSession(context.Context, *StartMappingSessionRequest) (*StartMappingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMappingSession not implemented")
}
func (UnimplementedCloudSLAMServiceServer) GetActiveMappingSessionsForRobot(context.Context, *GetActiveMappingSessionsForRobotRequest) (*GetActiveMappingSessionsForRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveMappingSessionsForRobot not implemented")
}
func (UnimplementedCloudSLAMServiceServer) GetMappingSessionPointCloud(context.Context, *GetMappingSessionPointCloudRequest) (*GetMappingSessionPointCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappingSessionPointCloud not implemented")
}
func (UnimplementedCloudSLAMServiceServer) ListMappingSessions(context.Context, *ListMappingSessionsRequest) (*ListMappingSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappingSessions not implemented")
}
func (UnimplementedCloudSLAMServiceServer) StopMappingSession(context.Context, *StopMappingSessionRequest) (*StopMappingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMappingSession not implemented")
}
func (UnimplementedCloudSLAMServiceServer) GetMappingSessionMetadataByID(context.Context, *GetMappingSessionMetadataByIDRequest) (*GetMappingSessionMetadataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappingSessionMetadataByID not implemented")
}
func (UnimplementedCloudSLAMServiceServer) mustEmbedUnimplementedCloudSLAMServiceServer() {}
func (UnimplementedCloudSLAMServiceServer) testEmbeddedByValue()                          {}

// UnsafeCloudSLAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudSLAMServiceServer will
// result in compilation errors.
type UnsafeCloudSLAMServiceServer interface {
	mustEmbedUnimplementedCloudSLAMServiceServer()
}

func RegisterCloudSLAMServiceServer(s grpc.ServiceRegistrar, srv CloudSLAMServiceServer) {
	// If the following call pancis, it indicates UnimplementedCloudSLAMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudSLAMService_ServiceDesc, srv)
}

func _CloudSLAMService_StartMappingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMappingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).StartMappingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_StartMappingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).StartMappingSession(ctx, req.(*StartMappingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSLAMService_GetActiveMappingSessionsForRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveMappingSessionsForRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).GetActiveMappingSessionsForRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_GetActiveMappingSessionsForRobot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).GetActiveMappingSessionsForRobot(ctx, req.(*GetActiveMappingSessionsForRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSLAMService_GetMappingSessionPointCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingSessionPointCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).GetMappingSessionPointCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_GetMappingSessionPointCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).GetMappingSessionPointCloud(ctx, req.(*GetMappingSessionPointCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSLAMService_ListMappingSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMappingSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).ListMappingSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_ListMappingSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).ListMappingSessions(ctx, req.(*ListMappingSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSLAMService_StopMappingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMappingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).StopMappingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_StopMappingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).StopMappingSession(ctx, req.(*StopMappingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudSLAMService_GetMappingSessionMetadataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingSessionMetadataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudSLAMServiceServer).GetMappingSessionMetadataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudSLAMService_GetMappingSessionMetadataByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudSLAMServiceServer).GetMappingSessionMetadataByID(ctx, req.(*GetMappingSessionMetadataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudSLAMService_ServiceDesc is the grpc.ServiceDesc for CloudSLAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudSLAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.cloudslam.v1.CloudSLAMService",
	HandlerType: (*CloudSLAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMappingSession",
			Handler:    _CloudSLAMService_StartMappingSession_Handler,
		},
		{
			MethodName: "GetActiveMappingSessionsForRobot",
			Handler:    _CloudSLAMService_GetActiveMappingSessionsForRobot_Handler,
		},
		{
			MethodName: "GetMappingSessionPointCloud",
			Handler:    _CloudSLAMService_GetMappingSessionPointCloud_Handler,
		},
		{
			MethodName: "ListMappingSessions",
			Handler:    _CloudSLAMService_ListMappingSessions_Handler,
		},
		{
			MethodName: "StopMappingSession",
			Handler:    _CloudSLAMService_StopMappingSession_Handler,
		},
		{
			MethodName: "GetMappingSessionMetadataByID",
			Handler:    _CloudSLAMService_GetMappingSessionMetadataByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/cloudslam/v1/cloud_slam.proto",
}
