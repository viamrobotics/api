// source: component/camera/v1/camera.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_api_httpbody_pb = require('../../../google/api/httpbody_pb.js');
goog.object.extend(proto, google_api_httpbody_pb);
goog.exportSymbol('proto.viam.component.camera.v1.DistortionParameters', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetImageRequest', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetImageResponse', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetPointCloudRequest', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetPointCloudResponse', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetPropertiesRequest', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.GetPropertiesResponse', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.IntrinsicParameters', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.Property', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.RenderFrameRequest', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.Webcam', null, global);
goog.exportSymbol('proto.viam.component.camera.v1.Webcams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetImageRequest.displayName = 'proto.viam.component.camera.v1.GetImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetImageResponse.displayName = 'proto.viam.component.camera.v1.GetImageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.RenderFrameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.RenderFrameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.RenderFrameRequest.displayName = 'proto.viam.component.camera.v1.RenderFrameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetPointCloudRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetPointCloudRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetPointCloudRequest.displayName = 'proto.viam.component.camera.v1.GetPointCloudRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetPointCloudResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetPointCloudResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetPointCloudResponse.displayName = 'proto.viam.component.camera.v1.GetPointCloudResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetPropertiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetPropertiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetPropertiesRequest.displayName = 'proto.viam.component.camera.v1.GetPropertiesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.GetPropertiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.GetPropertiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.GetPropertiesResponse.displayName = 'proto.viam.component.camera.v1.GetPropertiesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.Webcams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.camera.v1.Webcams.repeatedFields_, null);
};
goog.inherits(proto.viam.component.camera.v1.Webcams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.Webcams.displayName = 'proto.viam.component.camera.v1.Webcams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.Webcam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.camera.v1.Webcam.repeatedFields_, null);
};
goog.inherits(proto.viam.component.camera.v1.Webcam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.Webcam.displayName = 'proto.viam.component.camera.v1.Webcam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.Property.displayName = 'proto.viam.component.camera.v1.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.IntrinsicParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.component.camera.v1.IntrinsicParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.IntrinsicParameters.displayName = 'proto.viam.component.camera.v1.IntrinsicParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.component.camera.v1.DistortionParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.component.camera.v1.DistortionParameters.repeatedFields_, null);
};
goog.inherits(proto.viam.component.camera.v1.DistortionParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.component.camera.v1.DistortionParameters.displayName = 'proto.viam.component.camera.v1.DistortionParameters';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetImageRequest}
 */
proto.viam.component.camera.v1.GetImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetImageRequest;
  return proto.viam.component.camera.v1.GetImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetImageRequest}
 */
proto.viam.component.camera.v1.GetImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetImageRequest} returns this
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetImageRequest} returns this
 */
proto.viam.component.camera.v1.GetImageRequest.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mimeType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: msg.getImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetImageResponse}
 */
proto.viam.component.camera.v1.GetImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetImageResponse;
  return proto.viam.component.camera.v1.GetImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetImageResponse}
 */
proto.viam.component.camera.v1.GetImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string mime_type = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetImageResponse} returns this
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes image = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image = 2;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.component.camera.v1.GetImageResponse} returns this
 */
proto.viam.component.camera.v1.GetImageResponse.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.RenderFrameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.RenderFrameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.RenderFrameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.RenderFrameRequest}
 */
proto.viam.component.camera.v1.RenderFrameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.RenderFrameRequest;
  return proto.viam.component.camera.v1.RenderFrameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.RenderFrameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.RenderFrameRequest}
 */
proto.viam.component.camera.v1.RenderFrameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.RenderFrameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.RenderFrameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.RenderFrameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.RenderFrameRequest} returns this
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.RenderFrameRequest} returns this
 */
proto.viam.component.camera.v1.RenderFrameRequest.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetPointCloudRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetPointCloudRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPointCloudRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetPointCloudRequest}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetPointCloudRequest;
  return proto.viam.component.camera.v1.GetPointCloudRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetPointCloudRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetPointCloudRequest}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetPointCloudRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetPointCloudRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPointCloudRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetPointCloudRequest} returns this
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetPointCloudRequest} returns this
 */
proto.viam.component.camera.v1.GetPointCloudRequest.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetPointCloudResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetPointCloudResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPointCloudResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mimeType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pointCloud: msg.getPointCloud_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetPointCloudResponse}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetPointCloudResponse;
  return proto.viam.component.camera.v1.GetPointCloudResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetPointCloudResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetPointCloudResponse}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPointCloud(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetPointCloudResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetPointCloudResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPointCloudResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPointCloud_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string mime_type = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetPointCloudResponse} returns this
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes point_cloud = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.getPointCloud = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes point_cloud = 2;
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {string}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.getPointCloud_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPointCloud()));
};


/**
 * optional bytes point_cloud = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPointCloud()`
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.getPointCloud_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPointCloud()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viam.component.camera.v1.GetPointCloudResponse} returns this
 */
proto.viam.component.camera.v1.GetPointCloudResponse.prototype.setPointCloud = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetPropertiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetPropertiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetPropertiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPropertiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetPropertiesRequest}
 */
proto.viam.component.camera.v1.GetPropertiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetPropertiesRequest;
  return proto.viam.component.camera.v1.GetPropertiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetPropertiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetPropertiesRequest}
 */
proto.viam.component.camera.v1.GetPropertiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetPropertiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetPropertiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetPropertiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPropertiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.GetPropertiesRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.GetPropertiesRequest} returns this
 */
proto.viam.component.camera.v1.GetPropertiesRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.GetPropertiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.GetPropertiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPropertiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    supportsPcd: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    intrinsicParameters: (f = msg.getIntrinsicParameters()) && proto.viam.component.camera.v1.IntrinsicParameters.toObject(includeInstance, f),
    distortionParameters: (f = msg.getDistortionParameters()) && proto.viam.component.camera.v1.DistortionParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.GetPropertiesResponse;
  return proto.viam.component.camera.v1.GetPropertiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.GetPropertiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsPcd(value);
      break;
    case 2:
      var value = new proto.viam.component.camera.v1.IntrinsicParameters;
      reader.readMessage(value,proto.viam.component.camera.v1.IntrinsicParameters.deserializeBinaryFromReader);
      msg.setIntrinsicParameters(value);
      break;
    case 3:
      var value = new proto.viam.component.camera.v1.DistortionParameters;
      reader.readMessage(value,proto.viam.component.camera.v1.DistortionParameters.deserializeBinaryFromReader);
      msg.setDistortionParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.GetPropertiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.GetPropertiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.GetPropertiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupportsPcd();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIntrinsicParameters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viam.component.camera.v1.IntrinsicParameters.serializeBinaryToWriter
    );
  }
  f = message.getDistortionParameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.viam.component.camera.v1.DistortionParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool supports_pcd = 1;
 * @return {boolean}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.getSupportsPcd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse} returns this
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.setSupportsPcd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional IntrinsicParameters intrinsic_parameters = 2;
 * @return {?proto.viam.component.camera.v1.IntrinsicParameters}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.getIntrinsicParameters = function() {
  return /** @type{?proto.viam.component.camera.v1.IntrinsicParameters} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.camera.v1.IntrinsicParameters, 2));
};


/**
 * @param {?proto.viam.component.camera.v1.IntrinsicParameters|undefined} value
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse} returns this
*/
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.setIntrinsicParameters = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse} returns this
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.clearIntrinsicParameters = function() {
  return this.setIntrinsicParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.hasIntrinsicParameters = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DistortionParameters distortion_parameters = 3;
 * @return {?proto.viam.component.camera.v1.DistortionParameters}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.getDistortionParameters = function() {
  return /** @type{?proto.viam.component.camera.v1.DistortionParameters} */ (
    jspb.Message.getWrapperField(this, proto.viam.component.camera.v1.DistortionParameters, 3));
};


/**
 * @param {?proto.viam.component.camera.v1.DistortionParameters|undefined} value
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse} returns this
*/
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.setDistortionParameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.component.camera.v1.GetPropertiesResponse} returns this
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.clearDistortionParameters = function() {
  return this.setDistortionParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.component.camera.v1.GetPropertiesResponse.prototype.hasDistortionParameters = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.camera.v1.Webcams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.Webcams.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.Webcams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.Webcams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Webcams.toObject = function(includeInstance, msg) {
  var f, obj = {
    webcamsList: jspb.Message.toObjectList(msg.getWebcamsList(),
    proto.viam.component.camera.v1.Webcam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.Webcams}
 */
proto.viam.component.camera.v1.Webcams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.Webcams;
  return proto.viam.component.camera.v1.Webcams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.Webcams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.Webcams}
 */
proto.viam.component.camera.v1.Webcams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.component.camera.v1.Webcam;
      reader.readMessage(value,proto.viam.component.camera.v1.Webcam.deserializeBinaryFromReader);
      msg.addWebcams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.Webcams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.Webcams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.Webcams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Webcams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebcamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viam.component.camera.v1.Webcam.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Webcam webcams = 1;
 * @return {!Array<!proto.viam.component.camera.v1.Webcam>}
 */
proto.viam.component.camera.v1.Webcams.prototype.getWebcamsList = function() {
  return /** @type{!Array<!proto.viam.component.camera.v1.Webcam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.component.camera.v1.Webcam, 1));
};


/**
 * @param {!Array<!proto.viam.component.camera.v1.Webcam>} value
 * @return {!proto.viam.component.camera.v1.Webcams} returns this
*/
proto.viam.component.camera.v1.Webcams.prototype.setWebcamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viam.component.camera.v1.Webcam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.component.camera.v1.Webcam}
 */
proto.viam.component.camera.v1.Webcams.prototype.addWebcams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viam.component.camera.v1.Webcam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.camera.v1.Webcams} returns this
 */
proto.viam.component.camera.v1.Webcams.prototype.clearWebcamsList = function() {
  return this.setWebcamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.camera.v1.Webcam.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.Webcam.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.Webcam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.Webcam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Webcam.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.viam.component.camera.v1.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.Webcam}
 */
proto.viam.component.camera.v1.Webcam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.Webcam;
  return proto.viam.component.camera.v1.Webcam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.Webcam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.Webcam}
 */
proto.viam.component.camera.v1.Webcam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.viam.component.camera.v1.Property;
      reader.readMessage(value,proto.viam.component.camera.v1.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.Webcam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.Webcam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.Webcam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Webcam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.viam.component.camera.v1.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.Webcam.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.Webcam} returns this
 */
proto.viam.component.camera.v1.Webcam.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.viam.component.camera.v1.Webcam.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.Webcam} returns this
 */
proto.viam.component.camera.v1.Webcam.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Property properties = 3;
 * @return {!Array<!proto.viam.component.camera.v1.Property>}
 */
proto.viam.component.camera.v1.Webcam.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.viam.component.camera.v1.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.component.camera.v1.Property, 3));
};


/**
 * @param {!Array<!proto.viam.component.camera.v1.Property>} value
 * @return {!proto.viam.component.camera.v1.Webcam} returns this
*/
proto.viam.component.camera.v1.Webcam.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.viam.component.camera.v1.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.component.camera.v1.Property}
 */
proto.viam.component.camera.v1.Webcam.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.viam.component.camera.v1.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.camera.v1.Webcam} returns this
 */
proto.viam.component.camera.v1.Webcam.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    widthPx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heightPx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    frameFormat: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.Property}
 */
proto.viam.component.camera.v1.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.Property;
  return proto.viam.component.camera.v1.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.Property}
 */
proto.viam.component.camera.v1.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidthPx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeightPx(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidthPx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeightPx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFrameFormat();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 width_px = 1;
 * @return {number}
 */
proto.viam.component.camera.v1.Property.prototype.getWidthPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.Property} returns this
 */
proto.viam.component.camera.v1.Property.prototype.setWidthPx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height_px = 2;
 * @return {number}
 */
proto.viam.component.camera.v1.Property.prototype.getHeightPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.Property} returns this
 */
proto.viam.component.camera.v1.Property.prototype.setHeightPx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string frame_format = 3;
 * @return {string}
 */
proto.viam.component.camera.v1.Property.prototype.getFrameFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.Property} returns this
 */
proto.viam.component.camera.v1.Property.prototype.setFrameFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.IntrinsicParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.IntrinsicParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.IntrinsicParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    widthPx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heightPx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    focalXPx: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    focalYPx: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    centerXPx: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    centerYPx: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters}
 */
proto.viam.component.camera.v1.IntrinsicParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.IntrinsicParameters;
  return proto.viam.component.camera.v1.IntrinsicParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.IntrinsicParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters}
 */
proto.viam.component.camera.v1.IntrinsicParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidthPx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeightPx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFocalXPx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFocalYPx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterXPx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterYPx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.IntrinsicParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.IntrinsicParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.IntrinsicParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidthPx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeightPx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFocalXPx();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getFocalYPx();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCenterXPx();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCenterYPx();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional uint32 width_px = 1;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getWidthPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setWidthPx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height_px = 2;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getHeightPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setHeightPx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double focal_x_px = 3;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getFocalXPx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setFocalXPx = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double focal_y_px = 4;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getFocalYPx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setFocalYPx = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double center_x_px = 5;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getCenterXPx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setCenterXPx = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double center_y_px = 6;
 * @return {number}
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.getCenterYPx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viam.component.camera.v1.IntrinsicParameters} returns this
 */
proto.viam.component.camera.v1.IntrinsicParameters.prototype.setCenterYPx = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.component.camera.v1.DistortionParameters.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.component.camera.v1.DistortionParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.component.camera.v1.DistortionParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.DistortionParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parametersList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.component.camera.v1.DistortionParameters}
 */
proto.viam.component.camera.v1.DistortionParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.component.camera.v1.DistortionParameters;
  return proto.viam.component.camera.v1.DistortionParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.component.camera.v1.DistortionParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.component.camera.v1.DistortionParameters}
 */
proto.viam.component.camera.v1.DistortionParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParameters(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.component.camera.v1.DistortionParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.component.camera.v1.DistortionParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.component.camera.v1.DistortionParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
};


/**
 * optional string model = 1;
 * @return {string}
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.component.camera.v1.DistortionParameters} returns this
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated double parameters = 2;
 * @return {!Array<number>}
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.getParametersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.viam.component.camera.v1.DistortionParameters} returns this
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.setParametersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.viam.component.camera.v1.DistortionParameters} returns this
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.addParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.component.camera.v1.DistortionParameters} returns this
 */
proto.viam.component.camera.v1.DistortionParameters.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};


goog.object.extend(exports, proto.viam.component.camera.v1);
