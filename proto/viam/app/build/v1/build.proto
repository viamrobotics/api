syntax = "proto3";

package viam.app.build.v1;

import "google/protobuf/timestamp.proto";

option go_package = "go.viam.com/api/app/build/v1";

// Note on ID types:
// build_id: The 'parent' ID for a set of builds of module@version. Builds contain multiple jobs. This ID is globally unique.

// 2023-11-28: Unstable API. Will change.
service BuildService {
  // Asynchronously start a build of a Viam module, with one job per platform.
  rpc StartBuild(StartBuildRequest) returns (StartBuildResponse);
  // Fetch logs from a single job of a single build.
  rpc GetLogs(GetLogsRequest) returns (stream GetLogsResponse);
  // List the jobs for a module ordered by (build start time, alphabetical platform).
  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);

  // link a git repo to a module.
  rpc LinkRepo(LinkRepoRequest) returns (LinkRepoResponse);
  // delete a module-repo link.
  rpc UnlinkRepo(UnlinkRepoRequest) returns (UnlinkRepoResponse);
  // list module-repo links owned by user (directly or through orgs).
  rpc ListRepoLinks(ListRepoLinksRequest) returns (ListRepoLinksResponse);

  // list external oauth apps owned by user (directly or through orgs).
  rpc ListAppLinks(ListAppLinksRequest) returns (ListAppLinksResponse);
  // delete a viam-app link.
  rpc RemoveAppLink(RemoveAppLinkRequest) returns (RemoveAppLinkResponse);
  // add an org to an oauth app link.
  rpc LinkOrg(LinkOrgRequest) returns (LinkOrgResponse);
  // remove an org from an oauth app link.
  rpc UnlinkOrg(UnlinkOrgRequest) returns (UnlinkOrgResponse);
}

message StartBuildRequest {
  // repo to build
  string repo = 1;
  // optional git ref; defaults to 'main'
  optional string ref = 2;
  // list of platforms to build
  repeated string platforms = 3;
  // module_id as prefix:name pair
  string module_id = 4;
  // version of the module to publish
  // must be valid semver2.0 string (ex: 1.2.3-rc0)
  string module_version = 5;
  // checkout token. provide this for private repos
  optional string token = 6;
  // optional working directory. defaults to repo root.
  optional string workdir = 7;
}

message StartBuildResponse {
  string build_id = 1;
}

message GetLogsRequest {
  string build_id = 1;
  string platform = 2;
}

// GetLogsResponse is a streaming endpoint that may have multiple messages that belong
// to the same build_step if there are too many bytes to fit into a single gRPC
// response.
message GetLogsResponse {
  string build_step = 1;
  // includes multiple lines delimited by \n\r
  string data = 2;
}

enum JobStatus {
  JOB_STATUS_UNSPECIFIED = 0;
  // IN_PROGRESS = pending or executing on cloud infra. Artifact has not been uploaded.
  JOB_STATUS_IN_PROGRESS = 1;
  JOB_STATUS_FAILED = 2;
  JOB_STATUS_DONE = 3;
}

message JobInfo {
  string build_id = 1;
  string platform = 2;
  string version = 3;
  JobStatus status = 4;
  google.protobuf.Timestamp start_time = 5;
  optional google.protobuf.Timestamp end_time = 6;
}

message ListJobsRequest {
  // module_id as prefix:name pair
  string module_id = 1;
  // don't return more than max_jobs_length jobs
  // if not present, return all jobs.
  optional int32 max_jobs_length = 2;
  // only return jobs that match this build id
  // if not present, return all jobs.
  optional string build_id = 3;
}

message ListJobsResponse {
  // jobs is ordered by (build start time, alphabetical platform).
  repeated JobInfo jobs = 1;
}

message RepoLink {
  // viam internal ID which maps to an external oauth app
  string oauth_app_link_id = 1;
  // OrgID of the module
  string org_id = 2;
  // Public namespace of the module. This is for user display in ListRepoLinksResponse.
  // It is ignored in LinkRepoRequest.
  optional string namespace = 3;
  // name of the module (just the name, not the dotted org:name form)
  string module_name = 4;
  // git repo in owner/repository form
  string repo = 5;
  // email of the viam user who created this
  string viam_user = 6;
}

message LinkRepoRequest {
  RepoLink link = 1;
}

message LinkRepoResponse {
  string repo_link_id = 1;
}

message UnlinkRepoRequest {
  string repo_link_id = 1;
}

message UnlinkRepoResponse {}

message ListRepoLinksRequest {}

message ListRepoLinksResponse {
  repeated RepoLink links = 1;
}

message ListAppLinksRequest {}

// represents a link between viam users / orgs and an external oauth app
message AppLink {
  // viam internal ID which maps to an external oauth app
  string oauth_app_link_id = 1;
  // email of the viam user that owns this
  string viam_user = 2;
  // username of the external user who created this
  string external_user = 3;
  // list of org public namespace (where available) or org UUIDs attached to the external app
  repeated string org_id_or_ns = 4;
}

message ListAppLinksResponse {
  repeated AppLink links = 1;
}

message RemoveAppLinkRequest {
  // viam internal ID which maps to an external oauth app
  string oauth_app_link_id = 1;
}

message RemoveAppLinkResponse {}

message LinkOrgRequest {
  // viam internal ID which maps to an external oauth app
  string oauth_app_link_id = 1;
  string org_id = 2;
}

message LinkOrgResponse {}

message UnlinkOrgRequest {
  // viam internal ID which maps to an external oauth app
  string oauth_app_link_id = 1;
  string org_id = 2;
}

message UnlinkOrgResponse {}
