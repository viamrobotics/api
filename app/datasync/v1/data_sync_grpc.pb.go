// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: app/datasync/v1/data_sync.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataSyncService_DataCaptureUpload_FullMethodName          = "/viam.app.datasync.v1.DataSyncService/DataCaptureUpload"
	DataSyncService_FileUpload_FullMethodName                 = "/viam.app.datasync.v1.DataSyncService/FileUpload"
	DataSyncService_StreamingDataCaptureUpload_FullMethodName = "/viam.app.datasync.v1.DataSyncService/StreamingDataCaptureUpload"
)

// DataSyncServiceClient is the client API for DataSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSyncServiceClient interface {
	// DataCaptureUpload uploads the contents and metadata for tabular data.
	DataCaptureUpload(ctx context.Context, in *DataCaptureUploadRequest, opts ...grpc.CallOption) (*DataCaptureUploadResponse, error)
	// FileUpload uploads the contents and metadata for binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error)
	// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	StreamingDataCaptureUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse], error)
}

type dataSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSyncServiceClient(cc grpc.ClientConnInterface) DataSyncServiceClient {
	return &dataSyncServiceClient{cc}
}

func (c *dataSyncServiceClient) DataCaptureUpload(ctx context.Context, in *DataCaptureUploadRequest, opts ...grpc.CallOption) (*DataCaptureUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataCaptureUploadResponse)
	err := c.cc.Invoke(ctx, DataSyncService_DataCaptureUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataSyncService_ServiceDesc.Streams[0], DataSyncService_FileUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileUploadRequest, FileUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataSyncService_FileUploadClient = grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse]

func (c *dataSyncServiceClient) StreamingDataCaptureUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataSyncService_ServiceDesc.Streams[1], DataSyncService_StreamingDataCaptureUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataSyncService_StreamingDataCaptureUploadClient = grpc.ClientStreamingClient[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]

// DataSyncServiceServer is the server API for DataSyncService service.
// All implementations must embed UnimplementedDataSyncServiceServer
// for forward compatibility.
type DataSyncServiceServer interface {
	// DataCaptureUpload uploads the contents and metadata for tabular data.
	DataCaptureUpload(context.Context, *DataCaptureUploadRequest) (*DataCaptureUploadResponse, error)
	// FileUpload uploads the contents and metadata for binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	FileUpload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error
	// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	StreamingDataCaptureUpload(grpc.ClientStreamingServer[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]) error
	mustEmbedUnimplementedDataSyncServiceServer()
}

// UnimplementedDataSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataSyncServiceServer struct{}

func (UnimplementedDataSyncServiceServer) DataCaptureUpload(context.Context, *DataCaptureUploadRequest) (*DataCaptureUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCaptureUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) FileUpload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) StreamingDataCaptureUpload(grpc.ClientStreamingServer[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDataCaptureUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) mustEmbedUnimplementedDataSyncServiceServer() {}
func (UnimplementedDataSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSyncServiceServer will
// result in compilation errors.
type UnsafeDataSyncServiceServer interface {
	mustEmbedUnimplementedDataSyncServiceServer()
}

func RegisterDataSyncServiceServer(s grpc.ServiceRegistrar, srv DataSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataSyncService_ServiceDesc, srv)
}

func _DataSyncService_DataCaptureUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCaptureUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).DataCaptureUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_DataCaptureUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).DataCaptureUpload(ctx, req.(*DataCaptureUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataSyncServiceServer).FileUpload(&grpc.GenericServerStream[FileUploadRequest, FileUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataSyncService_FileUploadServer = grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]

func _DataSyncService_StreamingDataCaptureUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataSyncServiceServer).StreamingDataCaptureUpload(&grpc.GenericServerStream[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataSyncService_StreamingDataCaptureUploadServer = grpc.ClientStreamingServer[StreamingDataCaptureUploadRequest, StreamingDataCaptureUploadResponse]

// DataSyncService_ServiceDesc is the grpc.ServiceDesc for DataSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.datasync.v1.DataSyncService",
	HandlerType: (*DataSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataCaptureUpload",
			Handler:    _DataSyncService_DataCaptureUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _DataSyncService_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingDataCaptureUpload",
			Handler:       _DataSyncService_StreamingDataCaptureUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "app/datasync/v1/data_sync.proto",
}
