// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: component/audioin/v1/audioin.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioInServiceClient is the client API for AudioInService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioInServiceClient interface {
	// GetAudio streams audio from the given audioin
	GetAudio(ctx context.Context, in *GetAudioRequest, opts ...grpc.CallOption) (AudioInService_GetAudioClient, error)
	// GetProperties returns the properties of the audioin
	GetProperties(ctx context.Context, in *v1.GetPropertiesRequest, opts ...grpc.CallOption) (*v1.GetPropertiesResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error)
}

type audioInServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioInServiceClient(cc grpc.ClientConnInterface) AudioInServiceClient {
	return &audioInServiceClient{cc}
}

func (c *audioInServiceClient) GetAudio(ctx context.Context, in *GetAudioRequest, opts ...grpc.CallOption) (AudioInService_GetAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioInService_ServiceDesc.Streams[0], "/viam.component.audioin.v1.AudioInService/GetAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioInServiceGetAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioInService_GetAudioClient interface {
	Recv() (*GetAudioResponse, error)
	grpc.ClientStream
}

type audioInServiceGetAudioClient struct {
	grpc.ClientStream
}

func (x *audioInServiceGetAudioClient) Recv() (*GetAudioResponse, error) {
	m := new(GetAudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioInServiceClient) GetProperties(ctx context.Context, in *v1.GetPropertiesRequest, opts ...grpc.CallOption) (*v1.GetPropertiesResponse, error) {
	out := new(v1.GetPropertiesResponse)
	err := c.cc.Invoke(ctx, "/viam.component.audioin.v1.AudioInService/GetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioInServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.component.audioin.v1.AudioInService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioInServiceClient) GetGeometries(ctx context.Context, in *v1.GetGeometriesRequest, opts ...grpc.CallOption) (*v1.GetGeometriesResponse, error) {
	out := new(v1.GetGeometriesResponse)
	err := c.cc.Invoke(ctx, "/viam.component.audioin.v1.AudioInService/GetGeometries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioInServiceServer is the server API for AudioInService service.
// All implementations must embed UnimplementedAudioInServiceServer
// for forward compatibility
type AudioInServiceServer interface {
	// GetAudio streams audio from the given audioin
	GetAudio(*GetAudioRequest, AudioInService_GetAudioServer) error
	// GetProperties returns the properties of the audioin
	GetProperties(context.Context, *v1.GetPropertiesRequest) (*v1.GetPropertiesResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	// GetGeometries returns the geometries of the component in their current configuration
	GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error)
	mustEmbedUnimplementedAudioInServiceServer()
}

// UnimplementedAudioInServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioInServiceServer struct {
}

func (UnimplementedAudioInServiceServer) GetAudio(*GetAudioRequest, AudioInService_GetAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAudio not implemented")
}
func (UnimplementedAudioInServiceServer) GetProperties(context.Context, *v1.GetPropertiesRequest) (*v1.GetPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedAudioInServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedAudioInServiceServer) GetGeometries(context.Context, *v1.GetGeometriesRequest) (*v1.GetGeometriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeometries not implemented")
}
func (UnimplementedAudioInServiceServer) mustEmbedUnimplementedAudioInServiceServer() {}

// UnsafeAudioInServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioInServiceServer will
// result in compilation errors.
type UnsafeAudioInServiceServer interface {
	mustEmbedUnimplementedAudioInServiceServer()
}

func RegisterAudioInServiceServer(s grpc.ServiceRegistrar, srv AudioInServiceServer) {
	s.RegisterService(&AudioInService_ServiceDesc, srv)
}

func _AudioInService_GetAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAudioRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioInServiceServer).GetAudio(m, &audioInServiceGetAudioServer{stream})
}

type AudioInService_GetAudioServer interface {
	Send(*GetAudioResponse) error
	grpc.ServerStream
}

type audioInServiceGetAudioServer struct {
	grpc.ServerStream
}

func (x *audioInServiceGetAudioServer) Send(m *GetAudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AudioInService_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInServiceServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.audioin.v1.AudioInService/GetProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInServiceServer).GetProperties(ctx, req.(*v1.GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioInService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.audioin.v1.AudioInService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioInService_GetGeometries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetGeometriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioInServiceServer).GetGeometries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.audioin.v1.AudioInService/GetGeometries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioInServiceServer).GetGeometries(ctx, req.(*v1.GetGeometriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioInService_ServiceDesc is the grpc.ServiceDesc for AudioInService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioInService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.component.audioin.v1.AudioInService",
	HandlerType: (*AudioInServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProperties",
			Handler:    _AudioInService_GetProperties_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _AudioInService_DoCommand_Handler,
		},
		{
			MethodName: "GetGeometries",
			Handler:    _AudioInService_GetGeometries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAudio",
			Handler:       _AudioInService_GetAudio_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "component/audioin/v1/audioin.proto",
}
