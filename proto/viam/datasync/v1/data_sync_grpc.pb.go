// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/viam/datasync/v1/data_sync.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSyncServiceClient is the client API for DataSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSyncServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_UploadClient, error)
}

type dataSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSyncServiceClient(cc grpc.ClientConnInterface) DataSyncServiceClient {
	return &dataSyncServiceClient{cc}
}

func (c *dataSyncServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataSyncService_ServiceDesc.Streams[0], "/proto.viam.datasync.v1.DataSyncService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSyncServiceUploadClient{stream}
	return x, nil
}

type DataSyncService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type dataSyncServiceUploadClient struct {
	grpc.ClientStream
}

func (x *dataSyncServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataSyncServiceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataSyncServiceServer is the server API for DataSyncService service.
// All implementations must embed UnimplementedDataSyncServiceServer
// for forward compatibility
type DataSyncServiceServer interface {
	Upload(DataSyncService_UploadServer) error
	mustEmbedUnimplementedDataSyncServiceServer()
}

// UnimplementedDataSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataSyncServiceServer struct {
}

func (UnimplementedDataSyncServiceServer) Upload(DataSyncService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDataSyncServiceServer) mustEmbedUnimplementedDataSyncServiceServer() {}

// UnsafeDataSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSyncServiceServer will
// result in compilation errors.
type UnsafeDataSyncServiceServer interface {
	mustEmbedUnimplementedDataSyncServiceServer()
}

func RegisterDataSyncServiceServer(s grpc.ServiceRegistrar, srv DataSyncServiceServer) {
	s.RegisterService(&DataSyncService_ServiceDesc, srv)
}

func _DataSyncService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataSyncServiceServer).Upload(&dataSyncServiceUploadServer{stream})
}

type DataSyncService_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type dataSyncServiceUploadServer struct {
	grpc.ServerStream
}

func (x *dataSyncServiceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataSyncServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataSyncService_ServiceDesc is the grpc.ServiceDesc for DataSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.viam.datasync.v1.DataSyncService",
	HandlerType: (*DataSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _DataSyncService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/viam/datasync/v1/data_sync.proto",
}
