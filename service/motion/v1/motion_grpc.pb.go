// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: service/motion/v1/motion.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MotionService_Move_FullMethodName             = "/viam.service.motion.v1.MotionService/Move"
	MotionService_MoveOnMap_FullMethodName        = "/viam.service.motion.v1.MotionService/MoveOnMap"
	MotionService_MoveOnGlobe_FullMethodName      = "/viam.service.motion.v1.MotionService/MoveOnGlobe"
	MotionService_GetPose_FullMethodName          = "/viam.service.motion.v1.MotionService/GetPose"
	MotionService_StopPlan_FullMethodName         = "/viam.service.motion.v1.MotionService/StopPlan"
	MotionService_ListPlanStatuses_FullMethodName = "/viam.service.motion.v1.MotionService/ListPlanStatuses"
	MotionService_GetPlan_FullMethodName          = "/viam.service.motion.v1.MotionService/GetPlan"
	MotionService_DoCommand_FullMethodName        = "/viam.service.motion.v1.MotionService/DoCommand"
)

// MotionServiceClient is the client API for MotionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A MotionService declares the gRPC contract for a motion service
type MotionServiceClient interface {
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	// Generate a plan and move a component to a specific pose
	// with respect to the SLAM map's origin.
	// May replan to avoid obstacles
	MoveOnMap(ctx context.Context, in *MoveOnMapRequest, opts ...grpc.CallOption) (*MoveOnMapResponse, error)
	// Generate and begin executing an execution to move a component
	// to a specific GPS coordinate.
	// May replan to avoid obstacles & account for location drift.
	// Creates a new plan upon replanning.
	MoveOnGlobe(ctx context.Context, in *MoveOnGlobeRequest, opts ...grpc.CallOption) (*MoveOnGlobeResponse, error)
	GetPose(ctx context.Context, in *GetPoseRequest, opts ...grpc.CallOption) (*GetPoseResponse, error)
	// Stops a Plan
	StopPlan(ctx context.Context, in *StopPlanRequest, opts ...grpc.CallOption) (*StopPlanResponse, error)
	// Returns the status of plans created by requests to move components
	// that are executing OR are part of an execution which changed it state
	// within the a 24HR TTL OR until the robot reinitializes.
	// This currently only returns plans for MoveOnGlobe and MoveOnMap.
	ListPlanStatuses(ctx context.Context, in *ListPlanStatusesRequest, opts ...grpc.CallOption) (*ListPlanStatusesResponse, error)
	// Returns the plan(s) & state history of the most recent execution to move a
	// component. Returns a result if the last execution is still executing OR
	// changed state within the last 24 hours AND the robot has not reinitialized.
	// Plans are never mutated.
	// Replans always create new plans.
	// Replans share the execution_id of the previously executing plan.
	// This currently only returns plans for MoveOnGlobe and MoveOnMap.
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type motionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotionServiceClient(cc grpc.ClientConnInterface) MotionServiceClient {
	return &motionServiceClient{cc}
}

func (c *motionServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, MotionService_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) MoveOnMap(ctx context.Context, in *MoveOnMapRequest, opts ...grpc.CallOption) (*MoveOnMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveOnMapResponse)
	err := c.cc.Invoke(ctx, MotionService_MoveOnMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) MoveOnGlobe(ctx context.Context, in *MoveOnGlobeRequest, opts ...grpc.CallOption) (*MoveOnGlobeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveOnGlobeResponse)
	err := c.cc.Invoke(ctx, MotionService_MoveOnGlobe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) GetPose(ctx context.Context, in *GetPoseRequest, opts ...grpc.CallOption) (*GetPoseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoseResponse)
	err := c.cc.Invoke(ctx, MotionService_GetPose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) StopPlan(ctx context.Context, in *StopPlanRequest, opts ...grpc.CallOption) (*StopPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopPlanResponse)
	err := c.cc.Invoke(ctx, MotionService_StopPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) ListPlanStatuses(ctx context.Context, in *ListPlanStatusesRequest, opts ...grpc.CallOption) (*ListPlanStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlanStatusesResponse)
	err := c.cc.Invoke(ctx, MotionService_ListPlanStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlanResponse)
	err := c.cc.Invoke(ctx, MotionService_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, MotionService_DoCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotionServiceServer is the server API for MotionService service.
// All implementations must embed UnimplementedMotionServiceServer
// for forward compatibility.
//
// A MotionService declares the gRPC contract for a motion service
type MotionServiceServer interface {
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	// Generate a plan and move a component to a specific pose
	// with respect to the SLAM map's origin.
	// May replan to avoid obstacles
	MoveOnMap(context.Context, *MoveOnMapRequest) (*MoveOnMapResponse, error)
	// Generate and begin executing an execution to move a component
	// to a specific GPS coordinate.
	// May replan to avoid obstacles & account for location drift.
	// Creates a new plan upon replanning.
	MoveOnGlobe(context.Context, *MoveOnGlobeRequest) (*MoveOnGlobeResponse, error)
	GetPose(context.Context, *GetPoseRequest) (*GetPoseResponse, error)
	// Stops a Plan
	StopPlan(context.Context, *StopPlanRequest) (*StopPlanResponse, error)
	// Returns the status of plans created by requests to move components
	// that are executing OR are part of an execution which changed it state
	// within the a 24HR TTL OR until the robot reinitializes.
	// This currently only returns plans for MoveOnGlobe and MoveOnMap.
	ListPlanStatuses(context.Context, *ListPlanStatusesRequest) (*ListPlanStatusesResponse, error)
	// Returns the plan(s) & state history of the most recent execution to move a
	// component. Returns a result if the last execution is still executing OR
	// changed state within the last 24 hours AND the robot has not reinitialized.
	// Plans are never mutated.
	// Replans always create new plans.
	// Replans share the execution_id of the previously executing plan.
	// This currently only returns plans for MoveOnGlobe and MoveOnMap.
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedMotionServiceServer()
}

// UnimplementedMotionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMotionServiceServer struct{}

func (UnimplementedMotionServiceServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedMotionServiceServer) MoveOnMap(context.Context, *MoveOnMapRequest) (*MoveOnMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveOnMap not implemented")
}
func (UnimplementedMotionServiceServer) MoveOnGlobe(context.Context, *MoveOnGlobeRequest) (*MoveOnGlobeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveOnGlobe not implemented")
}
func (UnimplementedMotionServiceServer) GetPose(context.Context, *GetPoseRequest) (*GetPoseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPose not implemented")
}
func (UnimplementedMotionServiceServer) StopPlan(context.Context, *StopPlanRequest) (*StopPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlan not implemented")
}
func (UnimplementedMotionServiceServer) ListPlanStatuses(context.Context, *ListPlanStatusesRequest) (*ListPlanStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanStatuses not implemented")
}
func (UnimplementedMotionServiceServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedMotionServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedMotionServiceServer) mustEmbedUnimplementedMotionServiceServer() {}
func (UnimplementedMotionServiceServer) testEmbeddedByValue()                       {}

// UnsafeMotionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotionServiceServer will
// result in compilation errors.
type UnsafeMotionServiceServer interface {
	mustEmbedUnimplementedMotionServiceServer()
}

func RegisterMotionServiceServer(s grpc.ServiceRegistrar, srv MotionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMotionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MotionService_ServiceDesc, srv)
}

func _MotionService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_MoveOnMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveOnMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).MoveOnMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_MoveOnMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).MoveOnMap(ctx, req.(*MoveOnMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_MoveOnGlobe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveOnGlobeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).MoveOnGlobe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_MoveOnGlobe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).MoveOnGlobe(ctx, req.(*MoveOnGlobeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_GetPose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).GetPose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_GetPose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).GetPose(ctx, req.(*GetPoseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_StopPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).StopPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_StopPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).StopPlan(ctx, req.(*StopPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_ListPlanStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).ListPlanStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_ListPlanStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).ListPlanStatuses(ctx, req.(*ListPlanStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotionService_DoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotionService_ServiceDesc is the grpc.ServiceDesc for MotionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.motion.v1.MotionService",
	HandlerType: (*MotionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _MotionService_Move_Handler,
		},
		{
			MethodName: "MoveOnMap",
			Handler:    _MotionService_MoveOnMap_Handler,
		},
		{
			MethodName: "MoveOnGlobe",
			Handler:    _MotionService_MoveOnGlobe_Handler,
		},
		{
			MethodName: "GetPose",
			Handler:    _MotionService_GetPose_Handler,
		},
		{
			MethodName: "StopPlan",
			Handler:    _MotionService_StopPlan_Handler,
		},
		{
			MethodName: "ListPlanStatuses",
			Handler:    _MotionService_ListPlanStatuses_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _MotionService_GetPlan_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _MotionService_DoCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/motion/v1/motion.proto",
}
