// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: app/cloudslam/v1/cloud_slam.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EndStatus int32

const (
	EndStatus_END_STATUS_UNSPECIFIED EndStatus = 0
	EndStatus_END_STATUS_SUCCESS     EndStatus = 1
	EndStatus_END_STATUS_TIMEOUT     EndStatus = 2
	EndStatus_END_STATUS_FAIL        EndStatus = 3
)

// Enum value maps for EndStatus.
var (
	EndStatus_name = map[int32]string{
		0: "END_STATUS_UNSPECIFIED",
		1: "END_STATUS_SUCCESS",
		2: "END_STATUS_TIMEOUT",
		3: "END_STATUS_FAIL",
	}
	EndStatus_value = map[string]int32{
		"END_STATUS_UNSPECIFIED": 0,
		"END_STATUS_SUCCESS":     1,
		"END_STATUS_TIMEOUT":     2,
		"END_STATUS_FAIL":        3,
	}
)

func (x EndStatus) Enum() *EndStatus {
	p := new(EndStatus)
	*p = x
	return p
}

func (x EndStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_app_cloudslam_v1_cloud_slam_proto_enumTypes[0].Descriptor()
}

func (EndStatus) Type() protoreflect.EnumType {
	return &file_app_cloudslam_v1_cloud_slam_proto_enumTypes[0]
}

func (x EndStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndStatus.Descriptor instead.
func (EndStatus) EnumDescriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{0}
}

type StartMappingSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version to use for slam, defaults stable
	SlamVersion string `protobuf:"bytes,1,opt,name=slam_version,json=slamVersion,proto3" json:"slam_version,omitempty"`
	// Version to use for viam, defaults stable
	ViamServerVersion  string           `protobuf:"bytes,2,opt,name=viam_server_version,json=viamServerVersion,proto3" json:"viam_server_version,omitempty"`
	MapName            string           `protobuf:"bytes,3,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	OrganizationId     string           `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId         string           `protobuf:"bytes,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	RobotId            string           `protobuf:"bytes,6,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	CaptureInterval    *CaptureInterval `protobuf:"bytes,7,opt,name=capture_interval,json=captureInterval,proto3" json:"capture_interval,omitempty"`
	Sensors            []*SensorInfo    `protobuf:"bytes,8,rep,name=sensors,proto3" json:"sensors,omitempty"`
	SlamConfig         *structpb.Struct `protobuf:"bytes,10,opt,name=slam_config,json=slamConfig,proto3" json:"slam_config,omitempty"`
	ExistingMapVersion string           `protobuf:"bytes,11,opt,name=existing_map_version,json=existingMapVersion,proto3" json:"existing_map_version,omitempty"`
	Module             *Module          `protobuf:"bytes,12,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *StartMappingSessionRequest) Reset() {
	*x = StartMappingSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMappingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMappingSessionRequest) ProtoMessage() {}

func (x *StartMappingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMappingSessionRequest.ProtoReflect.Descriptor instead.
func (*StartMappingSessionRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{0}
}

func (x *StartMappingSessionRequest) GetSlamVersion() string {
	if x != nil {
		return x.SlamVersion
	}
	return ""
}

func (x *StartMappingSessionRequest) GetViamServerVersion() string {
	if x != nil {
		return x.ViamServerVersion
	}
	return ""
}

func (x *StartMappingSessionRequest) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *StartMappingSessionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *StartMappingSessionRequest) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *StartMappingSessionRequest) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *StartMappingSessionRequest) GetCaptureInterval() *CaptureInterval {
	if x != nil {
		return x.CaptureInterval
	}
	return nil
}

func (x *StartMappingSessionRequest) GetSensors() []*SensorInfo {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *StartMappingSessionRequest) GetSlamConfig() *structpb.Struct {
	if x != nil {
		return x.SlamConfig
	}
	return nil
}

func (x *StartMappingSessionRequest) GetExistingMapVersion() string {
	if x != nil {
		return x.ExistingMapVersion
	}
	return ""
}

func (x *StartMappingSessionRequest) GetModule() *Module {
	if x != nil {
		return x.Module
	}
	return nil
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ModuleId string `protobuf:"bytes,3,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	Version  string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{1}
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *Module) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SensorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceComponentName string `protobuf:"bytes,1,opt,name=source_component_name,json=sourceComponentName,proto3" json:"source_component_name,omitempty"`
	// type is the RDK component type
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DataFrequencyHz string `protobuf:"bytes,3,opt,name=data_frequency_hz,json=dataFrequencyHz,proto3" json:"data_frequency_hz,omitempty"`
}

func (x *SensorInfo) Reset() {
	*x = SensorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfo) ProtoMessage() {}

func (x *SensorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorInfo.ProtoReflect.Descriptor instead.
func (*SensorInfo) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{2}
}

func (x *SensorInfo) GetSourceComponentName() string {
	if x != nil {
		return x.SourceComponentName
	}
	return ""
}

func (x *SensorInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SensorInfo) GetDataFrequencyHz() string {
	if x != nil {
		return x.DataFrequencyHz
	}
	return ""
}

type CaptureInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// if no end_time specified cloud slam will be run using live sensors
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CaptureInterval) Reset() {
	*x = CaptureInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInterval) ProtoMessage() {}

func (x *CaptureInterval) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInterval.ProtoReflect.Descriptor instead.
func (*CaptureInterval) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{3}
}

func (x *CaptureInterval) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CaptureInterval) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type StartMappingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *StartMappingSessionResponse) Reset() {
	*x = StartMappingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMappingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMappingSessionResponse) ProtoMessage() {}

func (x *StartMappingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMappingSessionResponse.ProtoReflect.Descriptor instead.
func (*StartMappingSessionResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{4}
}

func (x *StartMappingSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetActiveMappingSessionsForRobotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assumes only one active mapping session on a robot
	RobotId string `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
}

func (x *GetActiveMappingSessionsForRobotRequest) Reset() {
	*x = GetActiveMappingSessionsForRobotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveMappingSessionsForRobotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveMappingSessionsForRobotRequest) ProtoMessage() {}

func (x *GetActiveMappingSessionsForRobotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveMappingSessionsForRobotRequest.ProtoReflect.Descriptor instead.
func (*GetActiveMappingSessionsForRobotRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{5}
}

func (x *GetActiveMappingSessionsForRobotRequest) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

type GetActiveMappingSessionsForRobotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetActiveMappingSessionsForRobotResponse) Reset() {
	*x = GetActiveMappingSessionsForRobotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveMappingSessionsForRobotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveMappingSessionsForRobotResponse) ProtoMessage() {}

func (x *GetActiveMappingSessionsForRobotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveMappingSessionsForRobotResponse.ProtoReflect.Descriptor instead.
func (*GetActiveMappingSessionsForRobotResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{6}
}

func (x *GetActiveMappingSessionsForRobotResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetMappingSessionPointCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetMappingSessionPointCloudRequest) Reset() {
	*x = GetMappingSessionPointCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionPointCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionPointCloudRequest) ProtoMessage() {}

func (x *GetMappingSessionPointCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionPointCloudRequest.ProtoReflect.Descriptor instead.
func (*GetMappingSessionPointCloudRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{7}
}

func (x *GetMappingSessionPointCloudRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetMappingSessionPointCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url to the pointcloud map
	MapUrl string `protobuf:"bytes,1,opt,name=map_url,json=mapUrl,proto3" json:"map_url,omitempty"`
	// Current position within the SLAM Map
	Pose *v1.Pose `protobuf:"bytes,2,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *GetMappingSessionPointCloudResponse) Reset() {
	*x = GetMappingSessionPointCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionPointCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionPointCloudResponse) ProtoMessage() {}

func (x *GetMappingSessionPointCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionPointCloudResponse.ProtoReflect.Descriptor instead.
func (*GetMappingSessionPointCloudResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{8}
}

func (x *GetMappingSessionPointCloudResponse) GetMapUrl() string {
	if x != nil {
		return x.MapUrl
	}
	return ""
}

func (x *GetMappingSessionPointCloudResponse) GetPose() *v1.Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

type ListMappingSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId     string `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
}

func (x *ListMappingSessionsRequest) Reset() {
	*x = ListMappingSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMappingSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingSessionsRequest) ProtoMessage() {}

func (x *ListMappingSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListMappingSessionsRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{9}
}

func (x *ListMappingSessionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListMappingSessionsRequest) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

type ListMappingSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session []*MappingMetadata `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty"`
}

func (x *ListMappingSessionsResponse) Reset() {
	*x = ListMappingSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMappingSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingSessionsResponse) ProtoMessage() {}

func (x *ListMappingSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListMappingSessionsResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{10}
}

func (x *ListMappingSessionsResponse) GetSession() []*MappingMetadata {
	if x != nil {
		return x.Session
	}
	return nil
}

type StopMappingSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *StopMappingSessionRequest) Reset() {
	*x = StopMappingSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMappingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMappingSessionRequest) ProtoMessage() {}

func (x *StopMappingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMappingSessionRequest.ProtoReflect.Descriptor instead.
func (*StopMappingSessionRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{11}
}

func (x *StopMappingSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type StopMappingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *StopMappingSessionResponse) Reset() {
	*x = StopMappingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMappingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMappingSessionResponse) ProtoMessage() {}

func (x *StopMappingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMappingSessionResponse.ProtoReflect.Descriptor instead.
func (*StopMappingSessionResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{12}
}

func (x *StopMappingSessionResponse) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *StopMappingSessionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetMappingSessionMetadataByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetMappingSessionMetadataByIDRequest) Reset() {
	*x = GetMappingSessionMetadataByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionMetadataByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionMetadataByIDRequest) ProtoMessage() {}

func (x *GetMappingSessionMetadataByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionMetadataByIDRequest.ProtoReflect.Descriptor instead.
func (*GetMappingSessionMetadataByIDRequest) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{13}
}

func (x *GetMappingSessionMetadataByIDRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetMappingSessionMetadataByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionMetadata *MappingMetadata `protobuf:"bytes,1,opt,name=session_metadata,json=sessionMetadata,proto3" json:"session_metadata,omitempty"`
}

func (x *GetMappingSessionMetadataByIDResponse) Reset() {
	*x = GetMappingSessionMetadataByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingSessionMetadataByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingSessionMetadataByIDResponse) ProtoMessage() {}

func (x *GetMappingSessionMetadataByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingSessionMetadataByIDResponse.ProtoReflect.Descriptor instead.
func (*GetMappingSessionMetadataByIDResponse) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{14}
}

func (x *GetMappingSessionMetadataByIDResponse) GetSessionMetadata() *MappingMetadata {
	if x != nil {
		return x.SessionMetadata
	}
	return nil
}

type MappingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                  string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                                          // org associated with the slam session
	LocationId             string                 `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`                                           // location associated with the slam session
	RobotId                string                 `protobuf:"bytes,3,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`                                                    // robot associated with slam session
	TimeStartSubmitted     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_start_submitted,json=timeStartSubmitted,proto3" json:"time_start_submitted,omitempty"`                 // time this document was created
	TimeCloudRunJobStarted *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time_cloud_run_job_started,json=timeCloudRunJobStarted,proto3" json:"time_cloud_run_job_started,omitempty"` // time the cloud run job started
	TimeEndSubmitted       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time_end_submitted,json=timeEndSubmitted,proto3" json:"time_end_submitted,omitempty"`                       // time StopSlamSession was called
	TimeCloudRunJobEnded   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=time_cloud_run_job_ended,json=timeCloudRunJobEnded,proto3" json:"time_cloud_run_job_ended,omitempty"`       // time the cloud run job ended
	EndStatus              EndStatus              `protobuf:"varint,8,opt,name=end_status,json=endStatus,proto3,enum=viam.app.cloudslam.v1.EndStatus" json:"end_status,omitempty"`        // enums that represent “success”, “failed”, etc
	CloudRunJobId          string                 `protobuf:"bytes,9,opt,name=cloud_run_job_id,json=cloudRunJobId,proto3" json:"cloud_run_job_id,omitempty"`                              // initially unset
	ViamServerVersion      string                 `protobuf:"bytes,10,opt,name=viam_server_version,json=viamServerVersion,proto3" json:"viam_server_version,omitempty"`                   // version tag from request, defaults to stable
	MapName                string                 `protobuf:"bytes,11,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`                                                   // name of the map package
	SlamVersion            string                 `protobuf:"bytes,12,opt,name=slam_version,json=slamVersion,proto3" json:"slam_version,omitempty"`                                       // version tag from request, defaults to stable
	Config                 string                 `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`                                                                    // a robot config for a slam session
	ErrorMsg               string                 `protobuf:"bytes,14,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`                                                // additional details on the end status if needed, such as errors
}

func (x *MappingMetadata) Reset() {
	*x = MappingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingMetadata) ProtoMessage() {}

func (x *MappingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_cloudslam_v1_cloud_slam_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingMetadata.ProtoReflect.Descriptor instead.
func (*MappingMetadata) Descriptor() ([]byte, []int) {
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP(), []int{15}
}

func (x *MappingMetadata) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MappingMetadata) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *MappingMetadata) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *MappingMetadata) GetTimeStartSubmitted() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStartSubmitted
	}
	return nil
}

func (x *MappingMetadata) GetTimeCloudRunJobStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCloudRunJobStarted
	}
	return nil
}

func (x *MappingMetadata) GetTimeEndSubmitted() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEndSubmitted
	}
	return nil
}

func (x *MappingMetadata) GetTimeCloudRunJobEnded() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCloudRunJobEnded
	}
	return nil
}

func (x *MappingMetadata) GetEndStatus() EndStatus {
	if x != nil {
		return x.EndStatus
	}
	return EndStatus_END_STATUS_UNSPECIFIED
}

func (x *MappingMetadata) GetCloudRunJobId() string {
	if x != nil {
		return x.CloudRunJobId
	}
	return ""
}

func (x *MappingMetadata) GetViamServerVersion() string {
	if x != nil {
		return x.ViamServerVersion
	}
	return ""
}

func (x *MappingMetadata) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *MappingMetadata) GetSlamVersion() string {
	if x != nil {
		return x.SlamVersion
	}
	return ""
}

func (x *MappingMetadata) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *MappingMetadata) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

var File_app_cloudslam_v1_cloud_slam_proto protoreflect.FileDescriptor

var file_app_cloudslam_v1_cloud_slam_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa2, 0x04, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x69, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x22, 0x83,
	0x01, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x22, 0x66, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x19, 0x53,
	0x74, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb5, 0x05, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x48,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75,
	0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x61, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x69, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x2a, 0x6c, 0x0a, 0x09, 0x45, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x32, 0xe3, 0x06, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x4c, 0x41, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12,
	0x3e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x39, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x3b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x6c, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x22, 0x5a,
	0x20, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x6c, 0x61, 0x6d, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_cloudslam_v1_cloud_slam_proto_rawDescOnce sync.Once
	file_app_cloudslam_v1_cloud_slam_proto_rawDescData = file_app_cloudslam_v1_cloud_slam_proto_rawDesc
)

func file_app_cloudslam_v1_cloud_slam_proto_rawDescGZIP() []byte {
	file_app_cloudslam_v1_cloud_slam_proto_rawDescOnce.Do(func() {
		file_app_cloudslam_v1_cloud_slam_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_cloudslam_v1_cloud_slam_proto_rawDescData)
	})
	return file_app_cloudslam_v1_cloud_slam_proto_rawDescData
}

var file_app_cloudslam_v1_cloud_slam_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_cloudslam_v1_cloud_slam_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_app_cloudslam_v1_cloud_slam_proto_goTypes = []interface{}{
	(EndStatus)(0),                                   // 0: viam.app.cloudslam.v1.EndStatus
	(*StartMappingSessionRequest)(nil),               // 1: viam.app.cloudslam.v1.StartMappingSessionRequest
	(*Module)(nil),                                   // 2: viam.app.cloudslam.v1.Module
	(*SensorInfo)(nil),                               // 3: viam.app.cloudslam.v1.SensorInfo
	(*CaptureInterval)(nil),                          // 4: viam.app.cloudslam.v1.CaptureInterval
	(*StartMappingSessionResponse)(nil),              // 5: viam.app.cloudslam.v1.StartMappingSessionResponse
	(*GetActiveMappingSessionsForRobotRequest)(nil),  // 6: viam.app.cloudslam.v1.GetActiveMappingSessionsForRobotRequest
	(*GetActiveMappingSessionsForRobotResponse)(nil), // 7: viam.app.cloudslam.v1.GetActiveMappingSessionsForRobotResponse
	(*GetMappingSessionPointCloudRequest)(nil),       // 8: viam.app.cloudslam.v1.GetMappingSessionPointCloudRequest
	(*GetMappingSessionPointCloudResponse)(nil),      // 9: viam.app.cloudslam.v1.GetMappingSessionPointCloudResponse
	(*ListMappingSessionsRequest)(nil),               // 10: viam.app.cloudslam.v1.ListMappingSessionsRequest
	(*ListMappingSessionsResponse)(nil),              // 11: viam.app.cloudslam.v1.ListMappingSessionsResponse
	(*StopMappingSessionRequest)(nil),                // 12: viam.app.cloudslam.v1.StopMappingSessionRequest
	(*StopMappingSessionResponse)(nil),               // 13: viam.app.cloudslam.v1.StopMappingSessionResponse
	(*GetMappingSessionMetadataByIDRequest)(nil),     // 14: viam.app.cloudslam.v1.GetMappingSessionMetadataByIDRequest
	(*GetMappingSessionMetadataByIDResponse)(nil),    // 15: viam.app.cloudslam.v1.GetMappingSessionMetadataByIDResponse
	(*MappingMetadata)(nil),                          // 16: viam.app.cloudslam.v1.MappingMetadata
	(*structpb.Struct)(nil),                          // 17: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                    // 18: google.protobuf.Timestamp
	(*v1.Pose)(nil),                                  // 19: viam.common.v1.Pose
}
var file_app_cloudslam_v1_cloud_slam_proto_depIdxs = []int32{
	4,  // 0: viam.app.cloudslam.v1.StartMappingSessionRequest.capture_interval:type_name -> viam.app.cloudslam.v1.CaptureInterval
	3,  // 1: viam.app.cloudslam.v1.StartMappingSessionRequest.sensors:type_name -> viam.app.cloudslam.v1.SensorInfo
	17, // 2: viam.app.cloudslam.v1.StartMappingSessionRequest.slam_config:type_name -> google.protobuf.Struct
	2,  // 3: viam.app.cloudslam.v1.StartMappingSessionRequest.module:type_name -> viam.app.cloudslam.v1.Module
	18, // 4: viam.app.cloudslam.v1.CaptureInterval.start_time:type_name -> google.protobuf.Timestamp
	18, // 5: viam.app.cloudslam.v1.CaptureInterval.end_time:type_name -> google.protobuf.Timestamp
	19, // 6: viam.app.cloudslam.v1.GetMappingSessionPointCloudResponse.pose:type_name -> viam.common.v1.Pose
	16, // 7: viam.app.cloudslam.v1.ListMappingSessionsResponse.session:type_name -> viam.app.cloudslam.v1.MappingMetadata
	16, // 8: viam.app.cloudslam.v1.GetMappingSessionMetadataByIDResponse.session_metadata:type_name -> viam.app.cloudslam.v1.MappingMetadata
	18, // 9: viam.app.cloudslam.v1.MappingMetadata.time_start_submitted:type_name -> google.protobuf.Timestamp
	18, // 10: viam.app.cloudslam.v1.MappingMetadata.time_cloud_run_job_started:type_name -> google.protobuf.Timestamp
	18, // 11: viam.app.cloudslam.v1.MappingMetadata.time_end_submitted:type_name -> google.protobuf.Timestamp
	18, // 12: viam.app.cloudslam.v1.MappingMetadata.time_cloud_run_job_ended:type_name -> google.protobuf.Timestamp
	0,  // 13: viam.app.cloudslam.v1.MappingMetadata.end_status:type_name -> viam.app.cloudslam.v1.EndStatus
	1,  // 14: viam.app.cloudslam.v1.CloudSLAMService.StartMappingSession:input_type -> viam.app.cloudslam.v1.StartMappingSessionRequest
	6,  // 15: viam.app.cloudslam.v1.CloudSLAMService.GetActiveMappingSessionsForRobot:input_type -> viam.app.cloudslam.v1.GetActiveMappingSessionsForRobotRequest
	8,  // 16: viam.app.cloudslam.v1.CloudSLAMService.GetMappingSessionPointCloud:input_type -> viam.app.cloudslam.v1.GetMappingSessionPointCloudRequest
	10, // 17: viam.app.cloudslam.v1.CloudSLAMService.ListMappingSessions:input_type -> viam.app.cloudslam.v1.ListMappingSessionsRequest
	12, // 18: viam.app.cloudslam.v1.CloudSLAMService.StopMappingSession:input_type -> viam.app.cloudslam.v1.StopMappingSessionRequest
	14, // 19: viam.app.cloudslam.v1.CloudSLAMService.GetMappingSessionMetadataByID:input_type -> viam.app.cloudslam.v1.GetMappingSessionMetadataByIDRequest
	5,  // 20: viam.app.cloudslam.v1.CloudSLAMService.StartMappingSession:output_type -> viam.app.cloudslam.v1.StartMappingSessionResponse
	7,  // 21: viam.app.cloudslam.v1.CloudSLAMService.GetActiveMappingSessionsForRobot:output_type -> viam.app.cloudslam.v1.GetActiveMappingSessionsForRobotResponse
	9,  // 22: viam.app.cloudslam.v1.CloudSLAMService.GetMappingSessionPointCloud:output_type -> viam.app.cloudslam.v1.GetMappingSessionPointCloudResponse
	11, // 23: viam.app.cloudslam.v1.CloudSLAMService.ListMappingSessions:output_type -> viam.app.cloudslam.v1.ListMappingSessionsResponse
	13, // 24: viam.app.cloudslam.v1.CloudSLAMService.StopMappingSession:output_type -> viam.app.cloudslam.v1.StopMappingSessionResponse
	15, // 25: viam.app.cloudslam.v1.CloudSLAMService.GetMappingSessionMetadataByID:output_type -> viam.app.cloudslam.v1.GetMappingSessionMetadataByIDResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_app_cloudslam_v1_cloud_slam_proto_init() }
func file_app_cloudslam_v1_cloud_slam_proto_init() {
	if File_app_cloudslam_v1_cloud_slam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMappingSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMappingSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveMappingSessionsForRobotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveMappingSessionsForRobotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionPointCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionPointCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMappingSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMappingSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMappingSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMappingSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionMetadataByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingSessionMetadataByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_cloudslam_v1_cloud_slam_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_cloudslam_v1_cloud_slam_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_cloudslam_v1_cloud_slam_proto_goTypes,
		DependencyIndexes: file_app_cloudslam_v1_cloud_slam_proto_depIdxs,
		EnumInfos:         file_app_cloudslam_v1_cloud_slam_proto_enumTypes,
		MessageInfos:      file_app_cloudslam_v1_cloud_slam_proto_msgTypes,
	}.Build()
	File_app_cloudslam_v1_cloud_slam_proto = out.File
	file_app_cloudslam_v1_cloud_slam_proto_rawDesc = nil
	file_app_cloudslam_v1_cloud_slam_proto_goTypes = nil
	file_app_cloudslam_v1_cloud_slam_proto_depIdxs = nil
}
