// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: service/shell/v1/shell.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CopyFilesSourceType indicates what will be copied. It's important
// to disambiguate the single directory case from the multiple files
// case in order to indicate that the user's intent is to copy a directory
// into a single location which may result in a new top-level directory versus
// the cause of multiples files that always go into the existing target destination.
type CopyFilesSourceType int32

const (
	CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_UNSPECIFIED      CopyFilesSourceType = 0
	CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_SINGLE_FILE      CopyFilesSourceType = 1
	CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_SINGLE_DIRECTORY CopyFilesSourceType = 2
	CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_MULTIPLE_FILES   CopyFilesSourceType = 3
)

// Enum value maps for CopyFilesSourceType.
var (
	CopyFilesSourceType_name = map[int32]string{
		0: "COPY_FILES_SOURCE_TYPE_UNSPECIFIED",
		1: "COPY_FILES_SOURCE_TYPE_SINGLE_FILE",
		2: "COPY_FILES_SOURCE_TYPE_SINGLE_DIRECTORY",
		3: "COPY_FILES_SOURCE_TYPE_MULTIPLE_FILES",
	}
	CopyFilesSourceType_value = map[string]int32{
		"COPY_FILES_SOURCE_TYPE_UNSPECIFIED":      0,
		"COPY_FILES_SOURCE_TYPE_SINGLE_FILE":      1,
		"COPY_FILES_SOURCE_TYPE_SINGLE_DIRECTORY": 2,
		"COPY_FILES_SOURCE_TYPE_MULTIPLE_FILES":   3,
	}
)

func (x CopyFilesSourceType) Enum() *CopyFilesSourceType {
	p := new(CopyFilesSourceType)
	*p = x
	return p
}

func (x CopyFilesSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyFilesSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_shell_v1_shell_proto_enumTypes[0].Descriptor()
}

func (CopyFilesSourceType) Type() protoreflect.EnumType {
	return &file_service_shell_v1_shell_proto_enumTypes[0]
}

func (x CopyFilesSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyFilesSourceType.Descriptor instead.
func (CopyFilesSourceType) EnumDescriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{0}
}

type ShellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataIn string `protobuf:"bytes,2,opt,name=data_in,json=dataIn,proto3" json:"data_in,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ShellRequest) Reset() {
	*x = ShellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellRequest) ProtoMessage() {}

func (x *ShellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellRequest.ProtoReflect.Descriptor instead.
func (*ShellRequest) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{0}
}

func (x *ShellRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShellRequest) GetDataIn() string {
	if x != nil {
		return x.DataIn
	}
	return ""
}

func (x *ShellRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataOut string `protobuf:"bytes,1,opt,name=data_out,json=dataOut,proto3" json:"data_out,omitempty"`
	DataErr string `protobuf:"bytes,2,opt,name=data_err,json=dataErr,proto3" json:"data_err,omitempty"`
	Eof     bool   `protobuf:"varint,3,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *ShellResponse) Reset() {
	*x = ShellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellResponse) ProtoMessage() {}

func (x *ShellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellResponse.ProtoReflect.Descriptor instead.
func (*ShellResponse) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{1}
}

func (x *ShellResponse) GetDataOut() string {
	if x != nil {
		return x.DataOut
	}
	return ""
}

func (x *ShellResponse) GetDataErr() string {
	if x != nil {
		return x.DataErr
	}
	return ""
}

func (x *ShellResponse) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

// FileData contains partial (sometimes complete) information about a File.
// When transmitting FileData with CopyFilesTophysicalDevice and CopyFilesFromphysicalDevice,
// it MUST initially contain its name, size, and is_dir. Depending on whether
// preservation is in use, the mod_time and mode fields may be initially set
// as well. On all transmissions, data and eof must be set. Because files are
// sent one-by-one, it is currently permitted to exclude the initially set fields.
// If this ever changes, a new scheme should be used for identifying files (like a number)
// in order to reduce data transmission while allowing out-of-order transfers.
// eof must be true and its own message once no more data is to be sent for this file.
type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size  int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	IsDir bool   `protobuf:"varint,3,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	Data  []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Eof   bool   `protobuf:"varint,5,opt,name=eof,proto3" json:"eof,omitempty"`
	// Note(erd): maybe support access time in the future if needed
	ModTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=mod_time,json=modTime,proto3,oneof" json:"mod_time,omitempty"`
	Mode    *uint32                `protobuf:"varint,7,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{2}
}

func (x *FileData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileData) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileData) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileData) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *FileData) GetModTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModTime
	}
	return nil
}

func (x *FileData) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type CopyFilesTophysicalDeviceRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the service name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// source_type is the type of files that will be transmitted in this request stream.
	SourceType CopyFilesSourceType `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=viam.service.shell.v1.CopyFilesSourceType" json:"source_type,omitempty"`
	// destination is where the files should be placed. The receiver can choose to
	// reasonably modify this destination based on its implementation semantics.
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// preserve indicates the the receiver should use the metadata in the file to reflect
	// the same state in its filesystem as applicable.
	Preserve bool `protobuf:"varint,4,opt,name=preserve,proto3" json:"preserve,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) Reset() {
	*x = CopyFilesTophysicalDeviceRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesTophysicalDeviceRequestMetadata) ProtoMessage() {}

func (x *CopyFilesTophysicalDeviceRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesTophysicalDeviceRequestMetadata.ProtoReflect.Descriptor instead.
func (*CopyFilesTophysicalDeviceRequestMetadata) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{3}
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) GetSourceType() CopyFilesSourceType {
	if x != nil {
		return x.SourceType
	}
	return CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_UNSPECIFIED
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) GetPreserve() bool {
	if x != nil {
		return x.Preserve
	}
	return false
}

func (x *CopyFilesTophysicalDeviceRequestMetadata) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CopyFilesTophysicalDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*CopyFilesTophysicalDeviceRequest_Metadata
	//	*CopyFilesTophysicalDeviceRequest_FileData
	Request isCopyFilesTophysicalDeviceRequest_Request `protobuf_oneof:"request"`
}

func (x *CopyFilesTophysicalDeviceRequest) Reset() {
	*x = CopyFilesTophysicalDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesTophysicalDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesTophysicalDeviceRequest) ProtoMessage() {}

func (x *CopyFilesTophysicalDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesTophysicalDeviceRequest.ProtoReflect.Descriptor instead.
func (*CopyFilesTophysicalDeviceRequest) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{4}
}

func (m *CopyFilesTophysicalDeviceRequest) GetRequest() isCopyFilesTophysicalDeviceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CopyFilesTophysicalDeviceRequest) GetMetadata() *CopyFilesTophysicalDeviceRequestMetadata {
	if x, ok := x.GetRequest().(*CopyFilesTophysicalDeviceRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *CopyFilesTophysicalDeviceRequest) GetFileData() *FileData {
	if x, ok := x.GetRequest().(*CopyFilesTophysicalDeviceRequest_FileData); ok {
		return x.FileData
	}
	return nil
}

type isCopyFilesTophysicalDeviceRequest_Request interface {
	isCopyFilesTophysicalDeviceRequest_Request()
}

type CopyFilesTophysicalDeviceRequest_Metadata struct {
	// metadata is sent first and only once.
	Metadata *CopyFilesTophysicalDeviceRequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type CopyFilesTophysicalDeviceRequest_FileData struct {
	// file_data is sent only after metadata. All data MUST be sent
	// in order per-file.
	FileData *FileData `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3,oneof"`
}

func (*CopyFilesTophysicalDeviceRequest_Metadata) isCopyFilesTophysicalDeviceRequest_Request() {}

func (*CopyFilesTophysicalDeviceRequest_FileData) isCopyFilesTophysicalDeviceRequest_Request() {}

type CopyFilesTophysicalDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value does not matter here but responses must be sent after every
	// file has been received.
	AckLastFile bool `protobuf:"varint,1,opt,name=ack_last_file,json=ackLastFile,proto3" json:"ack_last_file,omitempty"`
}

func (x *CopyFilesTophysicalDeviceResponse) Reset() {
	*x = CopyFilesTophysicalDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesTophysicalDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesTophysicalDeviceResponse) ProtoMessage() {}

func (x *CopyFilesTophysicalDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesTophysicalDeviceResponse.ProtoReflect.Descriptor instead.
func (*CopyFilesTophysicalDeviceResponse) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{5}
}

func (x *CopyFilesTophysicalDeviceResponse) GetAckLastFile() bool {
	if x != nil {
		return x.AckLastFile
	}
	return false
}

type CopyFilesFromphysicalDeviceRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the service name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// paths are the paths to copy from and send back over the wire.
	Paths []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	// allow_recursion indicates if directories should be recursed into. If
	// a directory is encountered and this is false, an error MUST occur.
	AllowRecursion bool `protobuf:"varint,3,opt,name=allow_recursion,json=allowRecursion,proto3" json:"allow_recursion,omitempty"`
	// preserve indicates the the receiver should provide the metadata in the file
	// to reflect the same state in the sender's filesystem as applicable.
	Preserve bool `protobuf:"varint,4,opt,name=preserve,proto3" json:"preserve,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) Reset() {
	*x = CopyFilesFromphysicalDeviceRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesFromphysicalDeviceRequestMetadata) ProtoMessage() {}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesFromphysicalDeviceRequestMetadata.ProtoReflect.Descriptor instead.
func (*CopyFilesFromphysicalDeviceRequestMetadata) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{6}
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) GetAllowRecursion() bool {
	if x != nil {
		return x.AllowRecursion
	}
	return false
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) GetPreserve() bool {
	if x != nil {
		return x.Preserve
	}
	return false
}

func (x *CopyFilesFromphysicalDeviceRequestMetadata) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CopyFilesFromphysicalDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*CopyFilesFromphysicalDeviceRequest_Metadata
	//	*CopyFilesFromphysicalDeviceRequest_AckLastFile
	Request isCopyFilesFromphysicalDeviceRequest_Request `protobuf_oneof:"request"`
}

func (x *CopyFilesFromphysicalDeviceRequest) Reset() {
	*x = CopyFilesFromphysicalDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesFromphysicalDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesFromphysicalDeviceRequest) ProtoMessage() {}

func (x *CopyFilesFromphysicalDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesFromphysicalDeviceRequest.ProtoReflect.Descriptor instead.
func (*CopyFilesFromphysicalDeviceRequest) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{7}
}

func (m *CopyFilesFromphysicalDeviceRequest) GetRequest() isCopyFilesFromphysicalDeviceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CopyFilesFromphysicalDeviceRequest) GetMetadata() *CopyFilesFromphysicalDeviceRequestMetadata {
	if x, ok := x.GetRequest().(*CopyFilesFromphysicalDeviceRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *CopyFilesFromphysicalDeviceRequest) GetAckLastFile() bool {
	if x, ok := x.GetRequest().(*CopyFilesFromphysicalDeviceRequest_AckLastFile); ok {
		return x.AckLastFile
	}
	return false
}

type isCopyFilesFromphysicalDeviceRequest_Request interface {
	isCopyFilesFromphysicalDeviceRequest_Request()
}

type CopyFilesFromphysicalDeviceRequest_Metadata struct {
	// metadata is sent first and only once.
	Metadata *CopyFilesFromphysicalDeviceRequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type CopyFilesFromphysicalDeviceRequest_AckLastFile struct {
	// ack_last_file is sent only after metadata and after each file has been received.
	// The value does not matter.
	AckLastFile bool `protobuf:"varint,2,opt,name=ack_last_file,json=ackLastFile,proto3,oneof"`
}

func (*CopyFilesFromphysicalDeviceRequest_Metadata) isCopyFilesFromphysicalDeviceRequest_Request() {}

func (*CopyFilesFromphysicalDeviceRequest_AckLastFile) isCopyFilesFromphysicalDeviceRequest_Request() {}

type CopyFilesFromphysicalDeviceResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_type is the type of files that will be transmitted in this response stream.
	SourceType CopyFilesSourceType `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=viam.service.shell.v1.CopyFilesSourceType" json:"source_type,omitempty"`
}

func (x *CopyFilesFromphysicalDeviceResponseMetadata) Reset() {
	*x = CopyFilesFromphysicalDeviceResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesFromphysicalDeviceResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesFromphysicalDeviceResponseMetadata) ProtoMessage() {}

func (x *CopyFilesFromphysicalDeviceResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesFromphysicalDeviceResponseMetadata.ProtoReflect.Descriptor instead.
func (*CopyFilesFromphysicalDeviceResponseMetadata) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{8}
}

func (x *CopyFilesFromphysicalDeviceResponseMetadata) GetSourceType() CopyFilesSourceType {
	if x != nil {
		return x.SourceType
	}
	return CopyFilesSourceType_COPY_FILES_SOURCE_TYPE_UNSPECIFIED
}

type CopyFilesFromphysicalDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CopyFilesFromphysicalDeviceResponse_Metadata
	//	*CopyFilesFromphysicalDeviceResponse_FileData
	Response isCopyFilesFromphysicalDeviceResponse_Response `protobuf_oneof:"response"`
}

func (x *CopyFilesFromphysicalDeviceResponse) Reset() {
	*x = CopyFilesFromphysicalDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_shell_v1_shell_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesFromphysicalDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesFromphysicalDeviceResponse) ProtoMessage() {}

func (x *CopyFilesFromphysicalDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_shell_v1_shell_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesFromphysicalDeviceResponse.ProtoReflect.Descriptor instead.
func (*CopyFilesFromphysicalDeviceResponse) Descriptor() ([]byte, []int) {
	return file_service_shell_v1_shell_proto_rawDescGZIP(), []int{9}
}

func (m *CopyFilesFromphysicalDeviceResponse) GetResponse() isCopyFilesFromphysicalDeviceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CopyFilesFromphysicalDeviceResponse) GetMetadata() *CopyFilesFromphysicalDeviceResponseMetadata {
	if x, ok := x.GetResponse().(*CopyFilesFromphysicalDeviceResponse_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *CopyFilesFromphysicalDeviceResponse) GetFileData() *FileData {
	if x, ok := x.GetResponse().(*CopyFilesFromphysicalDeviceResponse_FileData); ok {
		return x.FileData
	}
	return nil
}

type isCopyFilesFromphysicalDeviceResponse_Response interface {
	isCopyFilesFromphysicalDeviceResponse_Response()
}

type CopyFilesFromphysicalDeviceResponse_Metadata struct {
	// metadata is sent first and only once.
	Metadata *CopyFilesFromphysicalDeviceResponseMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type CopyFilesFromphysicalDeviceResponse_FileData struct {
	// file_data is sent only after metadata. All data MUST be sent
	// in order per-file.
	FileData *FileData `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3,oneof"`
}

func (*CopyFilesFromphysicalDeviceResponse_Metadata) isCopyFilesFromphysicalDeviceResponse_Response() {}

func (*CopyFilesFromphysicalDeviceResponse_FileData) isCopyFilesFromphysicalDeviceResponse_Response() {}

var File_service_shell_v1_shell_proto protoreflect.FileDescriptor

var file_service_shell_v1_shell_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4f,
	0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f, 0x66, 0x22,
	0xda, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f,
	0x66, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x01, 0x0a,
	0x21, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0xbe, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x40, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63,
	0x6b, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x24, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0xbd, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x50,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x50,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10,
	0x03, 0x32, 0xf4, 0x03, 0x0a, 0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x12, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x30, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x86, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x76, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x6f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x3d, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x5a, 0x20, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_shell_v1_shell_proto_rawDescOnce sync.Once
	file_service_shell_v1_shell_proto_rawDescData = file_service_shell_v1_shell_proto_rawDesc
)

func file_service_shell_v1_shell_proto_rawDescGZIP() []byte {
	file_service_shell_v1_shell_proto_rawDescOnce.Do(func() {
		file_service_shell_v1_shell_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_shell_v1_shell_proto_rawDescData)
	})
	return file_service_shell_v1_shell_proto_rawDescData
}

var file_service_shell_v1_shell_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_shell_v1_shell_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_shell_v1_shell_proto_goTypes = []interface{}{
	(CopyFilesSourceType)(0),                     // 0: viam.service.shell.v1.CopyFilesSourceType
	(*ShellRequest)(nil),                         // 1: viam.service.shell.v1.ShellRequest
	(*ShellResponse)(nil),                        // 2: viam.service.shell.v1.ShellResponse
	(*FileData)(nil),                             // 3: viam.service.shell.v1.FileData
	(*CopyFilesTophysicalDeviceRequestMetadata)(nil),    // 4: viam.service.shell.v1.CopyFilesTophysicalDeviceRequestMetadata
	(*CopyFilesTophysicalDeviceRequest)(nil),            // 5: viam.service.shell.v1.CopyFilesTophysicalDeviceRequest
	(*CopyFilesTophysicalDeviceResponse)(nil),           // 6: viam.service.shell.v1.CopyFilesTophysicalDeviceResponse
	(*CopyFilesFromphysicalDeviceRequestMetadata)(nil),  // 7: viam.service.shell.v1.CopyFilesFromphysicalDeviceRequestMetadata
	(*CopyFilesFromphysicalDeviceRequest)(nil),          // 8: viam.service.shell.v1.CopyFilesFromphysicalDeviceRequest
	(*CopyFilesFromphysicalDeviceResponseMetadata)(nil), // 9: viam.service.shell.v1.CopyFilesFromphysicalDeviceResponseMetadata
	(*CopyFilesFromphysicalDeviceResponse)(nil),         // 10: viam.service.shell.v1.CopyFilesFromphysicalDeviceResponse
	(*structpb.Struct)(nil),                      // 11: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                // 12: google.protobuf.Timestamp
	(*v1.DoCommandRequest)(nil),                  // 13: viam.common.v1.DoCommandRequest
	(*v1.DoCommandResponse)(nil),                 // 14: viam.common.v1.DoCommandResponse
}
var file_service_shell_v1_shell_proto_depIdxs = []int32{
	11, // 0: viam.service.shell.v1.ShellRequest.extra:type_name -> google.protobuf.Struct
	12, // 1: viam.service.shell.v1.FileData.mod_time:type_name -> google.protobuf.Timestamp
	0,  // 2: viam.service.shell.v1.CopyFilesTophysicalDeviceRequestMetadata.source_type:type_name -> viam.service.shell.v1.CopyFilesSourceType
	11, // 3: viam.service.shell.v1.CopyFilesTophysicalDeviceRequestMetadata.extra:type_name -> google.protobuf.Struct
	4,  // 4: viam.service.shell.v1.CopyFilesTophysicalDeviceRequest.metadata:type_name -> viam.service.shell.v1.CopyFilesTophysicalDeviceRequestMetadata
	3,  // 5: viam.service.shell.v1.CopyFilesTophysicalDeviceRequest.file_data:type_name -> viam.service.shell.v1.FileData
	11, // 6: viam.service.shell.v1.CopyFilesFromphysicalDeviceRequestMetadata.extra:type_name -> google.protobuf.Struct
	7,  // 7: viam.service.shell.v1.CopyFilesFromphysicalDeviceRequest.metadata:type_name -> viam.service.shell.v1.CopyFilesFromphysicalDeviceRequestMetadata
	0,  // 8: viam.service.shell.v1.CopyFilesFromphysicalDeviceResponseMetadata.source_type:type_name -> viam.service.shell.v1.CopyFilesSourceType
	9,  // 9: viam.service.shell.v1.CopyFilesFromphysicalDeviceResponse.metadata:type_name -> viam.service.shell.v1.CopyFilesFromphysicalDeviceResponseMetadata
	3,  // 10: viam.service.shell.v1.CopyFilesFromphysicalDeviceResponse.file_data:type_name -> viam.service.shell.v1.FileData
	1,  // 11: viam.service.shell.v1.ShellService.Shell:input_type -> viam.service.shell.v1.ShellRequest
	5,  // 12: viam.service.shell.v1.ShellService.CopyFilesTophysicalDevice:input_type -> viam.service.shell.v1.CopyFilesTophysicalDeviceRequest
	8,  // 13: viam.service.shell.v1.ShellService.CopyFilesFromphysicalDevice:input_type -> viam.service.shell.v1.CopyFilesFromphysicalDeviceRequest
	13, // 14: viam.service.shell.v1.ShellService.DoCommand:input_type -> viam.common.v1.DoCommandRequest
	2,  // 15: viam.service.shell.v1.ShellService.Shell:output_type -> viam.service.shell.v1.ShellResponse
	6,  // 16: viam.service.shell.v1.ShellService.CopyFilesTophysicalDevice:output_type -> viam.service.shell.v1.CopyFilesTophysicalDeviceResponse
	10, // 17: viam.service.shell.v1.ShellService.CopyFilesFromphysicalDevice:output_type -> viam.service.shell.v1.CopyFilesFromphysicalDeviceResponse
	14, // 18: viam.service.shell.v1.ShellService.DoCommand:output_type -> viam.common.v1.DoCommandResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_service_shell_v1_shell_proto_init() }
func file_service_shell_v1_shell_proto_init() {
	if File_service_shell_v1_shell_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_shell_v1_shell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesTophysicalDeviceRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesTophysicalDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesTophysicalDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesFromphysicalDeviceRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesFromphysicalDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesFromphysicalDeviceResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_shell_v1_shell_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesFromphysicalDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_shell_v1_shell_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_service_shell_v1_shell_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CopyFilesTophysicalDeviceRequest_Metadata)(nil),
		(*CopyFilesTophysicalDeviceRequest_FileData)(nil),
	}
	file_service_shell_v1_shell_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CopyFilesFromphysicalDeviceRequest_Metadata)(nil),
		(*CopyFilesFromphysicalDeviceRequest_AckLastFile)(nil),
	}
	file_service_shell_v1_shell_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CopyFilesFromphysicalDeviceResponse_Metadata)(nil),
		(*CopyFilesFromphysicalDeviceResponse_FileData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_shell_v1_shell_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_shell_v1_shell_proto_goTypes,
		DependencyIndexes: file_service_shell_v1_shell_proto_depIdxs,
		EnumInfos:         file_service_shell_v1_shell_proto_enumTypes,
		MessageInfos:      file_service_shell_v1_shell_proto_msgTypes,
	}.Build()
	File_service_shell_v1_shell_proto = out.File
	file_service_shell_v1_shell_proto_rawDesc = nil
	file_service_shell_v1_shell_proto_goTypes = nil
	file_service_shell_v1_shell_proto_depIdxs = nil
}
