// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// service/sensors/v1/sensors.proto is a deprecated file.

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorsServiceClient is the client API for SensorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorsServiceClient interface {
	// Deprecated: Do not use.
	// GetSensors returns the list of all sensors.
	GetSensors(ctx context.Context, in *GetSensorsRequest, opts ...grpc.CallOption) (*GetSensorsResponse, error)
	// Deprecated: Do not use.
	// GetReadings returns the list of readings for all sensors specified.
	GetReadings(ctx context.Context, in *GetReadingsRequest, opts ...grpc.CallOption) (*GetReadingsResponse, error)
	// Deprecated: Do not use.
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type sensorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorsServiceClient(cc grpc.ClientConnInterface) SensorsServiceClient {
	return &sensorsServiceClient{cc}
}

// Deprecated: Do not use.
func (c *sensorsServiceClient) GetSensors(ctx context.Context, in *GetSensorsRequest, opts ...grpc.CallOption) (*GetSensorsResponse, error) {
	out := new(GetSensorsResponse)
	err := c.cc.Invoke(ctx, "/viam.service.sensors.v1.SensorsService/GetSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sensorsServiceClient) GetReadings(ctx context.Context, in *GetReadingsRequest, opts ...grpc.CallOption) (*GetReadingsResponse, error) {
	out := new(GetReadingsResponse)
	err := c.cc.Invoke(ctx, "/viam.service.sensors.v1.SensorsService/GetReadings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sensorsServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.service.sensors.v1.SensorsService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorsServiceServer is the server API for SensorsService service.
// All implementations must embed UnimplementedSensorsServiceServer
// for forward compatibility
type SensorsServiceServer interface {
	// Deprecated: Do not use.
	// GetSensors returns the list of all sensors.
	GetSensors(context.Context, *GetSensorsRequest) (*GetSensorsResponse, error)
	// Deprecated: Do not use.
	// GetReadings returns the list of readings for all sensors specified.
	GetReadings(context.Context, *GetReadingsRequest) (*GetReadingsResponse, error)
	// Deprecated: Do not use.
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedSensorsServiceServer()
}

// UnimplementedSensorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorsServiceServer struct {
}

func (UnimplementedSensorsServiceServer) GetSensors(context.Context, *GetSensorsRequest) (*GetSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensors not implemented")
}
func (UnimplementedSensorsServiceServer) GetReadings(context.Context, *GetReadingsRequest) (*GetReadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadings not implemented")
}
func (UnimplementedSensorsServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedSensorsServiceServer) mustEmbedUnimplementedSensorsServiceServer() {}

// UnsafeSensorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorsServiceServer will
// result in compilation errors.
type UnsafeSensorsServiceServer interface {
	mustEmbedUnimplementedSensorsServiceServer()
}

func RegisterSensorsServiceServer(s grpc.ServiceRegistrar, srv SensorsServiceServer) {
	s.RegisterService(&SensorsService_ServiceDesc, srv)
}

func _SensorsService_GetSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.sensors.v1.SensorsService/GetSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetSensors(ctx, req.(*GetSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_GetReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.sensors.v1.SensorsService/GetReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetReadings(ctx, req.(*GetReadingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.sensors.v1.SensorsService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorsService_ServiceDesc is the grpc.ServiceDesc for SensorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.sensors.v1.SensorsService",
	HandlerType: (*SensorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensors",
			Handler:    _SensorsService_GetSensors_Handler,
		},
		{
			MethodName: "GetReadings",
			Handler:    _SensorsService_GetReadings_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _SensorsService_DoCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/sensors/v1/sensors.proto",
}
