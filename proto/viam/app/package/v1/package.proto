syntax = "proto3";

package viam.app.package.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/app/package/v1";

service PackageService {
  // CreatePackage uploads a package's contents and information to the cloud
  rpc CreatePackage(stream CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/datamanagement/create"
    };
  }

  // DeletePackage receives an authenticated request with the package name and array of versions and removes the associated packages
  rpc DeletePackage(DeletePackageRequest) returns (DeletePackageResponse) {
    option (google.api.http) = {
      delete: "/viam/api/v1/service/datamanagement/{organization_id}/delete"
    };
  }

  // GetPackages receives an authenticated request with the package name and version and, if present, generates returns the URL and metadata
  rpc GetPackage(GetPackageRequest) returns (GetPackageResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/datamanagement/{organization_id}/package"
    };
  }

  // ListPackages receives an authenticated request with the organization ID and other optional fields and, if present, generates returns the URL and metadata of all associated packages
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/datamanagement/{organization_id}/list"
    };
  }
}

enum PackageType {
  PACKAGE_TYPE_UNSPECIFIED = 0;
  PACKAGE_TYPE_FILE = 1;
  PACKAGE_TYPE_ML_MODEL = 2;
}

message FileInfo {
  string name = 1;
  uint64 size = 2;
}

message PackageInfo {
  string organization_id = 1;
  string name = 2;
  string version = 3;
  PackageType type = 4;
  repeated FileInfo files = 5;
  google.protobuf.Struct metadata = 6;
}

message CreatePackageRequest {
  oneof package {
    PackageInfo info = 1;
    bytes contents = 2; // .tar.gz file with a limit of 50GB
  }
}

message CreatePackageResponse {}

message DeletePackageRequest {
  string organization_id = 1;
  string name = 2;
  repeated string versions = 3;
}

message DeletePackageResponse {
  int64 deleted_count = 1; // Number of versions deleted
}

message Package {
  PackageInfo info = 1;
  string url = 2;
}

message GetPackageRequest {
  string organization_id = 1;
  optional string name = 2;
  optional string version = 3;
}

message GetPackageResponse {
  repeated Package packages = 1;
}

message ListPackagesRequest {
  string organization_id = 1; // If only organization_id is specified, get all packages for an organization. Used in app.
  optional string name = 2;
  optional string version = 3;
  optional PackageType type = 4; // Can specify only getting ML_MODEL packages. Defaults to all types if undefined.
}

message ListPackagesResponse {
  repeated Package packages = 1;
}
