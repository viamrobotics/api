syntax = "proto3";

package viam.app.packages.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "tagger/v1/tagger.proto";

option go_package = "go.viam.com/api/app/packages/v1";

service PackageService {
  // CreatePackage uploads a package to the cloud
  rpc CreatePackage(stream CreatePackageRequest) returns (CreatePackageResponse) {
    option (google.api.http) = {
      post: "/packages/v1/create"
    };
  }

  // DeletePackage removes the given package versions
  rpc DeletePackage(DeletePackageRequest) returns (DeletePackageResponse) {
    option (google.api.http) = {
      delete: "/packages/v1/delete"
    };
  }

  // // GetPackage returns the URL and metadata for a requested package version
  rpc GetPackage(GetPackageRequest) returns (GetPackageResponse) {
    option (google.api.http) = {
      get: "/packages/v1/get"
    };
  }

  // ListPackages get the URLs and metadata for requested packages. Include package name, version, and/or type to filter beyond the required organization_id.
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse) {
    option (google.api.http) = {
      get: "/packages/v1/list"
    };
  }
}

enum PackageType {
  PACKAGE_TYPE_UNSPECIFIED = 0;
  PACKAGE_TYPE_ARCHIVE = 1;
  PACKAGE_TYPE_ML_MODEL = 2;
}

message FileInfo {
  string name = 1;
  uint64 size = 2;
}

message PackageInfo {
  string organization_id = 1;
  string name = 2;
  string version = 3;
  PackageType type = 4;
  repeated FileInfo files = 5;
  google.protobuf.Struct metadata = 6;
}

message CreatePackageRequest {
  oneof package {
    PackageInfo info = 1;
    // .tar.gz file
    bytes contents = 2;
  }
}

message CreatePackageResponse {}

message DeletePackageRequest {
  string organization_id = 1;
  string name = 2;
  string version = 3;
}

message DeletePackageResponse {}

message Package {
  PackageInfo info = 1;
  string url = 2;
  google.protobuf.Timestamp created_on = 3;
  string checksum = 4;
}

// InternalPackage is stored in the packages database and represents our interval view of the uploaded package
message InternalPackage {
  string organization_id = 1 [(tagger.v1.tags) = "bson:\"organization_id\" json:\"organization_id\""];
  string name = 2 [(tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  string version = 3 [(tagger.v1.tags) = "bson:\"version\" json:\"version\""];
  PackageType type = 4 [(tagger.v1.tags) = "bson:\"type\" json:\"type\""];
  repeated FileInfo files = 5 [(tagger.v1.tags) = "bson:\"files\" json:\"files\""];
  google.protobuf.Struct metadata = 6 [(tagger.v1.tags) = "bson:\"metadata\" json:\"metadata\""];
  string blob_path = 7 [(tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  google.protobuf.Timestamp created_on = 8 [(tagger.v1.tags) = "bson:\"created_on\" json:\"created_on\""];
  string checksum = 9 [(tagger.v1.tags) = "bson:\"checksum\" json:\"checksum\""];
  bool latest = 10 [(tagger.v1.tags) = "bson:\"latest\" json:\"latest\""];
}

message GetPackageRequest {
  string organization_id = 1;
  string name = 2;
  string version = 3;
}

message GetPackageResponse {
  Package package = 1;
}

message ListPackagesRequest {
  string organization_id = 1;
  optional string name = 2;
  optional string version = 3;
  optional PackageType type = 4;
}

message ListPackagesResponse {
  repeated Package packages = 1;
}
