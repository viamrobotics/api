// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/v1/billing.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	GetCurrentMonthUsageSummary(ctx context.Context, in *GetCurrentMonthUsageSummaryRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageSummaryResponse, error)
	GetUnpaidBalance(ctx context.Context, in *GetUnpaidBalanceRequest, opts ...grpc.CallOption) (*GetUnpaidBalanceResponse, error)
	GetInvoiceHistory(ctx context.Context, in *GetInvoiceHistoryRequest, opts ...grpc.CallOption) (*GetInvoiceHistoryResponse, error)
	GetItemizedInvoice(ctx context.Context, in *GetItemizedInvoiceRequest, opts ...grpc.CallOption) (*GetItemizedInvoiceResponse, error)
	GetBillingSummary(ctx context.Context, in *GetBillingSummaryRequest, opts ...grpc.CallOption) (*GetBillingSummaryResponse, error)
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (BillingService_GetInvoicePdfClient, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetCurrentMonthUsageSummary(ctx context.Context, in *GetCurrentMonthUsageSummaryRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageSummaryResponse, error) {
	out := new(GetCurrentMonthUsageSummaryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetCurrentMonthUsageSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetUnpaidBalance(ctx context.Context, in *GetUnpaidBalanceRequest, opts ...grpc.CallOption) (*GetUnpaidBalanceResponse, error) {
	out := new(GetUnpaidBalanceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetUnpaidBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoiceHistory(ctx context.Context, in *GetInvoiceHistoryRequest, opts ...grpc.CallOption) (*GetInvoiceHistoryResponse, error) {
	out := new(GetInvoiceHistoryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetInvoiceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetItemizedInvoice(ctx context.Context, in *GetItemizedInvoiceRequest, opts ...grpc.CallOption) (*GetItemizedInvoiceResponse, error) {
	out := new(GetItemizedInvoiceResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetItemizedInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingSummary(ctx context.Context, in *GetBillingSummaryRequest, opts ...grpc.CallOption) (*GetBillingSummaryResponse, error) {
	out := new(GetBillingSummaryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetBillingSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error) {
	out := new(GetCurrentMonthUsageResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetCurrentMonthUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error) {
	out := new(GetOrgBillingInformationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetOrgBillingInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error) {
	out := new(GetInvoicesSummaryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetInvoicesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (BillingService_GetInvoicePdfClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingService_ServiceDesc.Streams[0], "/viam.app.v1.BillingService/GetInvoicePdf", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingServiceGetInvoicePdfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingService_GetInvoicePdfClient interface {
	Recv() (*GetInvoicePdfResponse, error)
	grpc.ClientStream
}

type billingServiceGetInvoicePdfClient struct {
	grpc.ClientStream
}

func (x *billingServiceGetInvoicePdfClient) Recv() (*GetInvoicePdfResponse, error) {
	m := new(GetInvoicePdfResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	GetCurrentMonthUsageSummary(context.Context, *GetCurrentMonthUsageSummaryRequest) (*GetCurrentMonthUsageSummaryResponse, error)
	GetUnpaidBalance(context.Context, *GetUnpaidBalanceRequest) (*GetUnpaidBalanceResponse, error)
	GetInvoiceHistory(context.Context, *GetInvoiceHistoryRequest) (*GetInvoiceHistoryResponse, error)
	GetItemizedInvoice(context.Context, *GetItemizedInvoiceRequest) (*GetItemizedInvoiceResponse, error)
	GetBillingSummary(context.Context, *GetBillingSummaryRequest) (*GetBillingSummaryResponse, error)
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(*GetInvoicePdfRequest, BillingService_GetInvoicePdfServer) error
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) GetCurrentMonthUsageSummary(context.Context, *GetCurrentMonthUsageSummaryRequest) (*GetCurrentMonthUsageSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMonthUsageSummary not implemented")
}
func (UnimplementedBillingServiceServer) GetUnpaidBalance(context.Context, *GetUnpaidBalanceRequest) (*GetUnpaidBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnpaidBalance not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoiceHistory(context.Context, *GetInvoiceHistoryRequest) (*GetInvoiceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceHistory not implemented")
}
func (UnimplementedBillingServiceServer) GetItemizedInvoice(context.Context, *GetItemizedInvoiceRequest) (*GetItemizedInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemizedInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetBillingSummary(context.Context, *GetBillingSummaryRequest) (*GetBillingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSummary not implemented")
}
func (UnimplementedBillingServiceServer) GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMonthUsage not implemented")
}
func (UnimplementedBillingServiceServer) GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgBillingInformation not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicesSummary not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicePdf(*GetInvoicePdfRequest, BillingService_GetInvoicePdfServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInvoicePdf not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetCurrentMonthUsageSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMonthUsageSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCurrentMonthUsageSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetCurrentMonthUsageSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCurrentMonthUsageSummary(ctx, req.(*GetCurrentMonthUsageSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetUnpaidBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnpaidBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUnpaidBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetUnpaidBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUnpaidBalance(ctx, req.(*GetUnpaidBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoiceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoiceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetInvoiceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoiceHistory(ctx, req.(*GetInvoiceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetItemizedInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemizedInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetItemizedInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetItemizedInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetItemizedInvoice(ctx, req.(*GetItemizedInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetBillingSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingSummary(ctx, req.(*GetBillingSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetCurrentMonthUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMonthUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetCurrentMonthUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, req.(*GetCurrentMonthUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrgBillingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgBillingInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetOrgBillingInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, req.(*GetOrgBillingInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetInvoicesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, req.(*GetInvoicesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicePdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInvoicePdfRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServiceServer).GetInvoicePdf(m, &billingServiceGetInvoicePdfServer{stream})
}

type BillingService_GetInvoicePdfServer interface {
	Send(*GetInvoicePdfResponse) error
	grpc.ServerStream
}

type billingServiceGetInvoicePdfServer struct {
	grpc.ServerStream
}

func (x *billingServiceGetInvoicePdfServer) Send(m *GetInvoicePdfResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentMonthUsageSummary",
			Handler:    _BillingService_GetCurrentMonthUsageSummary_Handler,
		},
		{
			MethodName: "GetUnpaidBalance",
			Handler:    _BillingService_GetUnpaidBalance_Handler,
		},
		{
			MethodName: "GetInvoiceHistory",
			Handler:    _BillingService_GetInvoiceHistory_Handler,
		},
		{
			MethodName: "GetItemizedInvoice",
			Handler:    _BillingService_GetItemizedInvoice_Handler,
		},
		{
			MethodName: "GetBillingSummary",
			Handler:    _BillingService_GetBillingSummary_Handler,
		},
		{
			MethodName: "GetCurrentMonthUsage",
			Handler:    _BillingService_GetCurrentMonthUsage_Handler,
		},
		{
			MethodName: "GetOrgBillingInformation",
			Handler:    _BillingService_GetOrgBillingInformation_Handler,
		},
		{
			MethodName: "GetInvoicesSummary",
			Handler:    _BillingService_GetInvoicesSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInvoicePdf",
			Handler:       _BillingService_GetInvoicePdf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/v1/billing.proto",
}
