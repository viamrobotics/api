// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stream/v1/stream.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamService_ListStreams_FullMethodName      = "/proto.stream.v1.StreamService/ListStreams"
	StreamService_AddStream_FullMethodName        = "/proto.stream.v1.StreamService/AddStream"
	StreamService_GetStreamOptions_FullMethodName = "/proto.stream.v1.StreamService/GetStreamOptions"
	StreamService_SetStreamOptions_FullMethodName = "/proto.stream.v1.StreamService/SetStreamOptions"
	StreamService_RemoveStream_FullMethodName     = "/proto.stream.v1.StreamService/RemoveStream"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A StreamService is used to coordinate with a WebRTC the listing,
// addition, and removal of registered video streams.
// TODO(https://github.com/viamrobotics/rdk/issues/509): support removal
type StreamServiceClient interface {
	// ListStreams returns all streams registered.
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	// AddStream requests a particular stream be added.
	AddStream(ctx context.Context, in *AddStreamRequest, opts ...grpc.CallOption) (*AddStreamResponse, error)
	// GetStreamOptions returns the options for a particular stream.
	GetStreamOptions(ctx context.Context, in *GetStreamOptionsRequest, opts ...grpc.CallOption) (*GetStreamOptionsResponse, error)
	// SetStreamOptions sets the options for a particular stream.
	SetStreamOptions(ctx context.Context, in *SetStreamOptionsRequest, opts ...grpc.CallOption) (*SetStreamOptionsResponse, error)
	// RemoveStream requests a particular stream be removed. If the calling client
	// is the last to be receiving the stream, it will attempt to be stopped to
	// conserve resources.
	RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*RemoveStreamResponse, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, StreamService_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) AddStream(ctx context.Context, in *AddStreamRequest, opts ...grpc.CallOption) (*AddStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStreamResponse)
	err := c.cc.Invoke(ctx, StreamService_AddStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) GetStreamOptions(ctx context.Context, in *GetStreamOptionsRequest, opts ...grpc.CallOption) (*GetStreamOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamOptionsResponse)
	err := c.cc.Invoke(ctx, StreamService_GetStreamOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) SetStreamOptions(ctx context.Context, in *SetStreamOptionsRequest, opts ...grpc.CallOption) (*SetStreamOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStreamOptionsResponse)
	err := c.cc.Invoke(ctx, StreamService_SetStreamOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*RemoveStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStreamResponse)
	err := c.cc.Invoke(ctx, StreamService_RemoveStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility.
//
// A StreamService is used to coordinate with a WebRTC the listing,
// addition, and removal of registered video streams.
// TODO(https://github.com/viamrobotics/rdk/issues/509): support removal
type StreamServiceServer interface {
	// ListStreams returns all streams registered.
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	// AddStream requests a particular stream be added.
	AddStream(context.Context, *AddStreamRequest) (*AddStreamResponse, error)
	// GetStreamOptions returns the options for a particular stream.
	GetStreamOptions(context.Context, *GetStreamOptionsRequest) (*GetStreamOptionsResponse, error)
	// SetStreamOptions sets the options for a particular stream.
	SetStreamOptions(context.Context, *SetStreamOptionsRequest) (*SetStreamOptionsResponse, error)
	// RemoveStream requests a particular stream be removed. If the calling client
	// is the last to be receiving the stream, it will attempt to be stopped to
	// conserve resources.
	RemoveStream(context.Context, *RemoveStreamRequest) (*RemoveStreamResponse, error)
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServiceServer struct{}

func (UnimplementedStreamServiceServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedStreamServiceServer) AddStream(context.Context, *AddStreamRequest) (*AddStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStream not implemented")
}
func (UnimplementedStreamServiceServer) GetStreamOptions(context.Context, *GetStreamOptionsRequest) (*GetStreamOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamOptions not implemented")
}
func (UnimplementedStreamServiceServer) SetStreamOptions(context.Context, *SetStreamOptionsRequest) (*SetStreamOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamOptions not implemented")
}
func (UnimplementedStreamServiceServer) RemoveStream(context.Context, *RemoveStreamRequest) (*RemoveStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStream not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}
func (UnimplementedStreamServiceServer) testEmbeddedByValue()                       {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_AddStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).AddStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_AddStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).AddStream(ctx, req.(*AddStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_GetStreamOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetStreamOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_GetStreamOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetStreamOptions(ctx, req.(*GetStreamOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_SetStreamOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).SetStreamOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_SetStreamOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).SetStreamOptions(ctx, req.(*SetStreamOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_RemoveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).RemoveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_RemoveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).RemoveStream(ctx, req.(*RemoveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.stream.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreams",
			Handler:    _StreamService_ListStreams_Handler,
		},
		{
			MethodName: "AddStream",
			Handler:    _StreamService_AddStream_Handler,
		},
		{
			MethodName: "GetStreamOptions",
			Handler:    _StreamService_GetStreamOptions_Handler,
		},
		{
			MethodName: "SetStreamOptions",
			Handler:    _StreamService_SetStreamOptions_Handler,
		},
		{
			MethodName: "RemoveStream",
			Handler:    _StreamService_RemoveStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream/v1/stream.proto",
}
