syntax = "proto3";

package viam.service.motion.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/service/motion/v1";
option java_package = "com.viam.service.motion.v1";

// A MotionService declares the gRPC contract for a motion service
service MotionService {
  rpc Move(MoveRequest) returns (MoveResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/motion/{name}/move"
    };
  }

  rpc MoveOnMap(MoveOnMapRequest) returns (MoveOnMapResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/motion/{name}/move_on_map"
    };
  }

  rpc MoveOnGlobe(MoveOnGlobeRequest) returns (MoveOnGlobeResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/motion/{name}/move_on_globe"
    };
  }

  rpc GetPose(GetPoseRequest) returns (GetPoseResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/motion/{name}/pose"
    };
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/motion/{name}/do_command"
    };
  }
}

// Moves any component on the robot to a specified destination which can be from the reference frame of any other component on the robot.
message MoveRequest {
  // Name of the motion service
  string name = 1;
  // Destination to move to, which can a pose in the reference frame of any frame in the robot's frame system
  common.v1.PoseInFrame destination = 2;
  // Component on the robot to move to the specified destination
  common.v1.ResourceName component_name = 3;
  // Avoid obstacles by specifying their geometries in the world state
  // Augment the frame system of the robot by specifying additional transforms to add to it for the duration of the Move
  optional common.v1.WorldState world_state = 4;
  // Constrain the way the robot will move
  optional Constraints constraints = 5;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message MoveResponse {
  bool success = 1;
}

message MoveOnMapRequest {
  // Name of the motion service
  string name = 1;
  // Specify a destination to, which can be any pose with respect to the SLAM map's origin
  common.v1.Pose destination = 2;
  // Component on the robot to move to the specified destination
  common.v1.ResourceName component_name = 3;
  // Name of the slam service from which the SLAM map is requested
  common.v1.ResourceName slam_service_name = 4;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message MoveOnMapResponse {
  bool success = 1;
}

message MotionConfiguration {
  // The name of the vision service(s) that will be used to detect obstacles
  repeated common.v1.ResourceName vision_services = 1;
  // Sets the frequency to poll for the position of the robot
  optional double position_polling_frequency_hz = 2;
  // Sets the frequency to poll the vision service(s) for new obstacles
  optional double obstacle_polling_frequency_hz = 3;
  // Sets the distance in meters that a robot is allowed to deviate from the motion plan
  optional double plan_deviation_m = 4;
  // Optional linear velocity to target when moving
  optional double linear_m_per_sec = 5;
  // Optional angular velocity to target when turning
  optional double angular_degs_per_sec = 6;
}

message MoveOnGlobeRequest {
  // Name of the motion service
  string name = 1;
  // Destination, encoded as a GeoPoint
  common.v1.GeoPoint destination = 2;
  // Optional compass heading to achieve at the destination, in degrees [0-360)
  optional double heading = 3;
  // Component on the robot to move to the specified destination
  common.v1.ResourceName component_name = 4;
  // Name of the movement sensor which will be used to check robot location
  common.v1.ResourceName movement_sensor_name = 5;
  // Obstacles to be considered for motion planning
  repeated common.v1.GeoObstacle obstacles = 6;
  // Optional set of motion configuration options
  optional MotionConfiguration motion_configuration = 7;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message MoveOnGlobeResponse {
  bool success = 1;
}

message GetPoseRequest {
  string name = 1;
  // the component whose pose is being requested
  common.v1.ResourceName component_name = 2;
  // the reference frame in which the component's pose
  // should be provided, if unset this defaults
  // to the "world" reference frame
  string destination_frame = 3;
  // pose information on any additional reference frames that are needed
  // to compute the component's pose
  repeated common.v1.Transform supplemental_transforms = 4;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPoseResponse {
  common.v1.PoseInFrame pose = 1;
}

// Constraints specifies all enumerated constraints to be passed to Viam's motion planning, along with any optional parameters
message Constraints {
  // Typed message for a specific constraint
  repeated LinearConstraint linear_constraint = 1;
  repeated OrientationConstraint orientation_constraint = 2;
  repeated CollisionSpecification collision_specification = 3;
  // Arc constraint, Time constraint, and others will be added here when they are supported
}

// LinearConstraint specifies that the component being moved should move linearly relative to its goal.
// It does not constrain the motion of components other than the `component_name` specified in motion.Move
message LinearConstraint {
  optional float line_tolerance_mm = 1; // Max linear deviation from straight-line between start and goal, in mm.
  // Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
  optional float orientation_tolerance_degs = 2;
}

// OrientationConstraint specifies that the component being moved will not deviate its orientation beyond some threshold relative
// to the goal. It does not constrain the motion of components other than the `component_name` specified in motion.Move
message OrientationConstraint {
  // Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
  optional float orientation_tolerance_degs = 1;
}

// CollisionSpecification is used to selectively apply obstacle avoidance to specific parts of the robot
message CollisionSpecification {
  message AllowedFrameCollisions {
    string frame1 = 1;
    string frame2 = 2;
  }
  // Pairs of frame which should be allowed to collide with one another
  repeated AllowedFrameCollisions allows = 1;
}
