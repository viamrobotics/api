// source: provisioning/v1/provisioning.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.viam.provisioning.v1.CloudConfig', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.GetNetworkListRequest', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.GetNetworkListResponse', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.NetworkInfo', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.ProvisioningInfo', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.SetNetworkCredentialsRequest', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.SetNetworkCredentialsResponse', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest', null, global);
goog.exportSymbol('proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.displayName = 'proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.displayName = 'proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.SetNetworkCredentialsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.SetNetworkCredentialsRequest.displayName = 'proto.viam.provisioning.v1.SetNetworkCredentialsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.SetNetworkCredentialsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.SetNetworkCredentialsResponse.displayName = 'proto.viam.provisioning.v1.SetNetworkCredentialsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.displayName = 'proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.displayName = 'proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.GetNetworkListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.GetNetworkListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.GetNetworkListRequest.displayName = 'proto.viam.provisioning.v1.GetNetworkListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.GetNetworkListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viam.provisioning.v1.GetNetworkListResponse.repeatedFields_, null);
};
goog.inherits(proto.viam.provisioning.v1.GetNetworkListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.GetNetworkListResponse.displayName = 'proto.viam.provisioning.v1.GetNetworkListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.ProvisioningInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.ProvisioningInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.ProvisioningInfo.displayName = 'proto.viam.provisioning.v1.ProvisioningInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.NetworkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.NetworkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.NetworkInfo.displayName = 'proto.viam.provisioning.v1.NetworkInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viam.provisioning.v1.CloudConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viam.provisioning.v1.CloudConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viam.provisioning.v1.CloudConfig.displayName = 'proto.viam.provisioning.v1.CloudConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest;
  return proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    provisioningInfo: (f = msg.getProvisioningInfo()) && proto.viam.provisioning.v1.ProvisioningInfo.toObject(includeInstance, f),
    hasSmartphysicalDeviceCredentials: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isOnline: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    latestConnectionAttempt: (f = msg.getLatestConnectionAttempt()) && proto.viam.provisioning.v1.NetworkInfo.toObject(includeInstance, f),
    errorsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse;
  return proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.provisioning.v1.ProvisioningInfo;
      reader.readMessage(value,proto.viam.provisioning.v1.ProvisioningInfo.deserializeBinaryFromReader);
      msg.setProvisioningInfo(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasSmartphysicalDeviceCredentials(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnline(value);
      break;
    case 4:
      var value = new proto.viam.provisioning.v1.NetworkInfo;
      reader.readMessage(value,proto.viam.provisioning.v1.NetworkInfo.deserializeBinaryFromReader);
      msg.setLatestConnectionAttempt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvisioningInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.provisioning.v1.ProvisioningInfo.serializeBinaryToWriter
    );
  }
  f = message.getHasSmartphysicalDeviceCredentials();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsOnline();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLatestConnectionAttempt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.viam.provisioning.v1.NetworkInfo.serializeBinaryToWriter
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional ProvisioningInfo provisioning_info = 1;
 * @return {?proto.viam.provisioning.v1.ProvisioningInfo}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.getProvisioningInfo = function() {
  return /** @type{?proto.viam.provisioning.v1.ProvisioningInfo} */ (
    jspb.Message.getWrapperField(this, proto.viam.provisioning.v1.ProvisioningInfo, 1));
};


/**
 * @param {?proto.viam.provisioning.v1.ProvisioningInfo|undefined} value
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
*/
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.setProvisioningInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.clearProvisioningInfo = function() {
  return this.setProvisioningInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.hasProvisioningInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool has_smart_physicalDevice_credentials = 2;
 * @return {boolean}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.getHasSmartphysicalDeviceCredentials = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.setHasSmartphysicalDeviceCredentials = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool is_online = 3;
 * @return {boolean}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.getIsOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.setIsOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional NetworkInfo latest_connection_attempt = 4;
 * @return {?proto.viam.provisioning.v1.NetworkInfo}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.getLatestConnectionAttempt = function() {
  return /** @type{?proto.viam.provisioning.v1.NetworkInfo} */ (
    jspb.Message.getWrapperField(this, proto.viam.provisioning.v1.NetworkInfo, 4));
};


/**
 * @param {?proto.viam.provisioning.v1.NetworkInfo|undefined} value
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
*/
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.setLatestConnectionAttempt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.clearLatestConnectionAttempt = function() {
  return this.setLatestConnectionAttempt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.hasLatestConnectionAttempt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string errors = 5;
 * @return {!Array<string>}
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.setErrorsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.addErrors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse} returns this
 */
proto.viam.provisioning.v1.GetSmartphysicalDeviceStatusResponse.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.SetNetworkCredentialsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ssid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    psk: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.SetNetworkCredentialsRequest;
  return proto.viam.provisioning.v1.SetNetworkCredentialsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPsk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.SetNetworkCredentialsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPsk();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} returns this
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ssid = 2;
 * @return {string}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} returns this
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string psk = 3;
 * @return {string}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.getPsk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsRequest} returns this
 */
proto.viam.provisioning.v1.SetNetworkCredentialsRequest.prototype.setPsk = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.SetNetworkCredentialsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsResponse}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.SetNetworkCredentialsResponse;
  return proto.viam.provisioning.v1.SetNetworkCredentialsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.SetNetworkCredentialsResponse}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.SetNetworkCredentialsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.SetNetworkCredentialsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetNetworkCredentialsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cloud: (f = msg.getCloud()) && proto.viam.provisioning.v1.CloudConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest;
  return proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.provisioning.v1.CloudConfig;
      reader.readMessage(value,proto.viam.provisioning.v1.CloudConfig.deserializeBinaryFromReader);
      msg.setCloud(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCloud();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viam.provisioning.v1.CloudConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional CloudConfig cloud = 1;
 * @return {?proto.viam.provisioning.v1.CloudConfig}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.getCloud = function() {
  return /** @type{?proto.viam.provisioning.v1.CloudConfig} */ (
    jspb.Message.getWrapperField(this, proto.viam.provisioning.v1.CloudConfig, 1));
};


/**
 * @param {?proto.viam.provisioning.v1.CloudConfig|undefined} value
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest} returns this
*/
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.setCloud = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest} returns this
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.clearCloud = function() {
  return this.setCloud(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsRequest.prototype.hasCloud = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse;
  return proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.SetSmartphysicalDeviceCredentialsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.GetNetworkListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.GetNetworkListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.GetNetworkListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetNetworkListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.GetNetworkListRequest}
 */
proto.viam.provisioning.v1.GetNetworkListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.GetNetworkListRequest;
  return proto.viam.provisioning.v1.GetNetworkListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.GetNetworkListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.GetNetworkListRequest}
 */
proto.viam.provisioning.v1.GetNetworkListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.GetNetworkListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.GetNetworkListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.GetNetworkListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetNetworkListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viam.provisioning.v1.GetNetworkListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.GetNetworkListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.GetNetworkListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetNetworkListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    networksList: jspb.Message.toObjectList(msg.getNetworksList(),
    proto.viam.provisioning.v1.NetworkInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.GetNetworkListResponse}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.GetNetworkListResponse;
  return proto.viam.provisioning.v1.GetNetworkListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.GetNetworkListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.GetNetworkListResponse}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viam.provisioning.v1.NetworkInfo;
      reader.readMessage(value,proto.viam.provisioning.v1.NetworkInfo.deserializeBinaryFromReader);
      msg.addNetworks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.GetNetworkListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.GetNetworkListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.GetNetworkListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viam.provisioning.v1.NetworkInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NetworkInfo networks = 1;
 * @return {!Array<!proto.viam.provisioning.v1.NetworkInfo>}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.getNetworksList = function() {
  return /** @type{!Array<!proto.viam.provisioning.v1.NetworkInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viam.provisioning.v1.NetworkInfo, 1));
};


/**
 * @param {!Array<!proto.viam.provisioning.v1.NetworkInfo>} value
 * @return {!proto.viam.provisioning.v1.GetNetworkListResponse} returns this
*/
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.setNetworksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viam.provisioning.v1.NetworkInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viam.provisioning.v1.NetworkInfo}
 */
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.addNetworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viam.provisioning.v1.NetworkInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viam.provisioning.v1.GetNetworkListResponse} returns this
 */
proto.viam.provisioning.v1.GetNetworkListResponse.prototype.clearNetworksList = function() {
  return this.setNetworksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.ProvisioningInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.ProvisioningInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.ProvisioningInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fragmentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    model: jspb.Message.getFieldWithDefault(msg, 2, ""),
    manufacturer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.ProvisioningInfo}
 */
proto.viam.provisioning.v1.ProvisioningInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.ProvisioningInfo;
  return proto.viam.provisioning.v1.ProvisioningInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.ProvisioningInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.ProvisioningInfo}
 */
proto.viam.provisioning.v1.ProvisioningInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFragmentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setManufacturer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.ProvisioningInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.ProvisioningInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.ProvisioningInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFragmentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getManufacturer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string fragment_id = 1;
 * @return {string}
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.getFragmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.ProvisioningInfo} returns this
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.setFragmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.ProvisioningInfo} returns this
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string manufacturer = 3;
 * @return {string}
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.getManufacturer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.ProvisioningInfo} returns this
 */
proto.viam.provisioning.v1.ProvisioningInfo.prototype.setManufacturer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.NetworkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.NetworkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.NetworkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ssid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    security: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connected: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    lastError: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.NetworkInfo}
 */
proto.viam.provisioning.v1.NetworkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.NetworkInfo;
  return proto.viam.provisioning.v1.NetworkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.NetworkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.NetworkInfo}
 */
proto.viam.provisioning.v1.NetworkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSignal(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnected(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.NetworkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.NetworkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.NetworkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecurity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConnected();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLastError();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ssid = 2;
 * @return {string}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string security = 3;
 * @return {string}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getSecurity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setSecurity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 signal = 4;
 * @return {number}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getSignal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setSignal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool connected = 5;
 * @return {boolean}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setConnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string last_error = 6;
 * @return {string}
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.getLastError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.NetworkInfo} returns this
 */
proto.viam.provisioning.v1.NetworkInfo.prototype.setLastError = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viam.provisioning.v1.CloudConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.viam.provisioning.v1.CloudConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viam.provisioning.v1.CloudConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.CloudConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appAddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viam.provisioning.v1.CloudConfig}
 */
proto.viam.provisioning.v1.CloudConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viam.provisioning.v1.CloudConfig;
  return proto.viam.provisioning.v1.CloudConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viam.provisioning.v1.CloudConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viam.provisioning.v1.CloudConfig}
 */
proto.viam.provisioning.v1.CloudConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viam.provisioning.v1.CloudConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viam.provisioning.v1.CloudConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viam.provisioning.v1.CloudConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viam.provisioning.v1.CloudConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.viam.provisioning.v1.CloudConfig.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.CloudConfig} returns this
 */
proto.viam.provisioning.v1.CloudConfig.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.viam.provisioning.v1.CloudConfig.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.CloudConfig} returns this
 */
proto.viam.provisioning.v1.CloudConfig.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string app_address = 3;
 * @return {string}
 */
proto.viam.provisioning.v1.CloudConfig.prototype.getAppAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viam.provisioning.v1.CloudConfig} returns this
 */
proto.viam.provisioning.v1.CloudConfig.prototype.setAppAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.viam.provisioning.v1);
