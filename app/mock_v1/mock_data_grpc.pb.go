// Code generated by MockGen. DO NOT EDIT.
// Source: app/data/v1/data_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "go.viam.com/api/app/data/v1"
	grpc "google.golang.org/grpc"
)

// MockDataServiceClient is a mock of DataServiceClient interface.
type MockDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceClientMockRecorder
}

// MockDataServiceClientMockRecorder is the mock recorder for MockDataServiceClient.
type MockDataServiceClientMockRecorder struct {
	mock *MockDataServiceClient
}

// NewMockDataServiceClient creates a new mock instance.
func NewMockDataServiceClient(ctrl *gomock.Controller) *MockDataServiceClient {
	mock := &MockDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataServiceClient) EXPECT() *MockDataServiceClientMockRecorder {
	return m.recorder
}

// AddTagsToBinaryDataByFileIDs mocks base method.
func (m *MockDataServiceClient) AddTagsToBinaryDataByFileIDs(ctx context.Context, in *v1.AddTagsToBinaryDataByFileIDsRequest, opts ...grpc.CallOption) (*v1.AddTagsToBinaryDataByFileIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToBinaryDataByFileIDs", varargs...)
	ret0, _ := ret[0].(*v1.AddTagsToBinaryDataByFileIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToBinaryDataByFileIDs indicates an expected call of AddTagsToBinaryDataByFileIDs.
func (mr *MockDataServiceClientMockRecorder) AddTagsToBinaryDataByFileIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToBinaryDataByFileIDs", reflect.TypeOf((*MockDataServiceClient)(nil).AddTagsToBinaryDataByFileIDs), varargs...)
}

// AddTagsToBinaryDataByFilter mocks base method.
func (m *MockDataServiceClient) AddTagsToBinaryDataByFilter(ctx context.Context, in *v1.AddTagsToBinaryDataByFilterRequest, opts ...grpc.CallOption) (*v1.AddTagsToBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToBinaryDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.AddTagsToBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToBinaryDataByFilter indicates an expected call of AddTagsToBinaryDataByFilter.
func (mr *MockDataServiceClientMockRecorder) AddTagsToBinaryDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToBinaryDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).AddTagsToBinaryDataByFilter), varargs...)
}

// BinaryDataByFilter mocks base method.
func (m *MockDataServiceClient) BinaryDataByFilter(ctx context.Context, in *v1.BinaryDataByFilterRequest, opts ...grpc.CallOption) (*v1.BinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BinaryDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.BinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BinaryDataByFilter indicates an expected call of BinaryDataByFilter.
func (mr *MockDataServiceClientMockRecorder) BinaryDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).BinaryDataByFilter), varargs...)
}

// BinaryDataByIDs mocks base method.
func (m *MockDataServiceClient) BinaryDataByIDs(ctx context.Context, in *v1.BinaryDataByIDsRequest, opts ...grpc.CallOption) (*v1.BinaryDataByIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BinaryDataByIDs", varargs...)
	ret0, _ := ret[0].(*v1.BinaryDataByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BinaryDataByIDs indicates an expected call of BinaryDataByIDs.
func (mr *MockDataServiceClientMockRecorder) BinaryDataByIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryDataByIDs", reflect.TypeOf((*MockDataServiceClient)(nil).BinaryDataByIDs), varargs...)
}

// DeleteBinaryDataByFilter mocks base method.
func (m *MockDataServiceClient) DeleteBinaryDataByFilter(ctx context.Context, in *v1.DeleteBinaryDataByFilterRequest, opts ...grpc.CallOption) (*v1.DeleteBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBinaryDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.DeleteBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryDataByFilter indicates an expected call of DeleteBinaryDataByFilter.
func (mr *MockDataServiceClientMockRecorder) DeleteBinaryDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).DeleteBinaryDataByFilter), varargs...)
}

// DeleteBinaryDataByIDs mocks base method.
func (m *MockDataServiceClient) DeleteBinaryDataByIDs(ctx context.Context, in *v1.DeleteBinaryDataByIDsRequest, opts ...grpc.CallOption) (*v1.DeleteBinaryDataByIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBinaryDataByIDs", varargs...)
	ret0, _ := ret[0].(*v1.DeleteBinaryDataByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryDataByIDs indicates an expected call of DeleteBinaryDataByIDs.
func (mr *MockDataServiceClientMockRecorder) DeleteBinaryDataByIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryDataByIDs", reflect.TypeOf((*MockDataServiceClient)(nil).DeleteBinaryDataByIDs), varargs...)
}

// DeleteTabularDataByFilter mocks base method.
func (m *MockDataServiceClient) DeleteTabularDataByFilter(ctx context.Context, in *v1.DeleteTabularDataByFilterRequest, opts ...grpc.CallOption) (*v1.DeleteTabularDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTabularDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.DeleteTabularDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTabularDataByFilter indicates an expected call of DeleteTabularDataByFilter.
func (mr *MockDataServiceClientMockRecorder) DeleteTabularDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTabularDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).DeleteTabularDataByFilter), varargs...)
}

// GetTrainingJob mocks base method.
func (m *MockDataServiceClient) GetTrainingJob(ctx context.Context, in *v1.GetTrainingJobRequest, opts ...grpc.CallOption) (*v1.GetTrainingJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrainingJob", varargs...)
	ret0, _ := ret[0].(*v1.GetTrainingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingJob indicates an expected call of GetTrainingJob.
func (mr *MockDataServiceClientMockRecorder) GetTrainingJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingJob", reflect.TypeOf((*MockDataServiceClient)(nil).GetTrainingJob), varargs...)
}

// RemoveTagsFromBinaryDataByFileIDs mocks base method.
func (m *MockDataServiceClient) RemoveTagsFromBinaryDataByFileIDs(ctx context.Context, in *v1.RemoveTagsFromBinaryDataByFileIDsRequest, opts ...grpc.CallOption) (*v1.RemoveTagsFromBinaryDataByFileIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromBinaryDataByFileIDs", varargs...)
	ret0, _ := ret[0].(*v1.RemoveTagsFromBinaryDataByFileIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromBinaryDataByFileIDs indicates an expected call of RemoveTagsFromBinaryDataByFileIDs.
func (mr *MockDataServiceClientMockRecorder) RemoveTagsFromBinaryDataByFileIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromBinaryDataByFileIDs", reflect.TypeOf((*MockDataServiceClient)(nil).RemoveTagsFromBinaryDataByFileIDs), varargs...)
}

// RemoveTagsFromBinaryDataByFilter mocks base method.
func (m *MockDataServiceClient) RemoveTagsFromBinaryDataByFilter(ctx context.Context, in *v1.RemoveTagsFromBinaryDataByFilterRequest, opts ...grpc.CallOption) (*v1.RemoveTagsFromBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromBinaryDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.RemoveTagsFromBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromBinaryDataByFilter indicates an expected call of RemoveTagsFromBinaryDataByFilter.
func (mr *MockDataServiceClientMockRecorder) RemoveTagsFromBinaryDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromBinaryDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).RemoveTagsFromBinaryDataByFilter), varargs...)
}

// SubmitTrainingJob mocks base method.
func (m *MockDataServiceClient) SubmitTrainingJob(ctx context.Context, in *v1.SubmitTrainingJobRequest, opts ...grpc.CallOption) (*v1.SubmitTrainingJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTrainingJob", varargs...)
	ret0, _ := ret[0].(*v1.SubmitTrainingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTrainingJob indicates an expected call of SubmitTrainingJob.
func (mr *MockDataServiceClientMockRecorder) SubmitTrainingJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTrainingJob", reflect.TypeOf((*MockDataServiceClient)(nil).SubmitTrainingJob), varargs...)
}

// TabularDataByFilter mocks base method.
func (m *MockDataServiceClient) TabularDataByFilter(ctx context.Context, in *v1.TabularDataByFilterRequest, opts ...grpc.CallOption) (*v1.TabularDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TabularDataByFilter", varargs...)
	ret0, _ := ret[0].(*v1.TabularDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TabularDataByFilter indicates an expected call of TabularDataByFilter.
func (mr *MockDataServiceClientMockRecorder) TabularDataByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TabularDataByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).TabularDataByFilter), varargs...)
}

// TagsByFilter mocks base method.
func (m *MockDataServiceClient) TagsByFilter(ctx context.Context, in *v1.TagsByFilterRequest, opts ...grpc.CallOption) (*v1.TagsByFilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagsByFilter", varargs...)
	ret0, _ := ret[0].(*v1.TagsByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsByFilter indicates an expected call of TagsByFilter.
func (mr *MockDataServiceClientMockRecorder) TagsByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsByFilter", reflect.TypeOf((*MockDataServiceClient)(nil).TagsByFilter), varargs...)
}

// MockDataServiceServer is a mock of DataServiceServer interface.
type MockDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceServerMockRecorder
}

// MockDataServiceServerMockRecorder is the mock recorder for MockDataServiceServer.
type MockDataServiceServerMockRecorder struct {
	mock *MockDataServiceServer
}

// NewMockDataServiceServer creates a new mock instance.
func NewMockDataServiceServer(ctrl *gomock.Controller) *MockDataServiceServer {
	mock := &MockDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataServiceServer) EXPECT() *MockDataServiceServerMockRecorder {
	return m.recorder
}

// AddTagsToBinaryDataByFileIDs mocks base method.
func (m *MockDataServiceServer) AddTagsToBinaryDataByFileIDs(arg0 context.Context, arg1 *v1.AddTagsToBinaryDataByFileIDsRequest) (*v1.AddTagsToBinaryDataByFileIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToBinaryDataByFileIDs", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddTagsToBinaryDataByFileIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToBinaryDataByFileIDs indicates an expected call of AddTagsToBinaryDataByFileIDs.
func (mr *MockDataServiceServerMockRecorder) AddTagsToBinaryDataByFileIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToBinaryDataByFileIDs", reflect.TypeOf((*MockDataServiceServer)(nil).AddTagsToBinaryDataByFileIDs), arg0, arg1)
}

// AddTagsToBinaryDataByFilter mocks base method.
func (m *MockDataServiceServer) AddTagsToBinaryDataByFilter(arg0 context.Context, arg1 *v1.AddTagsToBinaryDataByFilterRequest) (*v1.AddTagsToBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToBinaryDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddTagsToBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToBinaryDataByFilter indicates an expected call of AddTagsToBinaryDataByFilter.
func (mr *MockDataServiceServerMockRecorder) AddTagsToBinaryDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToBinaryDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).AddTagsToBinaryDataByFilter), arg0, arg1)
}

// BinaryDataByFilter mocks base method.
func (m *MockDataServiceServer) BinaryDataByFilter(arg0 context.Context, arg1 *v1.BinaryDataByFilterRequest) (*v1.BinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.BinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BinaryDataByFilter indicates an expected call of BinaryDataByFilter.
func (mr *MockDataServiceServerMockRecorder) BinaryDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).BinaryDataByFilter), arg0, arg1)
}

// BinaryDataByIDs mocks base method.
func (m *MockDataServiceServer) BinaryDataByIDs(arg0 context.Context, arg1 *v1.BinaryDataByIDsRequest) (*v1.BinaryDataByIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryDataByIDs", arg0, arg1)
	ret0, _ := ret[0].(*v1.BinaryDataByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BinaryDataByIDs indicates an expected call of BinaryDataByIDs.
func (mr *MockDataServiceServerMockRecorder) BinaryDataByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryDataByIDs", reflect.TypeOf((*MockDataServiceServer)(nil).BinaryDataByIDs), arg0, arg1)
}

// DeleteBinaryDataByFilter mocks base method.
func (m *MockDataServiceServer) DeleteBinaryDataByFilter(arg0 context.Context, arg1 *v1.DeleteBinaryDataByFilterRequest) (*v1.DeleteBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinaryDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryDataByFilter indicates an expected call of DeleteBinaryDataByFilter.
func (mr *MockDataServiceServerMockRecorder) DeleteBinaryDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).DeleteBinaryDataByFilter), arg0, arg1)
}

// DeleteBinaryDataByIDs mocks base method.
func (m *MockDataServiceServer) DeleteBinaryDataByIDs(arg0 context.Context, arg1 *v1.DeleteBinaryDataByIDsRequest) (*v1.DeleteBinaryDataByIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinaryDataByIDs", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteBinaryDataByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinaryDataByIDs indicates an expected call of DeleteBinaryDataByIDs.
func (mr *MockDataServiceServerMockRecorder) DeleteBinaryDataByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryDataByIDs", reflect.TypeOf((*MockDataServiceServer)(nil).DeleteBinaryDataByIDs), arg0, arg1)
}

// DeleteTabularDataByFilter mocks base method.
func (m *MockDataServiceServer) DeleteTabularDataByFilter(arg0 context.Context, arg1 *v1.DeleteTabularDataByFilterRequest) (*v1.DeleteTabularDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTabularDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteTabularDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTabularDataByFilter indicates an expected call of DeleteTabularDataByFilter.
func (mr *MockDataServiceServerMockRecorder) DeleteTabularDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTabularDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).DeleteTabularDataByFilter), arg0, arg1)
}

// GetTrainingJob mocks base method.
func (m *MockDataServiceServer) GetTrainingJob(arg0 context.Context, arg1 *v1.GetTrainingJobRequest) (*v1.GetTrainingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainingJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetTrainingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingJob indicates an expected call of GetTrainingJob.
func (mr *MockDataServiceServerMockRecorder) GetTrainingJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingJob", reflect.TypeOf((*MockDataServiceServer)(nil).GetTrainingJob), arg0, arg1)
}

// RemoveTagsFromBinaryDataByFileIDs mocks base method.
func (m *MockDataServiceServer) RemoveTagsFromBinaryDataByFileIDs(arg0 context.Context, arg1 *v1.RemoveTagsFromBinaryDataByFileIDsRequest) (*v1.RemoveTagsFromBinaryDataByFileIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromBinaryDataByFileIDs", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveTagsFromBinaryDataByFileIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromBinaryDataByFileIDs indicates an expected call of RemoveTagsFromBinaryDataByFileIDs.
func (mr *MockDataServiceServerMockRecorder) RemoveTagsFromBinaryDataByFileIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromBinaryDataByFileIDs", reflect.TypeOf((*MockDataServiceServer)(nil).RemoveTagsFromBinaryDataByFileIDs), arg0, arg1)
}

// RemoveTagsFromBinaryDataByFilter mocks base method.
func (m *MockDataServiceServer) RemoveTagsFromBinaryDataByFilter(arg0 context.Context, arg1 *v1.RemoveTagsFromBinaryDataByFilterRequest) (*v1.RemoveTagsFromBinaryDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromBinaryDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveTagsFromBinaryDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromBinaryDataByFilter indicates an expected call of RemoveTagsFromBinaryDataByFilter.
func (mr *MockDataServiceServerMockRecorder) RemoveTagsFromBinaryDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromBinaryDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).RemoveTagsFromBinaryDataByFilter), arg0, arg1)
}

// SubmitTrainingJob mocks base method.
func (m *MockDataServiceServer) SubmitTrainingJob(arg0 context.Context, arg1 *v1.SubmitTrainingJobRequest) (*v1.SubmitTrainingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTrainingJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.SubmitTrainingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTrainingJob indicates an expected call of SubmitTrainingJob.
func (mr *MockDataServiceServerMockRecorder) SubmitTrainingJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTrainingJob", reflect.TypeOf((*MockDataServiceServer)(nil).SubmitTrainingJob), arg0, arg1)
}

// TabularDataByFilter mocks base method.
func (m *MockDataServiceServer) TabularDataByFilter(arg0 context.Context, arg1 *v1.TabularDataByFilterRequest) (*v1.TabularDataByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TabularDataByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.TabularDataByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TabularDataByFilter indicates an expected call of TabularDataByFilter.
func (mr *MockDataServiceServerMockRecorder) TabularDataByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TabularDataByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).TabularDataByFilter), arg0, arg1)
}

// TagsByFilter mocks base method.
func (m *MockDataServiceServer) TagsByFilter(arg0 context.Context, arg1 *v1.TagsByFilterRequest) (*v1.TagsByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsByFilter", arg0, arg1)
	ret0, _ := ret[0].(*v1.TagsByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsByFilter indicates an expected call of TagsByFilter.
func (mr *MockDataServiceServerMockRecorder) TagsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsByFilter", reflect.TypeOf((*MockDataServiceServer)(nil).TagsByFilter), arg0, arg1)
}

// mustEmbedUnimplementedDataServiceServer mocks base method.
func (m *MockDataServiceServer) mustEmbedUnimplementedDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataServiceServer")
}

// mustEmbedUnimplementedDataServiceServer indicates an expected call of mustEmbedUnimplementedDataServiceServer.
func (mr *MockDataServiceServerMockRecorder) mustEmbedUnimplementedDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataServiceServer", reflect.TypeOf((*MockDataServiceServer)(nil).mustEmbedUnimplementedDataServiceServer))
}

// MockUnsafeDataServiceServer is a mock of UnsafeDataServiceServer interface.
type MockUnsafeDataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDataServiceServerMockRecorder
}

// MockUnsafeDataServiceServerMockRecorder is the mock recorder for MockUnsafeDataServiceServer.
type MockUnsafeDataServiceServerMockRecorder struct {
	mock *MockUnsafeDataServiceServer
}

// NewMockUnsafeDataServiceServer creates a new mock instance.
func NewMockUnsafeDataServiceServer(ctrl *gomock.Controller) *MockUnsafeDataServiceServer {
	mock := &MockUnsafeDataServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDataServiceServer) EXPECT() *MockUnsafeDataServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDataServiceServer mocks base method.
func (m *MockUnsafeDataServiceServer) mustEmbedUnimplementedDataServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataServiceServer")
}

// mustEmbedUnimplementedDataServiceServer indicates an expected call of mustEmbedUnimplementedDataServiceServer.
func (mr *MockUnsafeDataServiceServerMockRecorder) mustEmbedUnimplementedDataServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataServiceServer", reflect.TypeOf((*MockUnsafeDataServiceServer)(nil).mustEmbedUnimplementedDataServiceServer))
}
