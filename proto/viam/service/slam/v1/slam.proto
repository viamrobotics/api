syntax = "proto3";

package viam.service.slam.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "go.viam.com/api/service/slam/v1";
option java_package = "com.viam.service.slam.v1";

// A SlamService declares the gRPC contract for a slam service
service SLAMService {
  // GetPosition returns the current estimated position of the robot with
  // respect to a returned component reference.
  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/position"
    };
  }

  // GetPointCloudMap returns the latest pointcloud map available where XY is the ground
  // plane and positive Z is up, following the Right Hand Rule.
  rpc GetPointCloudMap(GetPointCloudMapRequest) returns (stream GetPointCloudMapResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/point_cloud_map"
    };
  }

  // GetInternalState returns the internal map as defined by the specified slam
  // algorithm required to continue mapping/localizing.
  // This endpoint is not intended for end users.
  rpc GetInternalState(GetInternalStateRequest) returns (stream GetInternalStateResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/internal_state"
    };
  }

  // GetLatestMapInfo returns a message indicating details regarding the
  // latest map returned to the system.
  rpc GetLatestMapInfo(GetLatestMapInfoRequest) returns (GetLatestMapInfoResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/slam/{name}/latest_map_info"
    };
  }

  // DoCommand sends/receives arbitrary commands.
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/slam/{name}/do_command"
    };
  }
}

message GetPositionRequest {
  // Name of slam service
  string name = 1;
}

message GetPositionResponse {
  // Current position of the specified component in the SLAM Map
  common.v1.Pose pose = 1;
  // This is usually the name of the camera that is in the SLAM config
  string component_reference = 2;
  // Additional information in the response
  google.protobuf.Struct extra = 99;
}

message GetPointCloudMapRequest {
  // Name of slam service
  string name = 1;
}

message GetPointCloudMapResponse {
  // One chunk of the PointCloud.
  // For a given GetPointCloudMap request, concatenating all
  // GetPointCloudMapResponse.point_cloud_pcd_chunk values in the
  // order received result in the complete pointcloud in standard PCD
  // format where XY is the ground plane and positive Z is up, following
  // the Right Hand Rule.
  //
  // Read more about the pointcloud format here:
  // https://pointclouds.org/documentation/tutorials/pcd_file_format.html
  //
  // Viam expects pointcloud data with fields "x y z" or "x y z rgb", and for
  // this to be specified in the pointcloud header in the FIELDS entry. If color
  // data is included in the pointcloud, Viam's services assume that the color
  // value encodes a confidence score for that data point. Viam expects the
  // confidence score to be encoded in the blue parameter of the RGB value, on a
  // scale from 1-100.
  //
  // Pointclouds are little endian encoded.
  bytes point_cloud_pcd_chunk = 1;
}

message GetInternalStateRequest {
  // Name of slam service
  string name = 1;
}

message GetInternalStateResponse {
  // Chunk of the internal state of the SLAM algorithm required to continue
  // mapping/localization
  bytes internal_state_chunk = 1;
}

message GetLatestMapInfoRequest {
  // Name of the SLAM algo
  string name = 1;
}
message GetLatestMapInfoResponse {
  google.protobuf.Timestamp last_map_update = 1;
}
