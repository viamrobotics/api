syntax = "proto3";

package viam.component.camera.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";

option go_package = "go.viam.com/api/component/camera/v1";
option java_package = "com.viam.component.camera.v1";

// A CameraService services all cameras associated with a robot
service CameraService {
  // GetImage returns a frame from a camera of the underlying robot. A specific MIME type
  // can be requested but may not necessarily be the same one returned.
  rpc GetImage(GetImageRequest) returns (GetImageResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/camera/{name}/image"
    };
  }

  // RenderFrame renders a frame from a camera of the underlying robot to an HTTP response. A specific MIME type
  // can be requested but may not necessarily be the same one returned.
  rpc RenderFrame(RenderFrameRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/camera/{name}/render_frame"
    };
  }

  // GetPointCloud returns a point cloud from a camera of the underlying robot. A specific MIME type
  // can be requested but may not necessarily be the same one returned.
  rpc GetPointCloud(GetPointCloudRequest) returns (GetPointCloudResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/camera/{name}/point_cloud"
    };
  }

  // GetProperties returns the camera intrinsic parameters and camera distortion parameters from a camera of the underlying robot, if available.
  rpc GetProperties(GetPropertiesRequest) returns (GetPropertiesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/camera/{name}/properties"
    };
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/component/camera/{name}/do_command"
    };
  }

  // GetGeometries returns the geometries of the component in their current configuration
  rpc GetGeometries(common.v1.GetGeometriesRequest) returns (common.v1.GetGeometriesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/camera/{name}/geometries"
    };
  }
}

message GetImageRequest {
  // Name of a camera
  string name = 1;
  // Requested MIME type of response
  string mime_type = 2;
}

message GetImageResponse {
  // Actual MIME type of response
  string mime_type = 1;
  // Frame in bytes
  bytes image = 2;
}

message RenderFrameRequest {
  // Name of a camera
  string name = 1;
  // Requested MIME type of response
  string mime_type = 2;
}

message GetPointCloudRequest {
  // Name of a camera
  string name = 1;
  // Requested MIME type of response
  string mime_type = 2;
}

message GetPointCloudResponse {
  // Actual MIME type of response
  string mime_type = 1;
  // Frame in bytes
  bytes point_cloud = 2;
}

message GetPropertiesRequest {
  // Name of a camera
  string name = 1;
}

message GetPropertiesResponse {
  // A boolean property determining whether the camera supports the return of pointcloud data
  bool supports_pcd = 1;
  // Parameters for doing a perspective of a 3D scene to a 2D plane
  // If camera does not provide intrinsic parameters, leave the field empty
  // Initializing the parameters with 0-values is considered an error
  IntrinsicParameters intrinsic_parameters = 2;
  // Parameters for modeling lens distortion in cameras
  // If camera does not provide distortion parameters, leave the field empty
  // Initializing the parameters with 0-values is considered an error
  DistortionParameters distortion_parameters = 3;
}

message Webcams {
  repeated Webcam webcams = 1;
}

message Webcam {
  // Camera driver label (for internal use only)
  string label = 1;
  // Camera driver status
  string status = 2;
  // Camera properties
  repeated Property properties = 3;
  // Camera human-readable driver name
  string name = 4;
  // Camera unique identifier
  string id = 5;
}

message Property {
  // Video resolution width in px
  int32 width_px = 1;
  // Video resolution height in px
  int32 height_px = 2;
  // Video frame format
  string frame_format = 3;
  // Video frame rate in fps
  float frame_rate = 4;
}

message IntrinsicParameters {
  uint32 width_px = 1;
  uint32 height_px = 2;
  double focal_x_px = 3;
  double focal_y_px = 4;
  double center_x_px = 5;
  double center_y_px = 6;
}

message DistortionParameters {
  string model = 1;
  repeated double parameters = 2;
}
