syntax = "proto3";

package viam.component.audioinput.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/duration.proto";

option go_package = "go.viam.com/api/component/audioinput/v1";
option java_package = "com.viam.component.audioinput.v1";

// An AudioInputService services all audio inputs associated with a robot
service AudioInputService {
  // Chunks returns audio chunks forever from an audio input of the underlying robot.
  rpc Chunks(ChunksRequest) returns (stream ChunksResponse);

  // Properties returns properties of an audio input of the underlying robot.
  rpc Properties(PropertiesRequest) returns (PropertiesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/audioinput/{name}/properties"
    };
  }

  // Record records audio from an audio input of the underlying robot
  // to an HTTP response. A specific MIME type cannot be requested and may not necessarily
  // be the same one returned each time.
  rpc Record(RecordRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/audioinput/{name}/record"
    };
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/component/audioinput/{name}/do_command"
    };
  }

  // GetGeometries returns the geometries of the component in their current configuration
  rpc GetGeometries(common.v1.GetGeometriesRequest) returns (common.v1.GetGeometriesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/audioinput/{name}/geometries"
    };
  }
}

enum SampleFormat {
  SAMPLE_FORMAT_UNSPECIFIED = 0;
  SAMPLE_FORMAT_INT16_INTERLEAVED = 1;
  SAMPLE_FORMAT_FLOAT32_INTERLEAVED = 2;
}

message RecordRequest {
  // Name of an audio input
  string name = 1;
  google.protobuf.Duration duration = 2;
}

message AudioChunkInfo {
  // Actual sample encoding format of the response
  SampleFormat sample_format = 1;
  uint32 channels = 2;
  int64 sampling_rate = 3;
}

message AudioChunk {
  // Data is PCM data that is organized according to the sample format
  // along with its possible interleaving. Data in each format is
  // Little Endian.
  bytes data = 1;
  // Length is the number of samples
  uint32 length = 2;
}

message ChunksRequest {
  // Name of an audio input
  string name = 1;
  // Requested sample encoding format of the response
  SampleFormat sample_format = 2;
}

message ChunksResponse {
  oneof type {
    AudioChunkInfo info = 1;
    AudioChunk chunk = 2;
  }
}

message PropertiesRequest {
  // Name of an audio input
  string name = 1;
}

message PropertiesResponse {
  uint32 channel_count = 1;
  google.protobuf.Duration latency = 2;
  uint32 sample_rate = 3;
  uint32 sample_size = 4;
  bool is_big_endian = 5;
  bool is_float = 6;
  bool is_interleaved = 7;
}
