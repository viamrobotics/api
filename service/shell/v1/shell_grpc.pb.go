// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: service/shell/v1/shell.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShellService_Shell_FullMethodName                = "/viam.service.shell.v1.ShellService/Shell"
	ShellService_CopyFilesToMachine_FullMethodName   = "/viam.service.shell.v1.ShellService/CopyFilesToMachine"
	ShellService_CopyFilesFromMachine_FullMethodName = "/viam.service.shell.v1.ShellService/CopyFilesFromMachine"
	ShellService_DoCommand_FullMethodName            = "/viam.service.shell.v1.ShellService/DoCommand"
)

// ShellServiceClient is the client API for ShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A ShellService service allows access to an interactive shell experience, including
// utilities commonly found in tandem with other secure shells.
type ShellServiceClient interface {
	// Shell starts a shell with an input and output pipe.
	Shell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellRequest, ShellResponse], error)
	// CopyFilesToMachines copies a stream of files from a client to the connected-to machine.
	// Initially, metadata is sent to describe the destination in the filesystem in addition
	// to what kind of file(s) are being sent.
	// Once metadata is sent, the file transfer can proceed where one-by-one, file data is sent
	// until EOF per file.
	// After each file is sent, the machine must respond with an ACK before the next file can
	// be sent. This provides back-pressure and ordering.
	// The order in which individual files are sent does not matter; that is, if traversing a
	// directory, copying depth-first, breadth-first, or any other algorithm does not matter.
	// Permissions and metadata on files copied are only preserved if the preserve option is
	// set in the initial request metadata.
	CopyFilesToMachine(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CopyFilesToMachineRequest, CopyFilesToMachineResponse], error)
	// CopyFilesFromMachine copies a stream of files from a connected-to machine to the calling client.
	// Essentially, it is the inverse of CopyFilesToMachine with the same ACK mechanism in reverse.
	// The initial metadata request will request the paths to copy along with if permissions should
	// be preserved (and consequently sent over the wire).
	CopyFilesFromMachine(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse], error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type shellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShellServiceClient(cc grpc.ClientConnInterface) ShellServiceClient {
	return &shellServiceClient{cc}
}

func (c *shellServiceClient) Shell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellRequest, ShellResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[0], ShellService_Shell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellRequest, ShellResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_ShellClient = grpc.BidiStreamingClient[ShellRequest, ShellResponse]

func (c *shellServiceClient) CopyFilesToMachine(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CopyFilesToMachineRequest, CopyFilesToMachineResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[1], ShellService_CopyFilesToMachine_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyFilesToMachineRequest, CopyFilesToMachineResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_CopyFilesToMachineClient = grpc.BidiStreamingClient[CopyFilesToMachineRequest, CopyFilesToMachineResponse]

func (c *shellServiceClient) CopyFilesFromMachine(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[2], ShellService_CopyFilesFromMachine_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_CopyFilesFromMachineClient = grpc.BidiStreamingClient[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]

func (c *shellServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, ShellService_DoCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellServiceServer is the server API for ShellService service.
// All implementations must embed UnimplementedShellServiceServer
// for forward compatibility.
//
// A ShellService service allows access to an interactive shell experience, including
// utilities commonly found in tandem with other secure shells.
type ShellServiceServer interface {
	// Shell starts a shell with an input and output pipe.
	Shell(grpc.BidiStreamingServer[ShellRequest, ShellResponse]) error
	// CopyFilesToMachines copies a stream of files from a client to the connected-to machine.
	// Initially, metadata is sent to describe the destination in the filesystem in addition
	// to what kind of file(s) are being sent.
	// Once metadata is sent, the file transfer can proceed where one-by-one, file data is sent
	// until EOF per file.
	// After each file is sent, the machine must respond with an ACK before the next file can
	// be sent. This provides back-pressure and ordering.
	// The order in which individual files are sent does not matter; that is, if traversing a
	// directory, copying depth-first, breadth-first, or any other algorithm does not matter.
	// Permissions and metadata on files copied are only preserved if the preserve option is
	// set in the initial request metadata.
	CopyFilesToMachine(grpc.BidiStreamingServer[CopyFilesToMachineRequest, CopyFilesToMachineResponse]) error
	// CopyFilesFromMachine copies a stream of files from a connected-to machine to the calling client.
	// Essentially, it is the inverse of CopyFilesToMachine with the same ACK mechanism in reverse.
	// The initial metadata request will request the paths to copy along with if permissions should
	// be preserved (and consequently sent over the wire).
	CopyFilesFromMachine(grpc.BidiStreamingServer[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]) error
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedShellServiceServer()
}

// UnimplementedShellServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShellServiceServer struct{}

func (UnimplementedShellServiceServer) Shell(grpc.BidiStreamingServer[ShellRequest, ShellResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedShellServiceServer) CopyFilesToMachine(grpc.BidiStreamingServer[CopyFilesToMachineRequest, CopyFilesToMachineResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyFilesToMachine not implemented")
}
func (UnimplementedShellServiceServer) CopyFilesFromMachine(grpc.BidiStreamingServer[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyFilesFromMachine not implemented")
}
func (UnimplementedShellServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedShellServiceServer) mustEmbedUnimplementedShellServiceServer() {}
func (UnimplementedShellServiceServer) testEmbeddedByValue()                      {}

// UnsafeShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellServiceServer will
// result in compilation errors.
type UnsafeShellServiceServer interface {
	mustEmbedUnimplementedShellServiceServer()
}

func RegisterShellServiceServer(s grpc.ServiceRegistrar, srv ShellServiceServer) {
	// If the following call pancis, it indicates UnimplementedShellServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShellService_ServiceDesc, srv)
}

func _ShellService_Shell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).Shell(&grpc.GenericServerStream[ShellRequest, ShellResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_ShellServer = grpc.BidiStreamingServer[ShellRequest, ShellResponse]

func _ShellService_CopyFilesToMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).CopyFilesToMachine(&grpc.GenericServerStream[CopyFilesToMachineRequest, CopyFilesToMachineResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_CopyFilesToMachineServer = grpc.BidiStreamingServer[CopyFilesToMachineRequest, CopyFilesToMachineResponse]

func _ShellService_CopyFilesFromMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).CopyFilesFromMachine(&grpc.GenericServerStream[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellService_CopyFilesFromMachineServer = grpc.BidiStreamingServer[CopyFilesFromMachineRequest, CopyFilesFromMachineResponse]

func _ShellService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShellService_DoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellService_ServiceDesc is the grpc.ServiceDesc for ShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.shell.v1.ShellService",
	HandlerType: (*ShellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCommand",
			Handler:    _ShellService_DoCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shell",
			Handler:       _ShellService_Shell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFilesToMachine",
			Handler:       _ShellService_CopyFilesToMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFilesFromMachine",
			Handler:       _ShellService_CopyFilesFromMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/shell/v1/shell.proto",
}
